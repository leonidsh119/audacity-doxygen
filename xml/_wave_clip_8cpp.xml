<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_wave_clip_8cpp" kind="file" language="C++">
    <compoundname>WaveClip.cpp</compoundname>
    <includes refid="_wave_clip_8h" local="yes">WaveClip.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="_memory_x_8h" local="yes">MemoryX.h</includes>
    <includes local="no">functional</includes>
    <includes local="no">vector</includes>
    <includes local="no">wx/log.h</includes>
    <includes refid="_sequence_8h" local="yes">Sequence.h</includes>
    <includes refid="_spectrum_8h" local="yes">Spectrum.h</includes>
    <includes refid="_prefs_8h" local="yes">Prefs.h</includes>
    <includes refid="src_2_envelope_8h" local="yes">Envelope.h</includes>
    <includes refid="_resample_8h" local="yes">Resample.h</includes>
    <includes refid="_project_8h" local="yes">Project.h</includes>
    <includes refid="_wave_track_8h" local="yes">WaveTrack.h</includes>
    <includes refid="_spectrogram_settings_8h" local="yes">prefs/SpectrogramSettings.h</includes>
    <includes local="no">wx/listimpl.cpp</includes>
    <includes refid="_experimental_8h" local="yes">Experimental.h</includes>
    <includes refid="src_2fft_8h" local="yes">FFT.h</includes>
    <incdepgraph>
      <node id="57842">
        <label>wx/dir.h</label>
      </node>
      <node id="57849">
        <label>wx/choice.h</label>
      </node>
      <node id="57782">
        <label>WaveClip.h</label>
        <link refid="_wave_clip_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57784" relation="include">
        </childnode>
        <childnode refid="57789" relation="include">
        </childnode>
        <childnode refid="57795" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57803" relation="include">
        </childnode>
        <childnode refid="57804" relation="include">
        </childnode>
        <childnode refid="57805" relation="include">
        </childnode>
        <childnode refid="57806" relation="include">
        </childnode>
        <childnode refid="57807" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
      </node>
      <node id="57812">
        <label>functional</label>
      </node>
      <node id="57832">
        <label>wx/hashmap.h</label>
      </node>
      <node id="57869">
        <label>toolbars/SelectionBarListener.h</label>
        <link refid="_selection_bar_listener_8h"/>
      </node>
      <node id="57792">
        <label>wx/gauge.h</label>
      </node>
      <node id="57843">
        <label>wx/event.h</label>
      </node>
      <node id="57801">
        <label>wx/ffile.h</label>
      </node>
      <node id="57862">
        <label>audacity/ModuleInterface.h</label>
        <link refid="_module_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
        <childnode refid="57855" relation="include">
        </childnode>
        <childnode refid="57863" relation="include">
        </childnode>
      </node>
      <node id="57874">
        <label>wx/dcclient.h</label>
      </node>
      <node id="57841">
        <label>wx/cmdline.h</label>
      </node>
      <node id="57854">
        <label>audacity/EffectInterface.h</label>
        <link refid="_effect_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
        <childnode refid="57855" relation="include">
        </childnode>
        <childnode refid="57856" relation="include">
        </childnode>
        <childnode refid="57857" relation="include">
        </childnode>
        <childnode refid="57790" relation="include">
        </childnode>
      </node>
      <node id="57816">
        <label>FFT.h</label>
        <link refid="src_2fft_8h"/>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57817" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
      </node>
      <node id="57781">
        <label>C:/_dev/OpenU/Audacity/audacity/src/WaveClip.cpp</label>
        <link refid="WaveClip.cpp"/>
        <childnode refid="57782" relation="include">
        </childnode>
        <childnode refid="57809" relation="include">
        </childnode>
        <childnode refid="57810" relation="include">
        </childnode>
        <childnode refid="57812" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57813" relation="include">
        </childnode>
        <childnode refid="57814" relation="include">
        </childnode>
        <childnode refid="57815" relation="include">
        </childnode>
        <childnode refid="57818" relation="include">
        </childnode>
        <childnode refid="57821" relation="include">
        </childnode>
        <childnode refid="57827" relation="include">
        </childnode>
        <childnode refid="57829" relation="include">
        </childnode>
        <childnode refid="57876" relation="include">
        </childnode>
        <childnode refid="57879" relation="include">
        </childnode>
        <childnode refid="57880" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57816" relation="include">
        </childnode>
      </node>
      <node id="57826">
        <label>Internat.h</label>
        <link refid="_internat_8h"/>
        <childnode refid="57788" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57805" relation="include">
        </childnode>
      </node>
      <node id="57797">
        <label>xml/XMLTagHandler.h</label>
        <link refid="_x_m_l_tag_handler_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57798" relation="include">
        </childnode>
        <childnode refid="57799" relation="include">
        </childnode>
      </node>
      <node id="57822">
        <label>stdlib.h</label>
      </node>
      <node id="57835">
        <label>TrackPanelListener.h</label>
        <link refid="_track_panel_listener_8h"/>
      </node>
      <node id="57817">
        <label>wx/wxchar.h</label>
      </node>
      <node id="57825">
        <label>wx/pen.h</label>
      </node>
      <node id="57873">
        <label>wx/frame.h</label>
      </node>
      <node id="57795">
        <label>ondemand/ODTaskThread.h</label>
        <link refid="_o_d_task_thread_8h"/>
        <childnode refid="57796" relation="include">
        </childnode>
        <childnode refid="57783" relation="include">
        </childnode>
      </node>
      <node id="57856">
        <label>audacity/ConfigInterface.h</label>
        <link refid="_config_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
      </node>
      <node id="57794">
        <label>wx/utils.h</label>
      </node>
      <node id="57791">
        <label>wx/evtloop.h</label>
      </node>
      <node id="57802">
        <label>Experimental.h</label>
        <link refid="_experimental_8h"/>
        <childnode refid="57785" relation="include">
        </childnode>
      </node>
      <node id="57847">
        <label>wx/timer.h</label>
      </node>
      <node id="57804">
        <label>wx/gdicmn.h</label>
      </node>
      <node id="57833">
        <label>ViewInfo.h</label>
        <link refid="_view_info_8h"/>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57834" relation="include">
        </childnode>
      </node>
      <node id="57868">
        <label>../Shuttle.h</label>
        <link refid="_shuttle_8h"/>
      </node>
      <node id="57820">
        <label>wx/fileconf.h</label>
      </node>
      <node id="57860">
        <label>map</label>
      </node>
      <node id="57878">
        <label>WaveTrackLocation.h</label>
        <link refid="_wave_track_location_8h"/>
      </node>
      <node id="57863">
        <label>audacity/PluginInterface.h</label>
        <link refid="_plugin_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
        <childnode refid="57856" relation="include">
        </childnode>
        <childnode refid="57854" relation="include">
        </childnode>
        <childnode refid="57855" relation="include">
        </childnode>
        <childnode refid="57861" relation="include">
        </childnode>
        <childnode refid="57862" relation="include">
        </childnode>
      </node>
      <node id="57803">
        <label>RealFFTf.h</label>
        <link refid="_real_f_f_tf_8h"/>
        <childnode refid="57802" relation="include">
        </childnode>
      </node>
      <node id="57870">
        <label>toolbars/SpectralSelectionBarListener.h</label>
        <link refid="_spectral_selection_bar_listener_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
      </node>
      <node id="57793">
        <label>wx/stattext.h</label>
      </node>
      <node id="57846">
        <label>wx/socket.h</label>
      </node>
      <node id="57872">
        <label>wx/generic/dragimgg.h</label>
      </node>
      <node id="57855">
        <label>audacity/IdentInterface.h</label>
        <link refid="_ident_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
      </node>
      <node id="57806">
        <label>wx/list.h</label>
      </node>
      <node id="57838">
        <label>wx/menu.h</label>
      </node>
      <node id="57785">
        <label>wx/defs.h</label>
      </node>
      <node id="57851">
        <label>wx/window.h</label>
      </node>
      <node id="57828">
        <label>wx/intl.h</label>
      </node>
      <node id="57789">
        <label>widgets/ProgressDialog.h</label>
        <link refid="_progress_dialog_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57790" relation="include">
        </childnode>
        <childnode refid="57791" relation="include">
        </childnode>
        <childnode refid="57792" relation="include">
        </childnode>
        <childnode refid="57793" relation="include">
        </childnode>
        <childnode refid="57794" relation="include">
        </childnode>
      </node>
      <node id="57866">
        <label>wx/bmpbuttn.h</label>
      </node>
      <node id="57786">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57788" relation="include">
        </childnode>
      </node>
      <node id="57859">
        <label>../PluginManager.h</label>
        <link refid="_plugin_manager_8h"/>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57820" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57860" relation="include">
        </childnode>
        <childnode refid="57854" relation="include">
        </childnode>
        <childnode refid="57861" relation="include">
        </childnode>
        <childnode refid="57862" relation="include">
        </childnode>
        <childnode refid="57863" relation="include">
        </childnode>
      </node>
      <node id="57790">
        <label>wx/dialog.h</label>
      </node>
      <node id="57831">
        <label>wx/filename.h</label>
      </node>
      <node id="57852">
        <label>effects/EffectManager.h</label>
        <link refid="_effect_manager_8h"/>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57849" relation="include">
        </childnode>
        <childnode refid="57790" relation="include">
        </childnode>
        <childnode refid="57843" relation="include">
        </childnode>
        <childnode refid="57853" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57854" relation="include">
        </childnode>
        <childnode refid="57859" relation="include">
        </childnode>
        <childnode refid="57864" relation="include">
        </childnode>
      </node>
      <node id="57814">
        <label>Sequence.h</label>
        <link refid="_sequence_8h"/>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57784" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
        <childnode refid="57799" relation="include">
        </childnode>
        <childnode refid="57795" relation="include">
        </childnode>
        <childnode refid="57786" relation="include">
        </childnode>
      </node>
      <node id="57857">
        <label>audacity/EffectAutomationParameters.h</label>
        <link refid="_effect_automation_parameters_8h"/>
        <childnode refid="57858" relation="include">
        </childnode>
        <childnode refid="57841" relation="include">
        </childnode>
        <childnode refid="57820" relation="include">
        </childnode>
        <childnode refid="57828" relation="include">
        </childnode>
      </node>
      <node id="57818">
        <label>Prefs.h</label>
        <link refid="_prefs_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57819" relation="include">
        </childnode>
        <childnode refid="57820" relation="include">
        </childnode>
      </node>
      <node id="57824">
        <label>wx/brush.h</label>
      </node>
      <node id="57837">
        <label>commands/CommandManager.h</label>
        <link refid="_command_manager_8h"/>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57810" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57838" relation="include">
        </childnode>
        <childnode refid="57832" relation="include">
        </childnode>
        <childnode refid="57839" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
        <childnode refid="57786" relation="include">
        </childnode>
      </node>
      <node id="57783">
        <label>Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="57850">
        <label>wx/grid.h</label>
      </node>
      <node id="57808">
        <label>vector</label>
      </node>
      <node id="57864">
        <label>Effect.h</label>
        <link refid="src_2effects_2_effect_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57810" relation="include">
        </childnode>
        <childnode refid="57865" relation="include">
        </childnode>
        <childnode refid="57866" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57828" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57867" relation="include">
        </childnode>
        <childnode refid="57856" relation="include">
        </childnode>
        <childnode refid="57854" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57834" relation="include">
        </childnode>
        <childnode refid="57868" relation="include">
        </childnode>
        <childnode refid="57826" relation="include">
        </childnode>
        <childnode refid="57789" relation="include">
        </childnode>
      </node>
      <node id="57800">
        <label>wx/dynarray.h</label>
      </node>
      <node id="57829">
        <label>Project.h</label>
        <link refid="_project_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57830" relation="include">
        </childnode>
        <childnode refid="57833" relation="include">
        </childnode>
        <childnode refid="57835" relation="include">
        </childnode>
        <childnode refid="57836" relation="include">
        </childnode>
        <childnode refid="57837" relation="include">
        </childnode>
        <childnode refid="57852" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
        <childnode refid="57869" relation="include">
        </childnode>
        <childnode refid="57870" relation="include">
        </childnode>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57843" relation="include">
        </childnode>
        <childnode refid="57813" relation="include">
        </childnode>
        <childnode refid="57871" relation="include">
        </childnode>
        <childnode refid="57872" relation="include">
        </childnode>
        <childnode refid="57873" relation="include">
        </childnode>
        <childnode refid="57828" relation="include">
        </childnode>
        <childnode refid="57874" relation="include">
        </childnode>
        <childnode refid="57875" relation="include">
        </childnode>
      </node>
      <node id="57880">
        <label>wx/listimpl.cpp</label>
      </node>
      <node id="57861">
        <label>audacity/ImporterInterface.h</label>
        <link refid="_importer_interface_8h"/>
        <childnode refid="57786" relation="include">
        </childnode>
        <childnode refid="57856" relation="include">
        </childnode>
        <childnode refid="57855" relation="include">
        </childnode>
      </node>
      <node id="57787">
        <label>wx/string.h</label>
      </node>
      <node id="57839">
        <label>../AudacityApp.h</label>
        <link refid="_audacity_app_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57840" relation="include">
        </childnode>
        <childnode refid="57841" relation="include">
        </childnode>
        <childnode refid="57842" relation="include">
        </childnode>
        <childnode refid="57843" relation="include">
        </childnode>
        <childnode refid="57844" relation="include">
        </childnode>
        <childnode refid="57828" relation="include">
        </childnode>
        <childnode refid="57845" relation="include">
        </childnode>
        <childnode refid="57813" relation="include">
        </childnode>
        <childnode refid="57846" relation="include">
        </childnode>
        <childnode refid="57847" relation="include">
        </childnode>
        <childnode refid="57848" relation="include">
        </childnode>
        <childnode refid="57795" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
      </node>
      <node id="57853">
        <label>wx/listbox.h</label>
      </node>
      <node id="57807">
        <label>wx/msgdlg.h</label>
      </node>
      <node id="57821">
        <label>Envelope.h</label>
        <link refid="src_2_envelope_8h"/>
        <childnode refid="57822" relation="include">
        </childnode>
        <childnode refid="57823" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57824" relation="include">
        </childnode>
        <childnode refid="57825" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
        <childnode refid="57826" relation="include">
        </childnode>
      </node>
      <node id="57813">
        <label>wx/log.h</label>
      </node>
      <node id="57809">
        <label>math.h</label>
      </node>
      <node id="57830">
        <label>DirManager.h</label>
        <link refid="_dir_manager_8h"/>
        <childnode refid="57806" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57831" relation="include">
        </childnode>
        <childnode refid="57832" relation="include">
        </childnode>
        <childnode refid="57794" relation="include">
        </childnode>
        <childnode refid="57786" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
      </node>
      <node id="57834">
        <label>SelectedRegion.h</label>
        <link refid="_selected_region_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57817" relation="include">
        </childnode>
        <childnode refid="57809" relation="include">
        </childnode>
      </node>
      <node id="57788">
        <label>wx/arrstr.h</label>
      </node>
      <node id="57819">
        <label>wx/config.h</label>
      </node>
      <node id="57845">
        <label>wx/snglinst.h</label>
      </node>
      <node id="57877">
        <label>Track.h</label>
        <link refid="src_2track_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57810" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57843" relation="include">
        </childnode>
        <childnode refid="57804" relation="include">
        </childnode>
        <childnode refid="57805" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57784" relation="include">
        </childnode>
        <childnode refid="57797" relation="include">
        </childnode>
      </node>
      <node id="57796">
        <label>wx/thread.h</label>
      </node>
      <node id="57871">
        <label>wx/dragimag.h</label>
      </node>
      <node id="57879">
        <label>prefs/SpectrogramSettings.h</label>
        <link refid="_spectrogram_settings_8h"/>
        <childnode refid="57802" relation="include">
        </childnode>
      </node>
      <node id="57867">
        <label>wx/tglbtn.h</label>
      </node>
      <node id="57810">
        <label>MemoryX.h</label>
        <link refid="_memory_x_8h"/>
        <childnode refid="57811" relation="include">
        </childnode>
      </node>
      <node id="57827">
        <label>Resample.h</label>
        <link refid="_resample_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57828" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57784" relation="include">
        </childnode>
      </node>
      <node id="57848">
        <label>widgets/FileHistory.h</label>
        <link refid="_file_history_8h"/>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57849" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57843" relation="include">
        </childnode>
        <childnode refid="57850" relation="include">
        </childnode>
        <childnode refid="57787" relation="include">
        </childnode>
        <childnode refid="57851" relation="include">
        </childnode>
      </node>
      <node id="57865">
        <label>set</label>
      </node>
      <node id="57875">
        <label>Menus.h</label>
        <link refid="_menus_8h"/>
        <childnode refid="57802" relation="include">
        </childnode>
      </node>
      <node id="57840">
        <label>wx/app.h</label>
        <link refid="app_8h"/>
      </node>
      <node id="57805">
        <label>wx/longlong.h</label>
      </node>
      <node id="57876">
        <label>WaveTrack.h</label>
        <link refid="_wave_track_8h"/>
        <childnode refid="57877" relation="include">
        </childnode>
        <childnode refid="57784" relation="include">
        </childnode>
        <childnode refid="57782" relation="include">
        </childnode>
        <childnode refid="57802" relation="include">
        </childnode>
        <childnode refid="57789" relation="include">
        </childnode>
        <childnode refid="57808" relation="include">
        </childnode>
        <childnode refid="57804" relation="include">
        </childnode>
        <childnode refid="57805" relation="include">
        </childnode>
        <childnode refid="57796" relation="include">
        </childnode>
        <childnode refid="57878" relation="include">
        </childnode>
      </node>
      <node id="57823">
        <label>algorithm</label>
      </node>
      <node id="57815">
        <label>Spectrum.h</label>
        <link refid="_spectrum_8h"/>
        <childnode refid="57816" relation="include">
        </childnode>
      </node>
      <node id="57798">
        <label>stdio.h</label>
      </node>
      <node id="57784">
        <label>SampleFormat.h</label>
        <link refid="_sample_format_8h"/>
        <childnode refid="57783" relation="include">
        </childnode>
        <childnode refid="57785" relation="include">
        </childnode>
        <childnode refid="57786" relation="include">
        </childnode>
      </node>
      <node id="57858">
        <label>locale.h</label>
      </node>
      <node id="57844">
        <label>wx/docview.h</label>
      </node>
      <node id="57811">
        <label>memory</label>
      </node>
      <node id="57799">
        <label>XMLWriter.h</label>
        <link refid="_x_m_l_writer_8h"/>
        <childnode refid="57788" relation="include">
        </childnode>
        <childnode refid="57800" relation="include">
        </childnode>
        <childnode refid="57801" relation="include">
        </childnode>
      </node>
      <node id="57836">
        <label>AudioIOListener.h</label>
        <link refid="_audio_i_o_listener_8h"/>
        <childnode refid="57787" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_wave_cache" prot="public">WaveCache</innerclass>
    <innerclass refid="class_wave_cache_1_1_invalid_region" prot="public">WaveCache::InvalidRegion</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="_wave_clip_8cpp_1a81a4d843602cd717b58aa33bc8205f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>WX_DEFINE_LIST</definition>
        <argsstring>(WaveClipList)</argsstring>
        <name>WX_DEFINE_LIST</name>
        <param>
          <type>WaveClipList</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/WaveClip.cpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_wave_clip_8cpp_1afe18dc26a11360ca606cf47523e67788" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void ComputeSpectrumUsingRealFFTf</definition>
        <argsstring>(float *buffer, HFFT hFFT, const float *window, int len, float *out)</argsstring>
        <name>ComputeSpectrumUsingRealFFTf</name>
        <param>
          <type>float *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="_real_f_f_tf_8h_1a36274043c96b3f4507e3eaa7eaff1ce9" kindref="member">HFFT</ref></type>
          <declname>hFFT</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>window</declname>
        </param>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>len</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/WaveClip.cpp" line="264" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/WaveClip.cpp" bodystart="265" bodyend="290"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>WaveClip.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>??<sp/>Dominic<sp/>Mazzoni</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>??<sp/>Markus<sp/>Meyer</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">*******************************************************************/</highlight><highlight class="comment">/****************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wave_clip_8h" kindref="compound">WaveClip.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_memory_x_8h" kindref="compound">MemoryX.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_sequence_8h" kindref="compound">Sequence.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_spectrum_8h" kindref="compound">Spectrum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_prefs_8h" kindref="compound">Prefs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="src_2_envelope_8h" kindref="compound">Envelope.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_resample_8h" kindref="compound">Resample.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_project_8h" kindref="compound">Project.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wave_track_8h" kindref="compound">WaveTrack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_spectrogram_settings_8h" kindref="compound">prefs/SpectrogramSettings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/listimpl.cpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_experimental_8h" kindref="compound">Experimental.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="_wave_clip_8cpp_1a81a4d843602cd717b58aa33bc8205f83" kindref="member">WX_DEFINE_LIST</ref>(WaveClipList);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="class_wave_cache" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_wave_cache" kindref="compound">WaveCache</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48" refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>()</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_wave_cache_1abee5a8da780defb99cfab2cb9608b618" kindref="member">dirty</ref>(-1)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>(-1)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a1dd0d05d0ee3d2f5da2a22c5effcff84" kindref="member">start</ref>(-1)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" kindref="member">pps</ref>(0)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>(-1)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>(0)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>(0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>(0)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>(0)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" kindref="member">bl</ref>(0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1adaf6da5f57fd744a22bc753e4f7a4d73" kindref="member">numODPixels</ref>(0)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="class_wave_cache_1a05c70a2533ce17e68409d8d9e8f90680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_wave_cache_1a05c70a2533ce17e68409d8d9e8f90680" kindref="member">WaveCache</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirty_)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="class_wave_cache_1abee5a8da780defb99cfab2cb9608b618" kindref="member">dirty</ref>(dirty_)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>(len_)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a1dd0d05d0ee3d2f5da2a22c5effcff84" kindref="member">start</ref>(t0)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" kindref="member">pps</ref>(pixelsPerSecond)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>(rate_)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>(1<sp/>+<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>(<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>(<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>(<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" kindref="member">bl</ref>(<ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><ref refid="class_wave_cache_1adaf6da5f57fd744a22bc753e4f7a4d73" kindref="member">numODPixels</ref>(0)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>the<sp/>number<sp/>of<sp/>OD<sp/>pixels<sp/>-<sp/>the<sp/>only<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>by<sp/>recounting<sp/>since<sp/>we&apos;ve<sp/>lost<sp/>some<sp/>old<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1adaf6da5f57fd744a22bc753e4f7a4d73" kindref="member">numODPixels</ref><sp/>=<sp/><ref refid="class_wave_cache_1a5b4c25e83010cc594710f7da115d0406" kindref="member">CountODPixels</ref>(0,<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_wave_cache_1a15bfa204fd1eb87f35a135f5213d4470" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_wave_cache_1a15bfa204fd1eb87f35a135f5213d4470" kindref="member">~WaveCache</ref>()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1a0590a24a1d9e626f4ce499f4e8f5dfa2" kindref="member">ClearInvalidRegions</ref>();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="class_wave_cache_1abee5a8da780defb99cfab2cb9608b618" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1abee5a8da780defb99cfab2cb9608b618" kindref="member">dirty</ref>;</highlight></codeline>
<codeline lineno="87" refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;<sp/></highlight><highlight class="comment">//<sp/>counts<sp/>pixels,<sp/>not<sp/>samples</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="class_wave_cache_1a1dd0d05d0ee3d2f5da2a22c5effcff84" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a1dd0d05d0ee3d2f5da2a22c5effcff84" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="89" refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" kindref="member">pps</ref>;</highlight></codeline>
<codeline lineno="90" refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="91" refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;sampleCount&gt;<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>;</highlight></codeline>
<codeline lineno="92" refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="93" refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="94" refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>;</highlight></codeline>
<codeline lineno="95" refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/><ref refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" kindref="member">bl</ref>;</highlight></codeline>
<codeline lineno="96" refid="class_wave_cache_1adaf6da5f57fd744a22bc753e4f7a4d73" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1adaf6da5f57fd744a22bc753e4f7a4d73" kindref="member">numODPixels</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="class_wave_cache_1_1_invalid_region" refkind="compound"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_wave_cache_1_1_invalid_region" kindref="compound">InvalidRegion</ref></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101" refid="class_wave_cache_1_1_invalid_region_1a3ba710f3c6ad801c82f62cbdc7ed2e53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a3ba710f3c6ad801c82f62cbdc7ed2e53" kindref="member">InvalidRegion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>):start(s),<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>(e){}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//start<sp/>and<sp/>end<sp/>pixel<sp/>count.<sp/><sp/>(not<sp/>samples)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="104" refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//Thread<sp/>safe<sp/>call<sp/>to<sp/>add<sp/>a<sp/>NEW<sp/>region<sp/>to<sp/>invalidate.<sp/><sp/>If<sp/>it<sp/>overlaps<sp/>with<sp/>other<sp/>regions,<sp/>it<sp/>unions<sp/>the<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="class_wave_cache_1a2b2bdd8928cf67f0465ed30f65165dc8" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a2b2bdd8928cf67f0465ed30f65165dc8" kindref="member">AddInvalidRegion</ref>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>sampleStart,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>sampleEnd)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//use<sp/>pps<sp/>to<sp/>figure<sp/>out<sp/>where<sp/>we<sp/>are.<sp/><sp/>(pixels<sp/>per<sp/>second)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pps<sp/>==0)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel<sp/>=<sp/>rate/<ref refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" kindref="member">pps</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//rate<sp/>is<sp/>SR,<sp/>start<sp/>is<sp/>first<sp/>time<sp/>of<sp/>the<sp/>waveform<sp/>(in<sp/>second)<sp/>on<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>invalStart<sp/>=<sp/>(sampleStart<sp/>-<sp/>start*<ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>)/samplesPerPixel<sp/>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>invalEnd<sp/>=<sp/>(sampleEnd<sp/>-<sp/>start*<ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>)/samplesPerPixel<sp/>+1;<sp/></highlight><highlight class="comment">//we<sp/>should<sp/>cover<sp/>the<sp/>end..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>they<sp/>are<sp/>both<sp/>off<sp/>the<sp/>cache<sp/>boundary<sp/>in<sp/>the<sp/>same<sp/>direction,<sp/>the<sp/>cache<sp/>is<sp/>missed,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//so<sp/>we<sp/>are<sp/>safe,<sp/>and<sp/>don&apos;t<sp/>need<sp/>to<sp/>track<sp/>this<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((invalStart&lt;0<sp/>&amp;&amp;<sp/>invalEnd<sp/>&lt;0)<sp/>||<sp/>(invalStart&gt;=len<sp/>&amp;&amp;<sp/>invalEnd<sp/>&gt;=<sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>))</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//in<sp/>all<sp/>other<sp/>cases,<sp/>we<sp/>need<sp/>to<sp/>clip<sp/>the<sp/>boundries<sp/>so<sp/>they<sp/>make<sp/>sense<sp/>with<sp/>the<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for<sp/>some<sp/>reason,<sp/>the<sp/>cache<sp/>is<sp/>set<sp/>up<sp/>to<sp/>access<sp/>up<sp/>to<sp/>array[len],<sp/>not<sp/>array[len-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(invalStart<sp/>&lt;0)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalStart<sp/>=0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(invalStart<sp/>&gt;<sp/>len)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalStart<sp/>=<sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(invalEnd<sp/>&lt;0)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalEnd<sp/>=0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(invalEnd<sp/>&gt;<sp/>len)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalEnd<sp/>=<sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_locker" kindref="compound">ODLocker</ref><sp/>locker(<ref refid="class_wave_cache_1a04122f63b832b6c168df740974eb50fe" kindref="member">mRegionsMutex</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//look<sp/>thru<sp/>the<sp/>region<sp/>array<sp/>for<sp/>a<sp/>place<sp/>to<sp/>insert.<sp/><sp/>We<sp/>could<sp/>make<sp/>this<sp/>more<sp/>spiffy<sp/>than<sp/>a<sp/>linear<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//but<sp/>right<sp/>now<sp/>it<sp/>is<sp/>not<sp/>needed<sp/>since<sp/>there<sp/>will<sp/>usually<sp/>only<sp/>be<sp/>one<sp/>region<sp/>(which<sp/>grows)<sp/>for<sp/>OD<sp/>loading.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>added=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.size())</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=0;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>regions<sp/>intersect<sp/>OR<sp/>are<sp/>pixel<sp/>adjacent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1_1_invalid_region" kindref="compound">InvalidRegion</ref><sp/>&amp;region<sp/>=<sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>&lt;=<sp/>invalEnd+1</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>&gt;=<sp/>invalStart-1)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>the<sp/>union<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>&gt;<sp/>invalStart)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>=<sp/>invalStart;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>&lt;<sp/>invalEnd)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>=<sp/>invalEnd;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this<sp/>bit<sp/>doesn&apos;t<sp/>make<sp/>sense<sp/>because<sp/>it<sp/>assumes<sp/>we<sp/>add<sp/>in<sp/>order<sp/>-<sp/>now<sp/>we<sp/>go<sp/>backwards<sp/>after<sp/>the<sp/>initial<sp/>OD<sp/>finishes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//this<sp/>array<sp/>is<sp/>sorted<sp/>by<sp/>start/end<sp/>points<sp/>and<sp/>has<sp/>no<sp/>overlaps.<sp/><sp/><sp/>If<sp/>we&apos;ve<sp/>passed<sp/>all<sp/>possible<sp/>intersections,<sp/>insert.<sp/><sp/>The<sp/>array<sp/>will<sp/>remain<sp/>sorted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(region.end<sp/>&lt;<sp/>invalStart)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InvalidRegion*<sp/>newRegion<sp/>=<sp/>new<sp/>InvalidRegion(invalStart,invalEnd);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mRegions.insert(mRegions.begin()+i,newRegion);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!added)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1_1_invalid_region" kindref="compound">InvalidRegion</ref><sp/>newRegion(invalStart,invalEnd);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.insert(<ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.begin(),newRegion);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//now<sp/>we<sp/>must<sp/>go<sp/>and<sp/>patch<sp/>up<sp/>all<sp/>the<sp/>regions<sp/>that<sp/>overlap.<sp/><sp/>Overlapping<sp/>regions<sp/>will<sp/>be<sp/>adjacent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>=1;<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>&lt;<ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.size();<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>regions<sp/>intersect<sp/>OR<sp/>are<sp/>pixel<sp/>adjacent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1_1_invalid_region" kindref="compound">InvalidRegion</ref><sp/>&amp;region<sp/>=<sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1_1_invalid_region" kindref="compound">InvalidRegion</ref><sp/>&amp;prevRegion<sp/>=<sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>&lt;=<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>+1</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>&gt;=<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>-1)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//take<sp/>the<sp/>union<sp/>region</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>&gt;<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>=<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>&lt;<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>region.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref><sp/>=<sp/>prevRegion.<ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.erase(<ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.begin()+<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>-1);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//musn&apos;t<sp/>forget<sp/>to<sp/>reset<sp/>cursor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>--;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>we<sp/>are<sp/>past<sp/>the<sp/>end<sp/>of<sp/>the<sp/>region<sp/>we<sp/>added,<sp/>we<sp/>are<sp/>past<sp/>the<sp/>area<sp/>of<sp/>regions<sp/>that<sp/>might<sp/>be<sp/>oversecting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(region.<ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref><sp/>&gt;<sp/>invalEnd)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//lock<sp/>before<sp/>calling<sp/>these<sp/>in<sp/>a<sp/>section.<sp/><sp/>unlock<sp/>after<sp/>finished.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="class_wave_cache_1a22695be150b4ea724ef03b963a9564a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a22695be150b4ea724ef03b963a9564a4" kindref="member">GetNumInvalidRegions</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.size();}</highlight></codeline>
<codeline lineno="209" refid="class_wave_cache_1a56afddc16b7aee5251933c1ded20fe4a" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a56afddc16b7aee5251933c1ded20fe4a" kindref="member">GetInvalidRegionStart</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].start;}</highlight></codeline>
<codeline lineno="210" refid="class_wave_cache_1a0aee9d581a904beee94706d3ab09c2f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a0aee9d581a904beee94706d3ab09c2f6" kindref="member">GetInvalidRegionEnd</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>].end;}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="class_wave_cache_1a0590a24a1d9e626f4ce499f4e8f5dfa2" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a0590a24a1d9e626f4ce499f4e8f5dfa2" kindref="member">ClearInvalidRegions</ref>()</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>.clear();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="class_wave_cache_1ad38bea598de6136c9eeba97b95370130" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1ad38bea598de6136c9eeba97b95370130" kindref="member">LoadInvalidRegion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii,<sp/><ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>*<ref refid="seq_8c_1aa85df2bb76931a50df646c42ac67b112" kindref="member">sequence</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateODCount)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invStart<sp/>=<sp/><ref refid="class_wave_cache_1a56afddc16b7aee5251933c1ded20fe4a" kindref="member">GetInvalidRegionStart</ref>(ii);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>invEnd<sp/>=<sp/><ref refid="class_wave_cache_1a0aee9d581a904beee94706d3ab09c2f6" kindref="member">GetInvalidRegionEnd</ref>(ii);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//before<sp/>check<sp/>number<sp/>of<sp/>ODPixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regionODPixels<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateODCount)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>regionODPixels<sp/>=<sp/><ref refid="class_wave_cache_1a5b4c25e83010cc594710f7da115d0406" kindref="member">CountODPixels</ref>(invStart,<sp/>invEnd);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sequence-&gt;<ref refid="class_sequence_1af1b05e45add8f1fd6a43e4ed562fb625" kindref="member">GetWaveDisplay</ref>(&amp;min[invStart],</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;max[invStart],</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rms[invStart],</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bl[invStart],</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invEnd<sp/>-<sp/>invStart,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;where[invStart]);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//after<sp/>check<sp/>number<sp/>of<sp/>ODPixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(updateODCount)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>regionODPixelsAfter<sp/>=<sp/><ref refid="class_wave_cache_1a5b4c25e83010cc594710f7da115d0406" kindref="member">CountODPixels</ref>(invStart,<sp/>invEnd);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numODPixels<sp/>-=<sp/>(regionODPixels<sp/>-<sp/>regionODPixelsAfter);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="class_wave_cache_1a89f42ad868db2ec9d4d399d20c651309" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a89f42ad868db2ec9d4d399d20c651309" kindref="member">LoadInvalidRegions</ref>(<ref refid="class_sequence" kindref="compound">Sequence</ref><sp/>*<ref refid="seq_8c_1aa85df2bb76931a50df646c42ac67b112" kindref="member">sequence</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>updateODCount)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//invalid<sp/>regions<sp/>are<sp/>kept<sp/>in<sp/>a<sp/>sorted<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref><sp/>&lt;<sp/><ref refid="class_wave_cache_1a22695be150b4ea724ef03b963a9564a4" kindref="member">GetNumInvalidRegions</ref>();<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1ad38bea598de6136c9eeba97b95370130" kindref="member">LoadInvalidRegion</ref>(<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>,<sp/>sequence,<sp/>updateODCount);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="class_wave_cache_1a5b4c25e83010cc594710f7da115d0406" refkind="member"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1a5b4c25e83010cc594710f7da115d0406" kindref="member">CountODPixels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1_1_invalid_region_1ab22e9d12b5319685c6de8adaae80145d" kindref="member">end</ref>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*begin<sp/>=<sp/>&amp;bl[0];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count_if(begin<sp/>+<sp/>start,<sp/>begin<sp/>+<sp/>end,<sp/>bind2nd(less&lt;int&gt;(),<sp/>0));</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="257" refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;InvalidRegion&gt;<sp/><ref refid="class_wave_cache_1add462bc5326fd11c2bfd9caf53ab70e1" kindref="member">mRegions</ref>;</highlight></codeline>
<codeline lineno="258" refid="class_wave_cache_1a04122f63b832b6c168df740974eb50fe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_lock" kindref="compound">ODLock</ref><sp/><ref refid="class_wave_cache_1a04122f63b832b6c168df740974eb50fe" kindref="member">mRegionsMutex</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal">};</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="src_2fft_8h" kindref="compound">FFT.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeSpectrumUsingRealFFTf</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="lilv__test_8c_1af5a45dbcaa926b186e6f71d08212acc3" kindref="member">out</ref>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(len<sp/>&gt;<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;<ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]<sp/>*=<sp/>window[i];</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;<sp/>i&lt;(hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>*2);<sp/>i++)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer[i]=0;<sp/></highlight><highlight class="comment">//<sp/>zero<sp/>pad<sp/>as<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" kindref="member">RealFFTf</ref>(buffer,<sp/>hFFT);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>(real-only)<sp/>DC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>power<sp/>=<sp/>buffer[0]*buffer[0];</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(power<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>-160.0;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out[0]<sp/>=<sp/>10.0*log10(power);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=1;i&lt;hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;i++)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>re<sp/>=<sp/>buffer[index],<sp/>im<sp/>=<sp/>buffer[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>=<sp/>re<sp/>*<sp/>re<sp/>+<sp/>im<sp/>*<sp/>im;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(power<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>-160.0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>10.0*log10f(power);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="class_wave_clip_1a137e31f5028b7a419e893c05d12230df" refkind="member"><highlight class="normal">WaveClip::WaveClip(<ref refid="class_dir_manager" kindref="compound">DirManager</ref><sp/>*projDirManager,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/>mOffset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>mRate<sp/>=<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/>mSequence<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref>(projDirManager,<sp/>format);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/>mEnvelope<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_envelope" kindref="compound">Envelope</ref>();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/>mWaveCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/>mSpecCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache" kindref="compound">SpecCache</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/>mSpecPxCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_px_cache" kindref="compound">SpecPxCache</ref>(1);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/>mAppendBufferLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>mDirty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/>mIsPlaceholder<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307" refid="class_wave_clip_1a0974e16a17bd01f8b4a842a987bf12b9" refkind="member"><highlight class="normal">WaveClip::WaveClip(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>&amp;<sp/>orig,<sp/><ref refid="class_dir_manager" kindref="compound">DirManager</ref><sp/>*projDirManager)</highlight></codeline>
<codeline lineno="308"><highlight class="normal">{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>essentially<sp/>a<sp/>copy<sp/>constructor<sp/>-<sp/>but<sp/>you<sp/>must<sp/>pass<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>project&apos;s<sp/>DirManager,<sp/>because<sp/>we<sp/>might<sp/>be<sp/>copying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>one<sp/>project<sp/>to<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/>mOffset<sp/>=<sp/>orig.<ref refid="class_wave_clip_1ab050845a8220c996af5e8b298e8b2b68" kindref="member">mOffset</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/>mRate<sp/>=<sp/>orig.<ref refid="class_wave_clip_1a4862030d149b9990fb10891c79953f9e" kindref="member">mRate</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/>mSequence<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref>(*orig.<ref refid="class_wave_clip_1a1aab29e1271276ad00a3db2222da37db" kindref="member">mSequence</ref>,<sp/>projDirManager);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/>mEnvelope<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_envelope" kindref="compound">Envelope</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;Paste(0.0,<sp/>orig.<ref refid="class_wave_clip_1a3633c7bbd9fc7f3a9f7cc538b4904e1e" kindref="member">mEnvelope</ref>);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;SetOffset(orig.<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>());</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;SetTrackLen(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)orig.<ref refid="class_wave_clip_1a1aab29e1271276ad00a3db2222da37db" kindref="member">mSequence</ref>-&gt;<ref refid="class_sequence_1a6187391eb53aa896f5dda602c87d0e7f" kindref="member">GetNumSamples</ref>())<sp/>/<sp/>orig.<ref refid="class_wave_clip_1a4862030d149b9990fb10891c79953f9e" kindref="member">mRate</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/>mWaveCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>();</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/>mSpecCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache" kindref="compound">SpecCache</ref>();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/>mSpecPxCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_px_cache" kindref="compound">SpecPxCache</ref>(1);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=orig.<ref refid="class_wave_clip_1ae7ad94a38d669ca1a9ce06344a89c8e8" kindref="member">mCutLines</ref>.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.Append(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>(*<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData(),<sp/>projDirManager));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>mAppendBufferLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>mDirty<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/>mIsPlaceholder<sp/>=<sp/>orig.<ref refid="class_wave_clip_1a81b17cb663222f323f01f3bcbf3a22c5" kindref="member">GetIsPlaceholder</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="class_wave_clip_1a787f4991485865ac2eae852e14bb510d" refkind="member"><highlight class="normal"><ref refid="class_wave_clip_1a787f4991485865ac2eae852e14bb510d" kindref="member">WaveClip::~WaveClip</ref>()</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mSequence;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mEnvelope;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/>mEnvelope<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mWaveCache;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mSpecCache;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mSpecPxCache;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/>mCutLines.DeleteContents(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/>mCutLines.Clear();</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="class_wave_clip_1ac0c4ce7ebbc00afa175813f60bd97019" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ac0c4ce7ebbc00afa175813f60bd97019" kindref="member">WaveClip::SetOffset</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>mOffset<sp/>=<sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>mEnvelope-&gt;SetOffset(mOffset);</highlight></codeline>
<codeline lineno="351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="class_wave_clip_1a7909b8a8e1bac5eea9e4bc422b021a59" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a7909b8a8e1bac5eea9e4bc422b021a59" kindref="member">WaveClip::GetSamples</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="355"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSequence-&gt;Get(buffer,<sp/>format,<sp/>start,<sp/>len);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="class_wave_clip_1af2e12bace67d5da881127ab43568dfa2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1af2e12bace67d5da881127ab43568dfa2" kindref="member">WaveClip::SetSamples</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bResult<sp/>=<sp/>mSequence-&gt;Set(buffer,<sp/>format,<sp/>start,<sp/>len);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bResult;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="class_wave_clip_1a229b276264c7a7c1a9684cdbe6a7234c" refkind="member"><highlight class="normal"><ref refid="class_block_array" kindref="compound">BlockArray</ref>*<sp/><ref refid="class_wave_clip_1a229b276264c7a7c1a9684cdbe6a7234c" kindref="member">WaveClip::GetSequenceBlockArray</ref>()</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mSequence-&gt;GetBlockArray();</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="class_wave_clip_1a839a293df9246f7a9bb6fcf4d8be7b40" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a839a293df9246f7a9bb6fcf4d8be7b40" kindref="member">WaveClip::GetStartTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="373"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JS:<sp/>mOffset<sp/>is<sp/>the<sp/>minimum<sp/>value<sp/>and<sp/>it<sp/>is<sp/>returned;<sp/>no<sp/>clipping<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mOffset;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="class_wave_clip_1a7c878143bdd7641be183325944d02f39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a7c878143bdd7641be183325944d02f39" kindref="member">WaveClip::GetEndTime</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="379"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples<sp/>=<sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxLen<sp/>=<sp/>mOffset<sp/>+<sp/>double(numSamples+mAppendBufferLen)/mRate;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JS:<sp/>calculated<sp/>value<sp/>is<sp/>not<sp/>the<sp/>length;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>a<sp/>maximum<sp/>value<sp/>and<sp/>can<sp/>be<sp/>negative;<sp/>no<sp/>clipping<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>maxLen;</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="class_wave_clip_1a8c8c86f52d4722b09e9e0f562a4585e3" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_clip_1a8c8c86f52d4722b09e9e0f562a4585e3" kindref="member">WaveClip::GetStartSample</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="390"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(mOffset<sp/>*<sp/>mRate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="class_wave_clip_1ad629593dec3ed120a412c92d64500c11" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_clip_1ad629593dec3ed120a412c92d64500c11" kindref="member">WaveClip::GetEndSample</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="395"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetStartSample()<sp/>+<sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="class_wave_clip_1a6cd003778b510cad742feaa5763c6ac2" refkind="member"><highlight class="normal"><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_clip_1a6cd003778b510cad742feaa5763c6ac2" kindref="member">WaveClip::GetNumSamples</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="400"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404" refid="class_wave_clip_1a1077591aea50132fb96b1345527b4110" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a1077591aea50132fb96b1345527b4110" kindref="member">WaveClip::WithinClip</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="405"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>ts<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(t<sp/>*<sp/>mRate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts<sp/>&gt;<sp/>GetStartSample()<sp/>&amp;&amp;<sp/>ts<sp/>&lt;<sp/>GetEndSample()<sp/>+<sp/>mAppendBufferLen;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="class_wave_clip_1a52706d68f2addb697e9a4fb4d3c14220" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a52706d68f2addb697e9a4fb4d3c14220" kindref="member">WaveClip::BeforeClip</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="411"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>ts<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(t<sp/>*<sp/>mRate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts<sp/>&lt;=<sp/>GetStartSample();</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="class_wave_clip_1a75a19f4c77475b0926936fd1932f5911" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a75a19f4c77475b0926936fd1932f5911" kindref="member">WaveClip::AfterClip</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="417"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>ts<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(t<sp/>*<sp/>mRate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ts<sp/>&gt;=<sp/>GetEndSample()<sp/>+<sp/>mAppendBufferLen;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="class_wave_clip_1a736ff78f1a664cc76df09872abd6aa7a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a736ff78f1a664cc76df09872abd6aa7a" kindref="member">WaveClip::DeleteWaveCache</ref>()</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_locker" kindref="compound">ODLocker</ref><sp/>locker(mWaveCacheMutex);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mWaveCache!=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mWaveCache;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>mWaveCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>();</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="class_wave_clip_1a638446857c18eac512aaae65d0fc85d3" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a638446857c18eac512aaae65d0fc85d3" kindref="member">WaveClip::AddInvalidRegion</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startSample,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>endSample)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_o_d_locker" kindref="compound">ODLocker</ref><sp/>locker(mWaveCacheMutex);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mWaveCache!=<ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;AddInvalidRegion(startSample,endSample);</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>findCorrection(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;sampleCount&gt;<sp/>&amp;oldWhere,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldLen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newLen,</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel,</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;oldX0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;correction)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mitigate<sp/>the<sp/>accumulation<sp/>of<sp/>location<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>copies<sp/>of<sp/>copies<sp/>of<sp/>...<sp/>of<sp/>caches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>at<sp/>the<sp/>loop<sp/>that<sp/>populates<sp/>&quot;where&quot;<sp/>below<sp/>to<sp/>understand<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>sample<sp/>position<sp/>that<sp/>is<sp/>the<sp/>origin<sp/>in<sp/>the<sp/>old<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oldWhere0<sp/>=<sp/>oldWhere[1]<sp/>-<sp/>samplesPerPixel;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>oldWhereLast<sp/>=<sp/>oldWhere0<sp/>+<sp/>oldLen<sp/>*<sp/>samplesPerPixel;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>length<sp/>in<sp/>samples<sp/>of<sp/>the<sp/>old<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>denom<sp/>=<sp/>oldWhereLast<sp/>-<sp/>oldWhere0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>sample<sp/>would<sp/>go<sp/>in<sp/>where[0]<sp/>with<sp/>no<sp/>correction?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>guessWhere0<sp/>=<sp/>t0<sp/>*<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>if<sp/>old<sp/>and<sp/>NEW<sp/>are<sp/>disjoint:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldWhereLast<sp/>&lt;=<sp/>guessWhere0<sp/>||</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>guessWhere0<sp/>+<sp/>newLen<sp/>*<sp/>samplesPerPixel<sp/>&lt;=<sp/>oldWhere0<sp/>||</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>unless<sp/>denom<sp/>rounds<sp/>off<sp/>to<sp/>at<sp/>least<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>denom<sp/>&lt;<sp/>0.5)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>computation<sp/>of<sp/>oldX0<sp/>in<sp/>the<sp/>other<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>underflow<sp/>and<sp/>the<sp/>assertion<sp/>would<sp/>be<sp/>violated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldX0<sp/>=<sp/><sp/>oldLen;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>integer<sp/>position<sp/>in<sp/>the<sp/>old<sp/>cache<sp/>array<sp/>does<sp/>that<sp/>map<sp/>to?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(even<sp/>if<sp/>it<sp/>is<sp/>out<sp/>of<sp/>bounds)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldX0<sp/>=<sp/>floor(0.5<sp/>+<sp/>oldLen<sp/>*<sp/>(guessWhere0<sp/>-<sp/>oldWhere0)<sp/>/<sp/>denom);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>sample<sp/>count<sp/>would<sp/>the<sp/>old<sp/>cache<sp/>have<sp/>put<sp/>there?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>where0<sp/>=<sp/>oldWhere0<sp/>+<sp/>double(oldX0)<sp/>*<sp/>samplesPerPixel;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>What<sp/>correction<sp/>is<sp/>needed<sp/>to<sp/>align<sp/>the<sp/>NEW<sp/>cache<sp/>with<sp/>the<sp/>old?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correction0<sp/>=<sp/>where0<sp/>-<sp/>guessWhere0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>correction<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(-samplesPerPixel,<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(samplesPerPixel,<sp/>correction0));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(correction<sp/>==<sp/>correction0);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal">fillWhere(std::vector&lt;sampleCount&gt;<sp/>&amp;<ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bias,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correction,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel)</highlight></codeline>
<codeline lineno="487"><highlight class="normal">{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Be<sp/>careful<sp/>to<sp/>make<sp/>the<sp/>first<sp/>value<sp/>non-negative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>w0<sp/>=<sp/>0.5<sp/>+<sp/>correction<sp/>+<sp/>bias<sp/>+<sp/>t0<sp/>*<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/>where[0]<sp/>=<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>(<ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(0.0,<sp/>floor(w0)));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>=<sp/>1;<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>&lt;<sp/>len<sp/>+<sp/>1;<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>++)</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>where[<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>]<sp/>=<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>(</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floor(w0<sp/>+<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(<ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>)<sp/>*<sp/>samplesPerPixel)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Getting<sp/>high-level<sp/>data<sp/>from<sp/>the<sp/>track<sp/>for<sp/>screen<sp/>display<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clipping<sp/>calculations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="class_wave_clip_1ac28044d7d312e53024f7b4fbe38e711f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ac28044d7d312e53024f7b4fbe38e711f" kindref="member">WaveClip::GetWaveDisplay</ref>(<ref refid="class_wave_display" kindref="compound">WaveDisplay</ref><sp/>&amp;display,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;isLoadingOD)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="506"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allocated<sp/>=<sp/>(display.<ref refid="class_wave_display_1a7e072e884092ea939899822b0d92b8be" kindref="member">where</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPixels<sp/>=<sp/>display.<ref refid="class_wave_display_1aab0a13074ebb8ed5ba1da2bceaddd407" kindref="member">width</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p0<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>least<sp/>column<sp/>requiring<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref><sp/>=<sp/>numPixels;<sp/></highlight><highlight class="comment">//<sp/>greatest<sp/>column<sp/>requiring<sp/>computation,<sp/>plus<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" kindref="member">bl</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;sampleCount&gt;<sp/>*pWhere;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allocated)<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>ownWhere<sp/>is<sp/>filled.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>&amp;display.<ref refid="class_wave_display_1a9ff4ca6d4c9be28c6f3cb3f806c41913" kindref="member">min</ref>[0];</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>&amp;display.<ref refid="class_wave_display_1ab2a1f71c47f052041fbcbdac889be828" kindref="member">max</ref>[0];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rms<sp/>=<sp/>&amp;display.<ref refid="class_wave_display_1a75d667998a5aa1ec03d1ec86b80f1392" kindref="member">rms</ref>[0];</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>&amp;display.<ref refid="class_wave_display_1a607b91b920b3688ea7eeb01bf302debf" kindref="member">bl</ref>[0];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pWhere<sp/>=<sp/>&amp;display.<ref refid="class_wave_display_1a931b7226e23c982bde54ddbdec6b38ec" kindref="member">ownWhere</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Lock<sp/>the<sp/>list<sp/>of<sp/>invalid<sp/>regions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_d_locker" kindref="compound">ODLocker</ref><sp/>locker(mWaveCacheMutex);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tstep<sp/>=<sp/>1.0<sp/>/<sp/>pixelsPerSecond;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel<sp/>=<sp/>mRate<sp/>*<sp/>tstep;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>tolerant<sp/>comparison<sp/>of<sp/>the<sp/>pps<sp/>values<sp/>in<sp/>this<sp/>wise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulated<sp/>difference<sp/>of<sp/>times<sp/>over<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>is<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>sample<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ppsMatch<sp/>=<sp/>mWaveCache<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(tstep<sp/>-<sp/>1.0<sp/>/<sp/>mWaveCache-&gt;pps)<sp/>*<sp/>numPixels<sp/>&lt;<sp/>(1.0<sp/>/<sp/>mRate));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="xlcont_8c_1a4b0bf8f7ff5bcb92221f867b9c5d742d" kindref="member">match</ref><sp/>=</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppsMatch<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;len<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;dirty<sp/>==<sp/>mDirty;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;start<sp/>==<sp/>t0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;len<sp/>&gt;=<sp/>numPixels)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;LoadInvalidRegions(mSequence,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache-&gt;ClearInvalidRegions();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Satisfy<sp/>the<sp/>request<sp/>completely<sp/>from<sp/>the<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a9ff4ca6d4c9be28c6f3cb3f806c41913" kindref="member">min</ref><sp/>=<sp/>&amp;mWaveCache-&gt;min[0];</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1ab2a1f71c47f052041fbcbdac889be828" kindref="member">max</ref><sp/>=<sp/>&amp;mWaveCache-&gt;max[0];</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a75d667998a5aa1ec03d1ec86b80f1392" kindref="member">rms</ref><sp/>=<sp/>&amp;mWaveCache-&gt;rms[0];</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a607b91b920b3688ea7eeb01bf302debf" kindref="member">bl</ref><sp/>=<sp/>&amp;mWaveCache-&gt;bl[0];</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a7e072e884092ea939899822b0d92b8be" kindref="member">where</ref><sp/>=<sp/>&amp;mWaveCache-&gt;where[0];</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isLoadingOD<sp/>=<sp/>mWaveCache-&gt;numODPixels<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;WaveCache&gt;<sp/>oldCache(mWaveCache);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldX0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correction<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copyBegin<sp/>=<sp/>0,<sp/>copyEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>findCorrection(oldCache-&gt;where,<sp/>oldCache-&gt;len,<sp/>numPixels,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0,<sp/>mRate,<sp/>samplesPerPixel,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldX0,<sp/>correction);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>our<sp/>first<sp/>pixel<sp/>maps<sp/>to<sp/>oldX0<sp/>in<sp/>the<sp/>old<sp/>cache,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibly<sp/>out<sp/>of<sp/>bounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>what<sp/>range<sp/>of<sp/>pixels<sp/>can<sp/>data<sp/>be<sp/>copied?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBegin<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(numPixels,<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(0,<sp/>-oldX0));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyEnd<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(numPixels,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBegin<sp/>+<sp/>oldCache-&gt;len<sp/>-<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(0,<sp/>oldX0)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(copyEnd<sp/>&gt;<sp/>copyBegin))</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldCache.reset(0);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>(numPixels,<sp/>pixelsPerSecond,<sp/>mRate,<sp/>t0,<sp/>mDirty);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>min<sp/>=<sp/>&amp;mWaveCache-&gt;min[0];</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>&amp;mWaveCache-&gt;max[0];</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rms<sp/>=<sp/>&amp;mWaveCache-&gt;rms[0];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bl<sp/>=<sp/>&amp;mWaveCache-&gt;bl[0];</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pWhere<sp/>=<sp/>&amp;mWaveCache-&gt;where;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fillWhere(*pWhere,<sp/>numPixels,<sp/>0.0,<sp/>correction,</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0,<sp/>mRate,<sp/>samplesPerPixel);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>range<sp/>of<sp/>pixels<sp/>we<sp/>must<sp/>fetch<sp/>from<sp/>the<sp/>Sequence:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p0<sp/>=<sp/>(copyBegin<sp/>&gt;<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>copyEnd;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/>(copyEnd<sp/>&gt;=<sp/>numPixels)<sp/>?<sp/>copyBegin<sp/>:<sp/>numPixels;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimization:<sp/>if<sp/>the<sp/>old<sp/>cache<sp/>is<sp/>good<sp/>and<sp/>overlaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>current<sp/>one,<sp/>re-use<sp/>as<sp/>much<sp/>of<sp/>the<sp/>cache<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldCache)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO:<sp/>only<sp/>load<sp/>inval<sp/>regions<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//necessary.<sp/><sp/>(usually<sp/>is<sp/>the<sp/>case,<sp/>so<sp/>no<sp/>rush.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//also,<sp/>we<sp/>should<sp/>be<sp/>updating<sp/>the<sp/>NEW<sp/>cache,<sp/>but<sp/>here<sp/>we<sp/>are<sp/>patching<sp/>the<sp/>old<sp/>one<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldCache-&gt;LoadInvalidRegions(mSequence,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldCache-&gt;ClearInvalidRegions();</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>what<sp/>we<sp/>can<sp/>from<sp/>the<sp/>old<sp/>cache.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref><sp/>=<sp/>copyEnd<sp/>-<sp/>copyBegin;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sizeFloats<sp/>=<sp/>length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>srcIdx<sp/>=<sp/>copyBegin<sp/>+<sp/>oldX0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;min[copyBegin],<sp/>&amp;oldCache-&gt;min[srcIdx],<sp/>sizeFloats);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;max[copyBegin],<sp/>&amp;oldCache-&gt;max[srcIdx],<sp/>sizeFloats);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;rms[copyBegin],<sp/>&amp;oldCache-&gt;rms[srcIdx],<sp/>sizeFloats);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;bl[copyBegin],<sp/>&amp;oldCache-&gt;bl[srcIdx],<sp/>length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1<sp/>&gt;<sp/>p0)<sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>was<sp/>not<sp/>used<sp/>or<sp/>did<sp/>not<sp/>satisfy<sp/>the<sp/>whole<sp/>request</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;sampleCount&gt;<sp/>&amp;<ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref><sp/>=<sp/>*pWhere;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>handle<sp/>values<sp/>in<sp/>the<sp/>append<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numSamples<sp/>=<sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Not<sp/>all<sp/>of<sp/>the<sp/>required<sp/>columns<sp/>might<sp/>be<sp/>in<sp/>the<sp/>sequence.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>might<sp/>be<sp/>in<sp/>the<sp/>append<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(a<sp/>=<sp/>p0;<sp/>a<sp/>&lt;<sp/><ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref>;<sp/>++<ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(where[a<sp/>+<sp/>1]<sp/>&gt;<sp/>numSamples)</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>the<sp/>columns<sp/>that<sp/>land<sp/>in<sp/>the<sp/>append<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compute<sp/>the<sp/>values<sp/>that<sp/>are<sp/>outside<sp/>the<sp/>overlap<sp/>from<sp/>scratch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>p1)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>seqFormat<sp/>=<sp/>mSequence-&gt;GetSampleFormat();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>didUpdate<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=a;<sp/>i&lt;<ref refid="sound_8c_1ad86bc04f7f667b1bdced8a0f06d96861" kindref="member">p1</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>left;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>where[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>-<sp/>numSamples;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>right;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>where[i<sp/>+<sp/>1]<sp/>-<sp/>numSamples;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wxCriticalSectionLocker<sp/>locker(mAppendCriticalSection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right<sp/>&gt;<sp/>mAppendBufferLen)</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right<sp/>=<sp/>mAppendBufferLen;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(right<sp/>&gt;<sp/>left)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>=<sp/>right-left;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>j;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/>&amp;((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*)mAppendBuffer.ptr())[left];</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[<ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>];</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(mAppendBuffer.ptr()<sp/>+<sp/>left*<ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(seqFormat),</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqFormat,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>)b,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>,<sp/>len);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>theMax,<sp/>theMin,<sp/>sumsq;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>b[0];</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theMax<sp/>=<sp/>theMin<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=1;<sp/>j&lt;<ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>b[j];</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theMax<sp/>=<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(theMax,<sp/>val);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theMin<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(theMin,<sp/>val);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumsq<sp/>+=<sp/>val<sp/>*<sp/>val;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>min[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>theMin;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>theMax;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rms[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>(float)sqrt(sumsq<sp/>/<sp/>len);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bl[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//for<sp/>now<sp/>just<sp/>fake<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seqFormat<sp/>!=<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="poly-fir_8h_1ab2d05693952610f937e5acb3c4a8fa1b" kindref="member">b</ref>;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>didUpdate=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shrink<sp/>the<sp/>right<sp/>end<sp/>of<sp/>the<sp/>range<sp/>to<sp/>fetch<sp/>from<sp/>Sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(didUpdate)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1<sp/>=<sp/><ref refid="poly-fir_8h_1a8d3c3518d793541417a4845125da1ae1" kindref="member">a</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Done<sp/>with<sp/>append<sp/>buffer,<sp/>now<sp/>fetch<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>cache<sp/>miss</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>the<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p1<sp/>&gt;<sp/>p0)<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mSequence-&gt;GetWaveDisplay(&amp;min[p0],</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;max[p0],</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;rms[p0],</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;bl[p0],</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1-p0,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;where[p0]))</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isLoadingOD=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>the<sp/>number<sp/>of<sp/>OD<sp/>pixels<sp/>-<sp/>the<sp/>only<sp/>way<sp/>to<sp/>do<sp/>this<sp/>is<sp/>by<sp/>recounting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!allocated)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>report<sp/>the<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a9ff4ca6d4c9be28c6f3cb3f806c41913" kindref="member">min</ref><sp/>=<sp/><ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1ab2a1f71c47f052041fbcbdac889be828" kindref="member">max</ref><sp/>=<sp/><ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a75d667998a5aa1ec03d1ec86b80f1392" kindref="member">rms</ref><sp/>=<sp/><ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a607b91b920b3688ea7eeb01bf302debf" kindref="member">bl</ref><sp/>=<sp/><ref refid="class_wave_cache_1a122c1153962ae8d4b5e12810f2867bf0" kindref="member">bl</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>display.<ref refid="class_wave_display_1a7e072e884092ea939899822b0d92b8be" kindref="member">where</ref><sp/>=<sp/>&amp;(*pWhere)[0];</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isLoadingOD<sp/>=<sp/>mWaveCache-&gt;numODPixels<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>isLoadingOD<sp/>=</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count_if(display.<ref refid="class_wave_display_1ae2f6511a16c81ed1ca2b1d87ef55560b" kindref="member">ownBl</ref>.begin(),<sp/>display.<ref refid="class_wave_display_1ae2f6511a16c81ed1ca2b1d87ef55560b" kindref="member">ownBl</ref>.end(),</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bind2nd(less&lt;int&gt;(),<sp/>0))<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ComputeSpectrogramGainFactors</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftLen,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>frequencyGain,<sp/>std::vector&lt;float&gt;<sp/>&amp;gainFactors)</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frequencyGain<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>a<sp/>frequency-dependent<sp/>gain<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scaled<sp/>such<sp/>that<sp/>1000<sp/>Hz<sp/>gets<sp/>a<sp/>gain<sp/>of<sp/>0dB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>reciprocal<sp/>of<sp/>the<sp/>bin<sp/>number<sp/>of<sp/>1000<sp/>Hz:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>((double)rate<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)fftLen)<sp/>/<sp/>1000.0;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>fftLen<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors.reserve(half);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>take<sp/>logarithm<sp/>of<sp/>zero!<sp/><sp/>Let<sp/>bin<sp/>0<sp/>replicate<sp/>the<sp/>gain<sp/>factor<sp/>for<sp/>bin<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors.push_back(frequencyGain*log10(factor));</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>=<sp/>1;<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref><sp/>&lt;<sp/>half;<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors.push_back(frequencyGain*log10(factor<sp/>*<sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>));</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache_1a42bd29a8018fb13326ee2176faab5ef8" kindref="member">SpecCache::Matches</ref></highlight></codeline>
<codeline lineno="762" refid="class_spec_cache_1a42bd29a8018fb13326ee2176faab5ef8" refkind="member"><highlight class="normal"><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dirty_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spectrogram_settings" kindref="compound">SpectrogramSettings</ref><sp/>&amp;settings,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>tolerant<sp/>comparison<sp/>of<sp/>the<sp/>pps<sp/>values<sp/>in<sp/>this<sp/>wise:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accumulated<sp/>difference<sp/>of<sp/>times<sp/>over<sp/>the<sp/>number<sp/>of<sp/>pixels<sp/>is<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>sample<sp/>period.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tstep<sp/>=<sp/>1.0<sp/>/<sp/>pixelsPerSecond;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ppsMatch<sp/>=</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(fabs(tstep<sp/>-<sp/>1.0<sp/>/<sp/><ref refid="class_wave_cache_1a523eaf00e1e99a48767664d38405b68f" kindref="member">pps</ref>)<sp/>*<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref><sp/>&lt;<sp/>(1.0<sp/>/<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ppsMatch<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_cache_1abee5a8da780defb99cfab2cb9608b618" kindref="member">dirty</ref><sp/>==<sp/>dirty_<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespace__sbsms___1a62c9e6ed284aa8472274a48cccd777f1" kindref="member">windowType</ref><sp/>==<sp/>settings.<ref refid="class_spectrogram_settings_1a7fbea69cb9478dd7d894d9399561c736" kindref="member">windowType</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>windowSize<sp/>==<sp/>settings.<ref refid="class_spectrogram_settings_1afbb300bf82421e6d50cb81b7032f7529" kindref="member">windowSize</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>zeroPaddingFactor<sp/>==<sp/>settings.<ref refid="class_spectrogram_settings_1ae627610702531c18a358f3df459027e8" kindref="member">zeroPaddingFactor</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>frequencyGain<sp/>==<sp/>settings.<ref refid="class_spectrogram_settings_1a14b8af717362fd3d5e176a5e9a81783d" kindref="member">frequencyGain</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>algorithm<sp/>==<sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache_1a376eb7e6dc1e393b51a9eb48dafe9c6a" kindref="member">SpecCache::CalculateOneSpectrum</ref></highlight></codeline>
<codeline lineno="783" refid="class_spec_cache_1a376eb7e6dc1e393b51a9eb48dafe9c6a" refkind="member"><highlight class="normal"><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spectrogram_settings" kindref="compound">SpectrogramSettings</ref><sp/>&amp;settings,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_wave_track_cache" kindref="compound">WaveTrackCache</ref><sp/>&amp;waveTrackCache,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>xx,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowerBoundX,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upperBoundX,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;float&gt;<sp/>&amp;gainFactors,</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*scratch)</highlight></codeline>
<codeline lineno="790"><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reassignment<sp/>=</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaab27651b48b8fa1f7f50536d9e0ce8498" kindref="member">SpectrogramSettings::algReassignment</ref>);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>windowSize<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1afbb300bf82421e6d50cb81b7032f7529" kindref="member">windowSize</ref>;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>[0]<sp/>+<sp/>xx<sp/>*<sp/>(rate<sp/>/<sp/>pixelsPerSecond);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&gt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>[<ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>]<sp/>+<sp/>(xx<sp/>-<sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>)<sp/>*<sp/>(rate<sp/>/<sp/>pixelsPerSecond);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>[xx];</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autocorrelation<sp/>=</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaaab944000f92a5f63a9ff5468ef4b5dc2" kindref="member">SpectrogramSettings::algPitchEAC</ref>;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroPaddingFactor<sp/>=<sp/>(autocorrelation<sp/>?<sp/>1<sp/>:<sp/>settings.<ref refid="class_spectrogram_settings_1ae627610702531c18a358f3df459027e8" kindref="member">zeroPaddingFactor</ref>);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="src_2flac_2main_8c_1a78dca952886227190969e885fbdd4fb4" kindref="member">padding</ref><sp/>=<sp/>(windowSize<sp/>*<sp/>(zeroPaddingFactor<sp/>-<sp/>1))<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftLen<sp/>=<sp/>windowSize<sp/>*<sp/>zeroPaddingFactor;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>fftLen<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;=<sp/>0<sp/>||<sp/>start<sp/>&gt;=<sp/>numSamples)<sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(xx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>xx<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pixel<sp/>column<sp/>is<sp/>out<sp/>of<sp/>bounds<sp/>of<sp/>the<sp/>clip!<sp/><sp/>Should<sp/>not<sp/>happen.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results<sp/>=<sp/>&amp;freq[half<sp/>*<sp/>xx];</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(results,<sp/>results<sp/>+<sp/>half,<sp/>0.0<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>can<sp/>avoid<sp/>copying<sp/>memory<sp/>when<sp/>ComputeSpectrum<sp/>is<sp/>used<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy<sp/>=<sp/>!autocorrelation<sp/>||<sp/>(padding<sp/>&gt;<sp/>0)<sp/>||<sp/>reassignment;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*useBuffer<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*adj<sp/>=<sp/>scratch<sp/>+<sp/><ref refid="src_2flac_2main_8c_1a78dca952886227190969e885fbdd4fb4" kindref="member">padding</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>myLen<sp/>=<sp/>windowSize;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>a<sp/>window<sp/>of<sp/>the<sp/>track<sp/>centered<sp/>at<sp/>this<sp/>sample.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>-=<sp/>windowSize<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Near<sp/>the<sp/>start<sp/>of<sp/>the<sp/>clip,<sp/>pad<sp/>left<sp/>with<sp/>zeroes<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>ii<sp/>=<sp/>start;<sp/>ii<sp/>&lt;<sp/>0;<sp/>++ii)</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*adj++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myLen<sp/>+=<sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start<sp/>+<sp/>myLen<sp/>&gt;<sp/>numSamples)<sp/>{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Near<sp/>the<sp/>end<sp/>of<sp/>the<sp/>clip,<sp/>pad<sp/>right<sp/>with<sp/>zeroes<sp/>as<sp/>needed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newlen<sp/>=<sp/>numSamples<sp/>-<sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>ii<sp/>=<sp/>newlen;<sp/>ii<sp/>&lt;<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)myLen;<sp/>++ii)</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adj[ii]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>myLen<sp/>=<sp/>newlen;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copy<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(myLen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(waveTrackCache.<ref refid="class_wave_track_cache_1a13aabc9536d3b6c0013b03f1ebb9e271" kindref="member">Get</ref>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>floor(0.5<sp/>+<sp/>start<sp/>+<sp/>offset<sp/>*<sp/>rate),<sp/>myLen));</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy)</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(adj,<sp/>useBuffer,<sp/>myLen<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(copy)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>useBuffer<sp/>=<sp/>scratch;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(autocorrelation)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results<sp/>=<sp/>&amp;freq[half<sp/>*<sp/>xx];</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>does<sp/>not<sp/>mutate<sp/>useBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_spectrum_8cpp_1a166e75c5ad8a2ae6a3a54bc62af323b4" kindref="member">ComputeSpectrum</ref>(useBuffer,<sp/>windowSize,<sp/>windowSize,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate,<sp/>results,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>autocorrelation,<sp/>settings.<ref refid="class_spectrogram_settings_1a7fbea69cb9478dd7d894d9399561c736" kindref="member">windowType</ref>);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reassignment)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>1<ref refid="namespacelv2docgen_1a4405dc5a2509537b9ff3b4de10bc28d6" kindref="member">e</ref>-16;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a5bdb3fce0f0ee66e99975772f81f951b" kindref="member">hFFT</ref>;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scratch2<sp/>=<sp/>scratch<sp/>+<sp/>fftLen;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(scratch,<sp/>scratch2,<sp/>scratch2);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scratch3<sp/>=<sp/>scratch<sp/>+<sp/>2<sp/>*<sp/>fftLen;</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy(scratch,<sp/>scratch2,<sp/>scratch3);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>window<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a1fdc24b77ae72f754274825cee5e288f" kindref="member">window</ref>;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>fftLen;<sp/>++ii)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch[ii]<sp/>*=<sp/>window[ii];</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" kindref="member">RealFFTf</ref>(scratch,<sp/>hFFT);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>dWindow<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1ab7e880825e7d4543c7d6d132c7ee1294" kindref="member">dWindow</ref>;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>fftLen;<sp/>++ii)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch2[ii]<sp/>*=<sp/>dWindow[ii];</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" kindref="member">RealFFTf</ref>(scratch2,<sp/>hFFT);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>tWindow<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1acb25f1d76f20e850da96b0fe784f92ce" kindref="member">tWindow</ref>;</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>fftLen;<sp/>++ii)</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scratch3[ii]<sp/>*=<sp/>tWindow[ii];</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_real_f_f_tf_8cpp_1abb12cd04470120d0f8154f4b0175ec92" kindref="member">RealFFTf</ref>(scratch3,<sp/>hFFT);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a2dbb35052a4a8d023a83decfc8d97c8a" kindref="member">BitReversed</ref>[ii];</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denomRe<sp/>=<sp/>scratch[index],</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>denomIm<sp/>=<sp/>ii<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>scratch[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>power<sp/>=<sp/>denomRe<sp/>*<sp/>denomRe<sp/>+<sp/>denomIm<sp/>*<sp/>denomIm;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power<sp/>&lt;<sp/>epsilon)</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Avoid<sp/>dividing<sp/>by<sp/>near-zero<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freqCorrection;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>multiplier<sp/>=<sp/>-fftLen<sp/>/<sp/>(2.0f<sp/>*<sp/><ref refid="mathematics_8h_1ae71449b1cc6e6250b91f539153a7a0d3" kindref="member">M_PI</ref>);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numRe<sp/>=<sp/>scratch2[index],</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numIm<sp/>=<sp/>ii<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>scratch2[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>complex<sp/>quotient<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Which<sp/>means,<sp/>multiply<sp/>numerator<sp/>by<sp/>conjugate<sp/>of<sp/>denominator,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then<sp/>divide<sp/>by<sp/>norm<sp/>squared<sp/>of<sp/>denominator<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>just<sp/>take<sp/>its<sp/>imaginary<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>quotIm<sp/>=<sp/>(-numRe<sp/>*<sp/>denomIm<sp/>+<sp/>numIm<sp/>*<sp/>denomRe)<sp/>/<sp/>power;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>appropriate<sp/>multiplier,<sp/>that<sp/>becomes<sp/>the<sp/>correction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>frequency<sp/>bin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freqCorrection<sp/>=<sp/>multiplier<sp/>*<sp/>quotIm;</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin<sp/>=<sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(ii<sp/>+<sp/>freqCorrection<sp/>+<sp/>0.5<ref refid="rfft2d_test_m_l_8m_1aacd36fb6ac9ce14cec71f2ca852524d4" kindref="member">f</ref>);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bin<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>bin<sp/>&lt;<sp/>hFFT-&gt;Points)<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>timeCorrection;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numRe<sp/>=<sp/>scratch3[index],</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numIm<sp/>=<sp/>ii<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>scratch3[index<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>another<sp/>complex<sp/>quotient<sp/>--</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>just<sp/>take<sp/>its<sp/>real<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>has<sp/>sample<sp/>interval<sp/>as<sp/>unit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeCorrection<sp/>=</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(numRe<sp/>*<sp/>denomRe<sp/>+<sp/>numIm<sp/>*<sp/>denomIm)<sp/>/<sp/>power;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>correctedX<sp/>=<sp/>(floor(0.5<sp/>+<sp/>xx<sp/>+<sp/>timeCorrection<sp/>*<sp/>pixelsPerSecond<sp/>/<sp/>rate));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(correctedX<sp/>&gt;=<sp/>lowerBoundX<sp/>&amp;&amp;<sp/>correctedX<sp/>&lt;<sp/>upperBoundX)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freq[half<sp/>*<sp/>correctedX<sp/>+<sp/>bin]<sp/>+=<sp/>power;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results<sp/>=<sp/>&amp;freq[half<sp/>*<sp/>xx];</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>the<sp/>FFT.<sp/><sp/>Note<sp/>that<sp/>useBuffer<sp/>is<sp/>multiplied<sp/>by<sp/>the<sp/>window,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>the<sp/>window<sp/>is<sp/>initialized<sp/>with<sp/>leading<sp/>and<sp/>trailing<sp/>zeroes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>there<sp/>is<sp/>padding.<sp/><sp/>Therefore<sp/>we<sp/>did<sp/>not<sp/>need<sp/>to<sp/>reinitialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>part<sp/>of<sp/>useBuffer<sp/>in<sp/>the<sp/>padding<sp/>zones.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>mutates<sp/>useBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ComputeSpectrumUsingRealFFTf</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(useBuffer,<sp/>settings.<ref refid="class_spectrogram_settings_1a5bdb3fce0f0ee66e99975772f81f951b" kindref="member">hFFT</ref>,<sp/>settings.<ref refid="class_spectrogram_settings_1a1fdc24b77ae72f754274825cee5e288f" kindref="member">window</ref>,<sp/>fftLen,<sp/>results);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gainFactors.empty())<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>frequency-dependant<sp/>gain<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>half;<sp/>++ii)</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results[ii]<sp/>+=<sp/>gainFactors[ii];</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/>//<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>does<sp/>not<sp/>mutate<sp/>scratch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_spectrum_8cpp_1a166e75c5ad8a2ae6a3a54bc62af323b4" kindref="member">ComputeSpectrum</ref>(scratch,<sp/>windowSize,<sp/>windowSize,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate,<sp/>results,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>autocorrelation,<sp/>settings.<ref refid="class_spectrogram_settings_1a7fbea69cb9478dd7d894d9399561c736" kindref="member">windowType</ref>);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache_1a77eeba6191fe84d47a8a3053ece7ec0e" kindref="member">SpecCache::Populate</ref></highlight></codeline>
<codeline lineno="972" refid="class_spec_cache_1a77eeba6191fe84d47a8a3053ece7ec0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spectrogram_settings" kindref="compound">SpectrogramSettings</ref><sp/>&amp;settings,<sp/><ref refid="class_wave_track_cache" kindref="compound">WaveTrackCache</ref><sp/>&amp;waveTrackCache,</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copyBegin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copyEnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPixels,</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples,</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond)</highlight></codeline>
<codeline lineno="976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_USE_REALFFTF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/>settings.<ref refid="class_spectrogram_settings_1adbb224098ebcffa29f6963d413ddc3d6" kindref="member">CacheWindows</ref>();</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;frequencyGain<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a14b8af717362fd3d5e176a5e9a81783d" kindref="member">frequencyGain</ref>;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;windowSize<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1afbb300bf82421e6d50cb81b7032f7529" kindref="member">windowSize</ref>;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autocorrelation<sp/>=</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaaab944000f92a5f63a9ff5468ef4b5dc2" kindref="member">SpectrogramSettings::algPitchEAC</ref>;</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reassignment<sp/>=</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaab27651b48b8fa1f7f50536d9e0ce8498" kindref="member">SpectrogramSettings::algReassignment</ref>;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_ZERO_PADDED_SPECTROGRAMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;zeroPaddingFactor<sp/>=<sp/>autocorrelation<sp/>?<sp/>1<sp/>:<sp/>settings.<ref refid="class_spectrogram_settings_1ae627610702531c18a358f3df459027e8" kindref="member">zeroPaddingFactor</ref>;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroPaddingFactor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FFT<sp/>length<sp/>may<sp/>be<sp/>longer<sp/>than<sp/>the<sp/>window<sp/>of<sp/>samples<sp/>that<sp/>affect<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>of<sp/>zero<sp/>padding<sp/>done<sp/>for<sp/>increased<sp/>frequency<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftLen<sp/>=<sp/>windowSize<sp/>*<sp/>zeroPaddingFactor;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>fftLen<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize<sp/>=<sp/>fftLen;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/><ref refid="recplay_8c_1adbbab5cb2248179d231690a1a02ff977" kindref="member">buffer</ref>(reassignment<sp/>?<sp/>3<sp/>*<sp/>bufferSize<sp/>:<sp/>bufferSize);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>gainFactors;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!autocorrelation)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ComputeSpectrogramGainFactors(fftLen,<sp/>rate,<sp/>frequencyGain,<sp/>gainFactors);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>over<sp/>the<sp/>ranges<sp/>before<sp/>and<sp/>after<sp/>the<sp/>copied<sp/>portion<sp/>and<sp/>compute<sp/>anew.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>of<sp/>the<sp/>ranges<sp/>may<sp/>be<sp/>empty.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>jj<sp/>=<sp/>0;<sp/>jj<sp/>&lt;<sp/>2;<sp/>++jj)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lowerBoundX<sp/>=<sp/>jj<sp/>==<sp/>0<sp/>?<sp/>0<sp/>:<sp/>copyEnd;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>upperBoundX<sp/>=<sp/>jj<sp/>==<sp/>0<sp/>?<sp/>copyBegin<sp/>:<sp/>numPixels;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>xx<sp/>=<sp/>lowerBoundX;<sp/>xx<sp/>&lt;<sp/>upperBoundX;<sp/>++xx)</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateOneSpectrum(</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings,<sp/>waveTrackCache,<sp/>xx,<sp/>numSamples,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>rate,<sp/>pixelsPerSecond,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowerBoundX,<sp/>upperBoundX,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors,<sp/>&amp;buffer[0]);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reassignment)<sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Need<sp/>to<sp/>look<sp/>beyond<sp/>the<sp/>edges<sp/>of<sp/>the<sp/>range<sp/>to<sp/>accumulate<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>time<sp/>reassignments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>I&apos;m<sp/>not<sp/>sure<sp/>what&apos;s<sp/>a<sp/>good<sp/>stopping<sp/>criterion?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>xx<sp/>=<sp/>lowerBoundX;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSample<sp/>=<sp/>pixelsPerSecond<sp/>/<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(0.5<sp/>+<sp/>fftLen<sp/>*<sp/>pixelsPerSample),<sp/>100);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>limit;<sp/>++ii)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateOneSpectrum(</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings,<sp/>waveTrackCache,<sp/>--xx,<sp/>numSamples,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>rate,<sp/>pixelsPerSecond,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowerBoundX,<sp/>upperBoundX,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors,<sp/>&amp;buffer[0]);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx<sp/>=<sp/>upperBoundX;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>limit;<sp/>++ii)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CalculateOneSpectrum(</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>settings,<sp/>waveTrackCache,<sp/>xx++,<sp/>numSamples,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset,<sp/>rate,<sp/>pixelsPerSecond,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowerBoundX,<sp/>upperBoundX,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gainFactors,<sp/>&amp;buffer[0]);</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!result)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>Convert<sp/>to<sp/>dB<sp/>terms.<sp/><sp/>Do<sp/>this<sp/>only<sp/>after<sp/>accumulating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>values,<sp/>which<sp/>may<sp/>cross<sp/>columns<sp/>with<sp/>the<sp/>time<sp/>correction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>xx<sp/>=<sp/>lowerBoundX;<sp/>xx<sp/>&lt;<sp/>upperBoundX;<sp/>++xx)<sp/>{</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>results<sp/>=<sp/>&amp;freq[half<sp/>*<sp/>xx];</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_f_f_t_param" kindref="compound">HFFT</ref><sp/>hFFT<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a5bdb3fce0f0ee66e99975772f81f951b" kindref="member">hFFT</ref>;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>hFFT-&gt;<ref refid="struct_f_f_t_param_1a8d68cf80507059c2372ff865c1a6e665" kindref="member">Points</ref>;<sp/>++ii)<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;power<sp/>=<sp/>results[ii];</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(power<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>=<sp/>-160.0;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>power<sp/>=<sp/>10.0*log10f(power);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!gainFactors.empty())<sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>a<sp/>frequency-dependant<sp/>gain<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ii<sp/>=<sp/>0;<sp/>ii<sp/>&lt;<sp/>half;<sp/>++ii)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results[ii]<sp/>+=<sp/>gainFactors[ii];</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072" refid="class_wave_clip_1ad59c0a252dbb49e98f74155b99777ad8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ad59c0a252dbb49e98f74155b99777ad8" kindref="member">WaveClip::GetSpectrogram</ref>(<ref refid="class_wave_track_cache" kindref="compound">WaveTrackCache</ref><sp/>&amp;waveTrackCache,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*&amp;<sp/>spectrogram,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>*&amp;<sp/><ref refid="class_wave_cache_1af7df2954eebfc2644b127954f320066d" kindref="member">where</ref>,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>numPixels,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>pixelsPerSecond)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1076"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_wave_track" kindref="compound">WaveTrack</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>track<sp/>=<sp/>waveTrackCache.<ref refid="class_wave_track_cache_1a7f431e21835e425e61bfd52f5f310a1f" kindref="member">GetTrack</ref>();</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_spectrogram_settings" kindref="compound">SpectrogramSettings</ref><sp/>&amp;settings<sp/>=<sp/>track-&gt;<ref refid="class_wave_track_1a54f8ed0c9c1d1fae0241867565b33512" kindref="member">GetSpectrogramSettings</ref>();</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>autocorrelation<sp/>=</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaaab944000f92a5f63a9ff5468ef4b5dc2" kindref="member">SpectrogramSettings::algPitchEAC</ref>;</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;frequencyGain<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a14b8af717362fd3d5e176a5e9a81783d" kindref="member">frequencyGain</ref>;</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;windowSize<sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1afbb300bf82421e6d50cb81b7032f7529" kindref="member">windowSize</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;<ref refid="namespace__sbsms___1a62c9e6ed284aa8472274a48cccd777f1" kindref="member">windowType</ref><sp/>=<sp/>settings.<ref refid="class_spectrogram_settings_1a7fbea69cb9478dd7d894d9399561c736" kindref="member">windowType</ref>;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>EXPERIMENTAL_ZERO_PADDED_SPECTROGRAMS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;zeroPaddingFactor<sp/>=<sp/>autocorrelation<sp/>?<sp/>1<sp/>:<sp/>settings.<ref refid="class_spectrogram_settings_1ae627610702531c18a358f3df459027e8" kindref="member">zeroPaddingFactor</ref>;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zeroPaddingFactor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FFT<sp/>length<sp/>may<sp/>be<sp/>longer<sp/>than<sp/>the<sp/>window<sp/>of<sp/>samples<sp/>that<sp/>affect<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>of<sp/>zero<sp/>padding<sp/>done<sp/>for<sp/>increased<sp/>frequency<sp/>resolution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fftLen<sp/>=<sp/>windowSize<sp/>*<sp/>zeroPaddingFactor;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>half<sp/>=<sp/>fftLen<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="xlcont_8c_1a4b0bf8f7ff5bcb92221f867b9c5d742d" kindref="member">match</ref><sp/>=</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache-&gt;len<sp/>&gt;<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache-&gt;Matches</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(mDirty,<sp/>pixelsPerSecond,<sp/>settings,<sp/>mRate);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache-&gt;start<sp/>==<sp/>t0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache-&gt;len<sp/>&gt;=<sp/>numPixels)<sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>spectrogram<sp/>=<sp/>&amp;mSpecCache-&gt;freq[0];</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>where<sp/>=<sp/>&amp;mSpecCache-&gt;where[0];</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/></highlight><highlight class="comment">//hit<sp/>cache<sp/>completely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref><sp/>==<sp/><ref refid="class_spectrogram_settings_1a6b0d17f8056ff543b9e57060a6c6aabaab27651b48b8fa1f7f50536d9e0ce8498" kindref="member">SpectrogramSettings::algReassignment</ref>)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Caching<sp/>is<sp/>not<sp/>implemented<sp/>for<sp/>reassignment,<sp/>unless<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>complete<sp/>hit,<sp/>because<sp/>of<sp/>the<sp/>complications<sp/>of<sp/>time<sp/>reassignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>match<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/>std::unique_ptr&lt;SpecCache&gt;<sp/>oldCache(mSpecCache);</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/>mSpecCache<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tstep<sp/>=<sp/>1.0<sp/>/<sp/>pixelsPerSecond;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>samplesPerPixel<sp/>=<sp/>mRate<sp/>*<sp/>tstep;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldX0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>correction<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>copyBegin<sp/>=<sp/>0,<sp/>copyEnd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>findCorrection(oldCache-&gt;where,<sp/>oldCache-&gt;len,<sp/>numPixels,</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0,<sp/>mRate,<sp/>samplesPerPixel,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>oldX0,<sp/>correction);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>our<sp/>first<sp/>pixel<sp/>maps<sp/>to<sp/>oldX0<sp/>in<sp/>the<sp/>old<sp/>cache,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possibly<sp/>out<sp/>of<sp/>bounds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>what<sp/>range<sp/>of<sp/>pixels<sp/>can<sp/>data<sp/>be<sp/>copied?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyBegin<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(numPixels,<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(0,<sp/>-oldX0));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>copyEnd<sp/>=<sp/><ref refid="_compare_audio_command_8cpp_1abd8bbcfabb3ddef2ccaafb9928a37b95" kindref="member">std::min</ref>(numPixels,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>copyBegin<sp/>+<sp/>oldCache-&gt;len<sp/>-<sp/><ref refid="libflac_2src_2flac_2encode_8c_1ac39d9cef6a5e030ba8d9e11121054268" kindref="member">std::max</ref>(0,<sp/>oldX0)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(copyEnd<sp/>&gt;<sp/>copyBegin))</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>oldCache.reset(0);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/>mSpecCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache" kindref="compound">SpecCache</ref>(</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>numPixels,<sp/>settings.<ref refid="class_spectrogram_settings_1a9e426ccf5b4ab8210e05c0ead16f4dd0" kindref="member">algorithm</ref>,<sp/>pixelsPerSecond,<sp/>t0,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>windowType,<sp/>windowSize,<sp/>zeroPaddingFactor,<sp/>frequencyGain);</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>purposely<sp/>offset<sp/>the<sp/>display<sp/>1/2<sp/>sample<sp/>to<sp/>the<sp/>left<sp/>(as<sp/>compared</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>waveform<sp/>display)<sp/>to<sp/>properly<sp/>center<sp/>response<sp/>of<sp/>the<sp/>FFT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/>fillWhere(mSpecCache-&gt;where,<sp/>numPixels,<sp/>0.5,<sp/>correction,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0,<sp/>mRate,<sp/>samplesPerPixel);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Optimization:<sp/>if<sp/>the<sp/>old<sp/>cache<sp/>is<sp/>good<sp/>and<sp/>overlaps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>current<sp/>one,<sp/>re-use<sp/>as<sp/>much<sp/>of<sp/>the<sp/>cache<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oldCache)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;mSpecCache-&gt;freq[half<sp/>*<sp/>copyBegin],</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;oldCache-&gt;freq[half<sp/>*<sp/>(copyBegin<sp/>+<sp/>oldX0)],</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>half<sp/>*<sp/>(copyEnd<sp/>-<sp/>copyBegin)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/>mSpecCache-&gt;Populate</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(settings,<sp/>waveTrackCache,<sp/>copyBegin,<sp/>copyEnd,<sp/>numPixels,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSequence-&gt;GetNumSamples(),</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mOffset,<sp/>mRate,<sp/>pixelsPerSecond);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>mSpecCache-&gt;dirty<sp/>=<sp/>mDirty;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/>spectrogram<sp/>=<sp/>&amp;mSpecCache-&gt;freq[0];</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/>where<sp/>=<sp/>&amp;mSpecCache-&gt;where[0];</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="class_wave_clip_1ac312139ebb75bc3d8f1b2431190149d4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ac312139ebb75bc3d8f1b2431190149d4" kindref="member">WaveClip::GetMinMax</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1ae4c8765b5c8a9a7a9422135c378061fe" kindref="member">min</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1a38026831cc4f78f4ff5b2cc2c2b264cc" kindref="member">max</ref>,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="1171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/>*min<sp/>=<sp/>float(0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>harmless,<sp/>but<sp/>unused<sp/>since<sp/>Sequence::GetMinMax<sp/>does<sp/>not<sp/>use<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/>*max<sp/>=<sp/>float(0.0);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>harmless,<sp/>but<sp/>unused<sp/>since<sp/>Sequence::GetMinMax<sp/>does<sp/>not<sp/>use<sp/>these<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>t1)</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>==<sp/>t1)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t1,<sp/>&amp;s1);</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSequence-&gt;GetMinMax(s0,<sp/>s1-s0,<sp/>min,<sp/>max);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="class_wave_clip_1a90c059a7d3c13082e8782f162268cc01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a90c059a7d3c13082e8782f162268cc01" kindref="member">WaveClip::GetRMS</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="class_wave_cache_1aeb21938e68b6a79b79566f1a3320d8e3" kindref="member">rms</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="1191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/>*rms<sp/>=<sp/>float(0.0);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>t1)</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>==<sp/>t1)</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t1,<sp/>&amp;s1);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSequence-&gt;GetRMS(s0,<sp/>s1-s0,<sp/>rms);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="class_wave_clip_1ad1f78194df6c1f261b9d375359779c3d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ad1f78194df6c1f261b9d375359779c3d" kindref="member">WaveClip::ConvertToSampleFormat</ref>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bChanged;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bResult<sp/>=<sp/>mSequence-&gt;ConvertToSampleFormat(format,<sp/>&amp;bChanged);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bResult<sp/>&amp;&amp;<sp/>bChanged)</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/>wxASSERT(bResult);<sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Throw<sp/>an<sp/>actual<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217" refid="class_wave_clip_1ae556d0166bde7df46315757f6451d671" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ae556d0166bde7df46315757f6451d671" kindref="member">WaveClip::UpdateEnvelopeTrackLen</ref>()</highlight></codeline>
<codeline lineno="1218"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;SetTrackLen(((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mSequence-&gt;GetNumSamples())<sp/>/<sp/>mRate);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="class_wave_clip_1a391ab35fa8e9cc0549060cf46e4b5ba4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a391ab35fa8e9cc0549060cf46e4b5ba4" kindref="member">WaveClip::TimeToSamplesClip</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>*s0)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1223"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>mOffset)</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s0<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>mOffset<sp/>+<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(mSequence-&gt;GetNumSamples())/mRate)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s0<sp/>=<sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s0<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(((t0<sp/>-<sp/>mOffset)<sp/>*<sp/>mRate)<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight></codeline>
<codeline lineno="1232" refid="class_wave_clip_1a785650ce7b0f65b7f6b51717dcf438a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a785650ce7b0f65b7f6b51717dcf438a1" kindref="member">WaveClip::ClearDisplayRect</ref>()</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/>mDisplayRect.x<sp/>=<sp/>mDisplayRect.y<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/>mDisplayRect.width<sp/>=<sp/>mDisplayRect.height<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238" refid="class_wave_clip_1ac42da9000a368776ef8beb582723fb29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ac42da9000a368776ef8beb582723fb29" kindref="member">WaveClip::SetDisplayRect</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxRect&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1239"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/>mDisplayRect<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243" refid="class_wave_clip_1a7df6beb25e45b947900c40744a6fc968" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a7df6beb25e45b947900c40744a6fc968" kindref="member">WaveClip::GetDisplayRect</ref>(wxRect*<sp/>r)</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/>*r<sp/>=<sp/>mDisplayRect;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="class_wave_clip_1a3f1bee3270d0e6edb160be180b42fe20" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a3f1bee3270d0e6edb160be180b42fe20" kindref="member">WaveClip::Append</ref>(<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="structbuffer" kindref="compound">buffer</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/><ref refid="_export_p_c_m_8cpp_1a317afff57d87a89158c2b038d37b2b08" kindref="member">format</ref>,</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_x_m_l_writer" kindref="compound">XMLWriter</ref>*<sp/>blockFileLog<sp/></highlight><highlight class="comment">/*=NULL*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug(wxT(&quot;Append:<sp/>len=%lli&quot;),<sp/>(long<sp/>long)<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>maxBlockSize<sp/>=<sp/>mSequence-&gt;GetMaxBlockSize();</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>blockSize<sp/>=<sp/>mSequence-&gt;GetIdealAppendLen();</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>seqFormat<sp/>=<sp/>mSequence-&gt;GetSampleFormat();</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mAppendBuffer.ptr())</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBuffer.Allocate(maxBlockSize,<sp/>seqFormat);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(;;)<sp/>{</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAppendBufferLen<sp/>&gt;=<sp/>blockSize)<sp/>{</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSequence-&gt;Append(mAppendBuffer.ptr(),<sp/>seqFormat,<sp/>blockSize,</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockFileLog);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!success)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memmove(mAppendBuffer.ptr(),</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBuffer.ptr()<sp/>+<sp/>blockSize<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(seqFormat),</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mAppendBufferLen<sp/>-<sp/>blockSize)<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(seqFormat));</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBufferLen<sp/>-=<sp/>blockSize;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blockSize<sp/>=<sp/>mSequence-&gt;GetIdealAppendLen();</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>toCopy<sp/>=<sp/>maxBlockSize<sp/>-<sp/>mAppendBufferLen;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toCopy<sp/>&gt;<sp/>len)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toCopy<sp/>=<sp/><ref refid="class_wave_cache_1aadcb69c211509b3de0105d521dd50b9c" kindref="member">len</ref>;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_sample_format_8cpp_1a2819d83a15a7623e52e6562b3329471c" kindref="member">CopySamples</ref>(buffer,<sp/>format,</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBuffer.ptr()<sp/>+<sp/>mAppendBufferLen<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(seqFormat),</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seqFormat,</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toCopy,</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>high<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBufferLen<sp/>+=<sp/>toCopy;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buffer<sp/>+=<sp/>toCopy<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(format)<sp/>*<sp/>stride;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>-=<sp/>toCopy;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300" refid="class_wave_clip_1a4941962310ced5ab5985da2b0272ab57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a4941962310ced5ab5985da2b0272ab57" kindref="member">WaveClip::AppendAlias</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;fName,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useOD)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>mSequence-&gt;AppendAlias(fName,<sp/>start,<sp/>len,<sp/>channel,useOD);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="class_wave_clip_1a1cffad71a1823236757c92f09ab7f1af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a1cffad71a1823236757c92f09ab7f1af" kindref="member">WaveClip::AppendCoded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>&amp;fName,<sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="class_wave_cache_1_1_invalid_region_1a4ca9097f9898a2ce46872fcdc113d19a" kindref="member">start</ref>,</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>channel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decodeType)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>mSequence-&gt;AppendCoded(fName,<sp/>start,<sp/>len,<sp/>channel,<sp/>decodeType);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324" refid="class_wave_clip_1a14f42adce1fe0abf89f0bd2604a64dba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a14f42adce1fe0abf89f0bd2604a64dba" kindref="member">WaveClip::Flush</ref>()</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug(wxT(&quot;WaveClip::Flush&quot;));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug(wxT(&quot;<sp/><sp/><sp/>mAppendBufferLen=%lli&quot;),<sp/>(long<sp/>long)<sp/>mAppendBufferLen);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug(wxT(&quot;<sp/><sp/><sp/>previous<sp/>sample<sp/>count<sp/>%lli&quot;),<sp/>(long<sp/>long)<sp/>mSequence-&gt;GetNumSamples());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mAppendBufferLen<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/>mSequence-&gt;Append(mAppendBuffer.ptr(),<sp/>mSequence-&gt;GetSampleFormat(),<sp/>mAppendBufferLen);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(success)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAppendBufferLen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//wxLogDebug(wxT(&quot;now<sp/>sample<sp/>count<sp/>%lli&quot;),<sp/>(long<sp/>long)<sp/>mSequence-&gt;GetNumSamples());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345" refid="class_wave_clip_1ae3270d41bc040b47c12c898f2726744c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ae3270d41bc040b47c12c898f2726744c" kindref="member">WaveClip::HandleXMLTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>**attrs)</highlight></codeline>
<codeline lineno="1346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;waveclip&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dblValue;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*attrs)</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*attr<sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref><sp/>=<sp/>*attrs++;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxString<sp/>strValue<sp/>=<sp/><ref refid="lib_2expat_8h_1a4a30a13b813682e68c5b689b45c65971" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(attr,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_x_m_l_value_checker_1adf2bcfece118875538ca2bdd528b8c23" kindref="member">XMLValueChecker::IsGoodString</ref>(strValue)<sp/>||</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="class_internat_1ab79e779c79e9ddf82270cb78e78d638d" kindref="member">Internat::CompatibleToDouble</ref>(strValue,<sp/>&amp;dblValue))</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetOffset(dblValue);</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373" refid="class_wave_clip_1a33072f0f5c19ebc7d340b787e4881075" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a33072f0f5c19ebc7d340b787e4881075" kindref="member">WaveClip::HandleXMLEndTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="1374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;waveclip&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"></highlight></codeline>
<codeline lineno="1379" refid="class_wave_clip_1a104667e20cb5b785f722afda682ec678" refkind="member"><highlight class="normal"><ref refid="class_x_m_l_tag_handler" kindref="compound">XMLTagHandler</ref><sp/>*<ref refid="class_wave_clip_1a104667e20cb5b785f722afda682ec678" kindref="member">WaveClip::HandleXMLChild</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>wxChar<sp/>*<ref refid="structtag" kindref="compound">tag</ref>)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;sequence&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSequence;</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;envelope&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mEnvelope;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!wxStrcmp(tag,<sp/>wxT(</highlight><highlight class="stringliteral">&quot;waveclip&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nested<sp/>wave<sp/>clips<sp/>are<sp/>cut<sp/>lines</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref><sp/>*newCutLine<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>(mSequence-&gt;GetDirManager(),</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSequence-&gt;GetSampleFormat(),<sp/>mRate);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.<ref refid="class_wave_clip_1a3f1bee3270d0e6edb160be180b42fe20" kindref="member">Append</ref>(newCutLine);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newCutLine;</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396" refid="class_wave_clip_1ad2ed09187465aab286025108b0d5f4ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ad2ed09187465aab286025108b0d5f4ba" kindref="member">WaveClip::WriteXML</ref>(<ref refid="class_x_m_l_writer" kindref="compound">XMLWriter</ref><sp/>&amp;xmlFile)</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a38abb8ecc4a15db0272d43ff8bec1369" kindref="member">StartTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;waveclip&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a631a2d04a50680a64f0ae48a61d4a4d1" kindref="member">WriteAttr</ref>(wxT(</highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal">),<sp/>mOffset,<sp/>8);</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/>mSequence-&gt;WriteXML(xmlFile);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;WriteXML(xmlFile);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData()-&gt;WriteXML(xmlFile);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/>xmlFile.<ref refid="class_x_m_l_writer_1a5c4e63c2c9762b6a04ad4e48bb117678" kindref="member">EndTag</ref>(wxT(</highlight><highlight class="stringliteral">&quot;waveclip&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410" refid="class_wave_clip_1a7a72ade10b0fb3475c1511342f105fff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a7a72ade10b0fb3475c1511342f105fff" kindref="member">WaveClip::CreateFromCopy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>other)</highlight></codeline>
<codeline lineno="1411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/>other-&gt;<ref refid="class_wave_clip_1a391ab35fa8e9cc0549060cf46e4b5ba4" kindref="member">TimeToSamplesClip</ref>(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/>other-&gt;<ref refid="class_wave_clip_1a391ab35fa8e9cc0549060cf46e4b5ba4" kindref="member">TimeToSamplesClip</ref>(t1,<sp/>&amp;s1);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref>*<sp/>oldSequence<sp/>=<sp/>mSequence;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/>mSequence<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!other-&gt;<ref refid="class_wave_clip_1a1aab29e1271276ad00a3db2222da37db" kindref="member">mSequence</ref>-&gt;<ref refid="class_sequence_1a2ddb679457dc9059bb328f194cdbe6b3" kindref="member">Copy</ref>(s0,<sp/>s1,<sp/>&amp;mSequence))</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSequence<sp/>=<sp/>oldSequence;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>oldSequence;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mEnvelope;</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/>mEnvelope<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_envelope" kindref="compound">Envelope</ref>();</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/>mEnvelope-&gt;CopyFrom(other-&gt;<ref refid="class_wave_clip_1a3633c7bbd9fc7f3a9f7cc538b4904e1e" kindref="member">mEnvelope</ref>,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)s0/mRate,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)s1/mRate);</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435" refid="class_wave_clip_1a72dc26a0e0eb5ac08696cee72c81b477" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a72dc26a0e0eb5ac08696cee72c81b477" kindref="member">WaveClip::Paste</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>other)</highlight></codeline>
<codeline lineno="1436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clipNeedsResampling<sp/>=<sp/>other-&gt;<ref refid="class_wave_clip_1a4862030d149b9990fb10891c79953f9e" kindref="member">mRate</ref><sp/>!=<sp/>mRate;</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clipNeedsNewFormat<sp/>=</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>other-&gt;<ref refid="class_wave_clip_1a1aab29e1271276ad00a3db2222da37db" kindref="member">mSequence</ref>-&gt;<ref refid="class_sequence_1aaec26c4f850a02c6f66bad8184d61d95" kindref="member">GetSampleFormat</ref>()<sp/>!=<sp/>mSequence-&gt;GetSampleFormat();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/>std::unique_ptr&lt;WaveClip&gt;<sp/>newClip;</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>pastedClip;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipNeedsResampling<sp/>||<sp/>clipNeedsNewFormat)</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>newClip.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>(*other,<sp/>mSequence-&gt;GetDirManager()));</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipNeedsResampling)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>other<sp/>clip&apos;s<sp/>rate<sp/>is<sp/>different<sp/>from<sp/>ours,<sp/>so<sp/>resample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newClip-&gt;Resample(mRate))</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clipNeedsNewFormat)</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>sample<sp/>formats<sp/>to<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newClip-&gt;<ref refid="class_wave_clip_1ad1f78194df6c1f261b9d375359779c3d" kindref="member">ConvertToSampleFormat</ref>(mSequence-&gt;GetSampleFormat());</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pastedClip<sp/>=<sp/>newClip.get();</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>resampling<sp/>or<sp/>format<sp/>change<sp/>needed,<sp/>just<sp/>use<sp/>original<sp/>clip<sp/>without<sp/>making<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pastedClip<sp/>=<sp/>other;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0;</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mSequence-&gt;Paste(s0,<sp/>pastedClip-&gt;<ref refid="class_wave_clip_1a1aab29e1271276ad00a3db2222da37db" kindref="member">mSequence</ref>))</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mEnvelope-&gt;Paste((</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)s0/mRate<sp/>+<sp/>mOffset,<sp/>pastedClip-&gt;<ref refid="class_wave_clip_1a3633c7bbd9fc7f3a9f7cc538b4904e1e" kindref="member">mEnvelope</ref>);</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mEnvelope-&gt;RemoveUnneededPoints();</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>OffsetCutLines(t0,<sp/>pastedClip-&gt;<ref refid="class_wave_clip_1a7c878143bdd7641be183325944d02f39" kindref="member">GetEndTime</ref>()<sp/>-<sp/>pastedClip-&gt;<ref refid="class_wave_clip_1a839a293df9246f7a9bb6fcf4d8be7b40" kindref="member">GetStartTime</ref>());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Paste<sp/>cut<sp/>lines<sp/>contained<sp/>in<sp/>pasted<sp/>clip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>pastedClip-&gt;<ref refid="class_wave_clip_1ae7ad94a38d669ca1a9ce06344a89c8e8" kindref="member">mCutLines</ref>.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>cutline<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>newCutLine<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>(*cutline,</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSequence-&gt;GetDirManager());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newCutLine-&gt;<ref refid="class_wave_clip_1a02ede29411c67eb9bc3193e6f1f453eb" kindref="member">Offset</ref>(t0<sp/>-<sp/>mOffset);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.Append(newCutLine);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487" refid="class_wave_clip_1a3c7d2ee22cfb286a588c0f03abc5e470" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a3c7d2ee22cfb286a588c0f03abc5e470" kindref="member">WaveClip::InsertSilence</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="octave__test_8m_1aaccc9105df5383111407fd5b41255e23" kindref="member">t</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>slen<sp/>=<sp/>(<ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref>)floor(len<sp/>*<sp/>mRate<sp/>+<sp/>0.5);</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetSequence()-&gt;InsertSilence(s0,<sp/>slen))</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/>OffsetCutLines(t,<sp/>len);</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/>GetEnvelope()-&gt;InsertSpace(t,<sp/>len);</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505" refid="class_wave_clip_1aff72eda8b7f0c6dec6ff16c7b30c622c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1aff72eda8b7f0c6dec6ff16c7b30c622c" kindref="member">WaveClip::Clear</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t1,<sp/>&amp;s1);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetSequence()-&gt;Delete(s0,<sp/>s1-s0))</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>msmeyer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>all<sp/>cutlines<sp/>that<sp/>are<sp/>within<sp/>the<sp/>given<sp/>area,<sp/>if<sp/>any.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>when<sp/>cutlines<sp/>are<sp/>active,<sp/>two<sp/>functions<sp/>are<sp/>used:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear()<sp/>and<sp/>ClearAndAddCutLine().<sp/>ClearAndAddCutLine()<sp/>is<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>whenever<sp/>the<sp/>user<sp/>directly<sp/>calls<sp/>a<sp/>command<sp/>that<sp/>removes<sp/>some<sp/>audio,<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Cut&quot;<sp/>or<sp/>&quot;Clear&quot;<sp/>from<sp/>the<sp/>menu.<sp/>This<sp/>command<sp/>takes<sp/>care<sp/>about<sp/>recursive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preserving<sp/>of<sp/>cutlines<sp/>within<sp/>clips.<sp/>Clear()<sp/>is<sp/>called<sp/>when<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>operations<sp/>want<sp/>to<sp/>remove<sp/>audio.<sp/>In<sp/>the<sp/>latter<sp/>case,<sp/>it<sp/>is<sp/>the<sp/>right</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thing<sp/>to<sp/>just<sp/>remove<sp/>all<sp/>cutlines<sp/>within<sp/>the<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clip_t0<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clip_t1<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_t0<sp/>&lt;<sp/>GetStartTime())</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip_t0<sp/>=<sp/>GetStartTime();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_t1<sp/>&gt;<sp/>GetEndTime())</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip_t1<sp/>=<sp/>GetEndTime();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveClipList::compatibility_iterator<sp/>nextIt;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=nextIt)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextIt<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext();</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>clip<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutlinePosition<sp/>=<sp/>mOffset<sp/>+<sp/>clip-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>();</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlinePosition<sp/>&gt;=<sp/>t0<sp/>&amp;&amp;<sp/>cutlinePosition<sp/>&lt;=<sp/>t1)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>cutline<sp/>is<sp/>within<sp/>the<sp/>area,<sp/>DELETE<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>clip;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.DeleteNode(<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlinePosition<sp/>&gt;=<sp/>t1)</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;<ref refid="class_wave_clip_1a02ede29411c67eb9bc3193e6f1f453eb" kindref="member">Offset</ref>(clip_t0-clip_t1);</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collapse<sp/>envelope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetEnvelope()-&gt;CollapseRegion(t0,<sp/>t1);</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>GetStartTime())</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset(-(GetStartTime()<sp/>-<sp/>t0));</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564" refid="class_wave_clip_1a9813ed13f73bfb5aae6c5b794f5af07a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a9813ed13f73bfb5aae6c5b794f5af07a" kindref="member">WaveClip::ClearAndAddCutLine</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t1)</highlight></codeline>
<codeline lineno="1565"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&gt;<sp/>GetEndTime()<sp/>||<sp/>t1<sp/>&lt;<sp/>GetStartTime())</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>time<sp/>out<sp/>of<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref><sp/>*newClip<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>(mSequence-&gt;GetDirManager(),</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSequence-&gt;GetSampleFormat(),</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mRate);</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clip_t0<sp/>=<sp/>t0;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>clip_t1<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_t0<sp/>&lt;<sp/>GetStartTime())</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip_t0<sp/>=<sp/>GetStartTime();</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clip_t1<sp/>&gt;<sp/>GetEndTime())</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>clip_t1<sp/>=<sp/>GetEndTime();</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"></highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newClip-&gt;<ref refid="class_wave_clip_1a7a72ade10b0fb3475c1511342f105fff" kindref="member">CreateFromCopy</ref>(clip_t0,<sp/>clip_t1,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/>newClip-&gt;<ref refid="class_wave_clip_1ac0c4ce7ebbc00afa175813f60bd97019" kindref="member">SetOffset</ref>(clip_t0-mOffset);</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>out<sp/>cutlines<sp/>that<sp/>belong<sp/>to<sp/>the<sp/>NEW<sp/>cutline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/>WaveClipList::compatibility_iterator<sp/>nextIt;</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=nextIt)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nextIt<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext();</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>clip<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutlinePosition<sp/>=<sp/>mOffset<sp/>+<sp/>clip-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>();</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlinePosition<sp/>&gt;=<sp/>t0<sp/>&amp;&amp;<sp/>cutlinePosition<sp/>&lt;=<sp/>t1)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;<ref refid="class_wave_clip_1ac0c4ce7ebbc00afa175813f60bd97019" kindref="member">SetOffset</ref>(cutlinePosition<sp/>-<sp/>newClip-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>()<sp/>-<sp/>mOffset);</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newClip-&gt;<ref refid="class_wave_clip_1ae7ad94a38d669ca1a9ce06344a89c8e8" kindref="member">mCutLines</ref>.Append(clip);</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.DeleteNode(<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlinePosition<sp/>&gt;=<sp/>t1)</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clip-&gt;<ref refid="class_wave_clip_1a02ede29411c67eb9bc3193e6f1f453eb" kindref="member">Offset</ref>(clip_t0-clip_t1);</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>actual<sp/>audio<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>s0,<sp/>s1;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t0,<sp/>&amp;s0);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/>TimeToSamplesClip(t1,<sp/>&amp;s1);</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetSequence()-&gt;Delete(s0,<sp/>s1-s0))</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Collapse<sp/>envelope</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>GetEnvelope()-&gt;CollapseRegion(t0,<sp/>t1);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t0<sp/>&lt;<sp/>GetStartTime())</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Offset(-(GetStartTime()<sp/>-<sp/>t0));</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.Append(newClip);</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>newClip;</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627" refid="class_wave_clip_1a488b6cd7e76c282a1bf70200beb4d66c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a488b6cd7e76c282a1bf70200beb4d66c" kindref="member">WaveClip::FindCutLine</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutLinePosition,</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>cutlineStart<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>NULL<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>cutlineEnd<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>NULL<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>cutline<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mOffset<sp/>+<sp/>cutline-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>()<sp/>-<sp/>cutLinePosition)<sp/>&lt;<sp/>0.0001)</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlineStart)</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cutlineStart<sp/>=<sp/>mOffset+cutline-&gt;<ref refid="class_wave_clip_1a839a293df9246f7a9bb6fcf4d8be7b40" kindref="member">GetStartTime</ref>();</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cutlineEnd)</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*cutlineEnd<sp/>=<sp/>mOffset+cutline-&gt;<ref refid="class_wave_clip_1a7c878143bdd7641be183325944d02f39" kindref="member">GetEndTime</ref>();</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647" refid="class_wave_clip_1af6c3f9e851393b1197a370b0a499ba85" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1af6c3f9e851393b1197a370b0a499ba85" kindref="member">WaveClip::ExpandCutLine</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutLinePosition)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>cutline<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mOffset<sp/>+<sp/>cutline-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>()<sp/>-<sp/>cutLinePosition)<sp/>&lt;<sp/>0.0001)</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Paste(mOffset+cutline-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>(),<sp/>cutline))</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cutline;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.DeleteNode(<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>);</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665" refid="class_wave_clip_1a2c761a03942c1f63e5f6a768ba0af03e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a2c761a03942c1f63e5f6a768ba0af03e" kindref="member">WaveClip::RemoveCutLine</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutLinePosition)</highlight></codeline>
<codeline lineno="1666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(mOffset<sp/>+<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData()-&gt;GetOffset()<sp/>-<sp/>cutLinePosition)<sp/>&lt;<sp/>0.0001)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.DeleteNode(<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680" refid="class_wave_clip_1a39a93d0ad31f6e021d2758fa5f8e0b70" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a39a93d0ad31f6e021d2758fa5f8e0b70" kindref="member">WaveClip::RemoveAllCutLines</ref>()</highlight></codeline>
<codeline lineno="1681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!mCutLines.IsEmpty())</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>WaveClipList::compatibility_iterator<sp/>head<sp/>=<sp/>mCutLines.GetFirst();</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>head-&gt;GetData();</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mCutLines.DeleteNode(head);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690" refid="class_wave_clip_1aa67e6fb537b009d7b2e61d7805093bff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1aa67e6fb537b009d7b2e61d7805093bff" kindref="member">WaveClip::OffsetCutLines</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t0,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</highlight></codeline>
<codeline lineno="1691"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_wave_clip" kindref="compound">WaveClip</ref>*<sp/>cutLine<sp/>=<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData();</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mOffset<sp/>+<sp/>cutLine-&gt;<ref refid="class_wave_clip_1a070d7b2328a78c6ddaecc2f60ad4567f" kindref="member">GetOffset</ref>()<sp/>&gt;=<sp/>t0)</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cutLine-&gt;<ref refid="class_wave_clip_1a02ede29411c67eb9bc3193e6f1f453eb" kindref="member">Offset</ref>(len);</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700" refid="class_wave_clip_1adecbc49d13d783a569fc29359fbbc89d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1adecbc49d13d783a569fc29359fbbc89d" kindref="member">WaveClip::Lock</ref>()</highlight></codeline>
<codeline lineno="1701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/>GetSequence()-&gt;Lock();</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData()-&gt;Lock();</highlight></codeline>
<codeline lineno="1705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707" refid="class_wave_clip_1aea9b994a9a24270712e7f4bd9b25120f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1aea9b994a9a24270712e7f4bd9b25120f" kindref="member">WaveClip::CloseLock</ref>()</highlight></codeline>
<codeline lineno="1708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/>GetSequence()-&gt;CloseLock();</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData()-&gt;CloseLock();</highlight></codeline>
<codeline lineno="1712"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714" refid="class_wave_clip_1a957e4b414783b28da7aae6b7cd4e003f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a957e4b414783b28da7aae6b7cd4e003f" kindref="member">WaveClip::Unlock</ref>()</highlight></codeline>
<codeline lineno="1715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/>GetSequence()-&gt;Unlock();</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(WaveClipList::compatibility_iterator<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref><sp/>=<sp/>mCutLines.GetFirst();<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>;<sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>=<ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetNext())</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="conv2dtest_8m_1a4b223b47b1bd746a69ed8ac37c4b16db" kindref="member">it</ref>-&gt;GetData()-&gt;Unlock();</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721" refid="class_wave_clip_1a699a045d7e0665a010745bcf0f513f45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1a699a045d7e0665a010745bcf0f513f45" kindref="member">WaveClip::SetRate</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rate)</highlight></codeline>
<codeline lineno="1722"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/>mRate<sp/>=<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/>UpdateEnvelopeTrackLen();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/>MarkChanged();</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"></highlight></codeline>
<codeline lineno="1728" refid="class_wave_clip_1ada848d3405e07d83918b614a42a1799b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_wave_clip_1ada848d3405e07d83918b614a42a1799b" kindref="member">WaveClip::Resample</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rate,<sp/><ref refid="class_progress_dialog" kindref="compound">ProgressDialog</ref><sp/>*progress)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rate<sp/>==<sp/>mRate)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>(double)rate<sp/>/<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)mRate;</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_resample" kindref="compound">::Resample</ref><sp/>resample(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>factor,<sp/>factor);<sp/></highlight><highlight class="comment">//<sp/>constant<sp/>rate<sp/>resampling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize<sp/>=<sp/>65536;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>inBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[bufsize];</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>outBuffer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">[bufsize];</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>outGenerated<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1afa427e1f521ea5ec12d054e8bd4d0f71" kindref="member">sampleCount</ref><sp/>numSamples<sp/>=<sp/>mSequence-&gt;GetNumSamples();</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref>*<sp/>newSequence<sp/>=</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sequence" kindref="compound">Sequence</ref>(mSequence-&gt;GetDirManager(),<sp/>mSequence-&gt;GetSampleFormat());</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos<sp/>&lt;<sp/>numSamples<sp/>||<sp/>outGenerated<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inLen<sp/>=<sp/>numSamples<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inLen<sp/>&gt;<sp/>bufsize)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inLen<sp/>=<sp/>bufsize;</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLast<sp/>=<sp/>((pos<sp/>+<sp/>inLen)<sp/>==<sp/>numSamples);</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mSequence-&gt;Get((<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>)inBuffer,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>,<sp/>pos,<sp/>inLen))</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inBufferUsed<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>outGenerated<sp/>=<sp/>resample.<ref refid="class_resample_1ace53c0e6d5002a77858d1da06b1350c3" kindref="member">Process</ref>(factor,<sp/>inBuffer,<sp/>inLen,<sp/>isLast,</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;inBufferUsed,<sp/>outBuffer,<sp/>bufsize);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>inBufferUsed;</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outGenerated<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!newSequence-&gt;<ref refid="class_sequence_1af9f0194f9270cd7dda4e2629d3f05515" kindref="member">Append</ref>((<ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref>)outBuffer,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>,</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>outGenerated))</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(progress)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>updateResult<sp/>=<sp/>progress-&gt;<ref refid="class_progress_dialog_1a9b30082ae25b77cc5229576547c01aa6" kindref="member">Update</ref>(pos,<sp/>numSamples);</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/>(updateResult<sp/>!=<sp/><ref refid="_progress_dialog_8h_1ae6f7b430ccd2b8df9ba02ada329b4e02a4f88b782dbc37c4eefb166849bfbbac3" kindref="member">eProgressSuccess</ref>);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>inBuffer;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>outBuffer;</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(error)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>newSequence;</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mSequence;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSequence<sp/>=<sp/>newSequence;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mRate<sp/>=<sp/><ref refid="class_wave_cache_1ac48cb51744b60852d389473425c4192b" kindref="member">rate</ref>;</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalidate<sp/>wave<sp/>display<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mWaveCache)</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mWaveCache;</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mWaveCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_wave_cache_1aba53f54a630a51cb7ca4a0317b92a198" kindref="member">WaveCache</ref>();</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalidate<sp/>the<sp/>spectrum<sp/>display<sp/>cache</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mSpecCache)</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mSpecCache;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mSpecCache<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_spec_cache" kindref="compound">SpecCache</ref>();</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!error;</highlight></codeline>
<codeline lineno="1822"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/WaveClip.cpp"/>
  </compounddef>
</doxygen>
