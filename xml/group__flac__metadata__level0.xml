<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="group__flac__metadata__level0" kind="group">
    <compoundname>flac_metadata_level0</compoundname>
    <title>FLAC/metadata.h: metadata level 0 interface</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__flac__metadata__level0_1gaf248d1ccc8025b9e9d7f532b8af4ab07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_streaminfo</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata *streaminfo)</argsstring>
        <name>FLAC__metadata_get_streaminfo</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> *</type>
          <declname>streaminfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the STREAMINFO metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>streaminfo</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to space for the STREAMINFO block. Since <ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> is a simple structure with no memory allocation involved, you pass the address of an existing structure. It need not be initialized.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">streaminfo<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid STREAMINFO block was read from <emphasis>filename</emphasis>. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no STREAMINFO block. (A memory allocation error is possible because this function must set up a file decoder.) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="159" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="197" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1gaf66469f31dca28837ffd3f8b0ec5c082" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_tags</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **tags)</argsstring>
        <name>FLAC__metadata_get_tags</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>tags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the VORBIS_COMMENT metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tags</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>tags</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">tags<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid VORBIS_COMMENT block was read from <emphasis>filename</emphasis>, and <emphasis>*tags</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no VORBIS_COMMENT block, and <emphasis>*tags</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="178" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="217" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1ga6ee2633dc179c2a0cb5fef5762faf0fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_cuesheet</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **cuesheet)</argsstring>
        <name>FLAC__metadata_get_cuesheet</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>cuesheet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the CUESHEET metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cuesheet</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>cuesheet</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">cuesheet<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid CUESHEET block was read from <emphasis>filename</emphasis>, and <emphasis>*cuesheet</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no CUESHEET block, and <emphasis>*cuesheet</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="197" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="227" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="group__flac__metadata__level0_1gaa13138ab038694909964998a113817b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__flac__export_1ga56ca07df8a23310707732b1c0007d6f5" kindref="member">FLAC_API</ref> <ref refid="ordinals_8h_1a95103469f1cbd78b8cf250194985b34e" kindref="member">FLAC__bool</ref></type>
        <definition>FLAC_API FLAC__bool FLAC__metadata_get_picture</definition>
        <argsstring>(const char *filename, FLAC__StreamMetadata **picture, FLAC__StreamMetadata_Picture_Type type, const char *mime_type, const FLAC__byte *description, unsigned max_width, unsigned max_height, unsigned max_depth, unsigned max_colors)</argsstring>
        <name>FLAC__metadata_get_picture</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="struct_f_l_a_c_____stream_metadata" kindref="compound">FLAC__StreamMetadata</ref> **</type>
          <declname>picture</declname>
        </param>
        <param>
          <type><ref refid="group__flac__format_1gaf6d3e836cee023e0b8d897f1fdc9825d" kindref="member">FLAC__StreamMetadata_Picture_Type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> char *</type>
          <declname>mime_type</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="ordinals_8h_1a5eb569b12d5b047cdacada4d57924ee3" kindref="member">FLAC__byte</ref> *</type>
          <declname>description</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_width</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_height</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_depth</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>max_colors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a PICTURE metadata block of the given <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file. This function will try to skip any ID3v2 tag at the head of the file. Since there can be more than one PICTURE block in a file, this function takes a number of parameters that act as constraints to the search. The PICTURE block with the largest area matching all the constraints will be returned, or <emphasis>*picture</emphasis> will be set to <computeroutput>NULL</computeroutput> if there was no such block.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> file to read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>picture</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the returned pointer will be stored. The <emphasis>picture</emphasis> object must be deleted by the caller using <ref refid="group__flac__metadata__object_1ga66bbe27dba68ba77be5af83986a280ea" kindref="member">FLAC__metadata_object_delete()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired picture type. Use <computeroutput>-1</computeroutput> to mean &quot;any type&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mime_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired MIME type, e.g. &quot;image/jpeg&quot;. The string will be matched exactly. Use <computeroutput>NULL</computeroutput> to mean &quot;any MIME type&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired description. The string will be matched exactly. Use <computeroutput>NULL</computeroutput> to mean &quot;any
                   description&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_width</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum width in pixels desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any width&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_height</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum height in pixels desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any height&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum color depth in bits-per-pixel desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any depth&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_colors</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of colors desired. Use <computeroutput></computeroutput>(unsigned)(-1) to mean &quot;any number of colors&quot;.  <programlisting><codeline><highlight class="normal">filename<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> <programlisting><codeline><highlight class="normal">picture<sp/>!=<sp/>NULL<sp/></highlight></codeline>
</programlisting> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__bool</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>true</computeroutput> if a valid PICTURE block was read from <emphasis>filename</emphasis>, and <emphasis>*picture</emphasis> will be set to the address of the metadata structure. Returns <computeroutput>false</computeroutput> if there was a memory allocation error, a file decoder error, or the file contained no PICTURE block, and <emphasis>*picture</emphasis> will be set to <computeroutput>NULL</computeroutput>. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h" line="237" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/libFLAC/metadata_iterators.c" bodystart="268" bodyend="316"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The level 0 interface consists of individual routines to read the STREAMINFO, VORBIS_COMMENT, CUESHEET, and PICTURE blocks, requiring only a filename. </para>    </briefdescription>
    <detaileddescription>
<para>They try to skip any ID3v2 tag at the head of the file. </para>    </detaileddescription>
  </compounddef>
</doxygen>
