<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="libmad_2fixed_8h" kind="file" language="C++">
    <compoundname>fixed.h</compoundname>
    <includedby refid="libmad_2frame_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/frame.h</includedby>
    <includedby refid="synth_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/synth.h</includedby>
    <includedby refid="libmad_2fixed_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.c</includedby>
    <includedby refid="layer12_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c</includedby>
    <includedby refid="layer3_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer3.c</includedby>
    <includedby refid="synth_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/synth.c</includedby>
    <invincdepgraph>
      <node id="8085">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/decoder.c</label>
        <link refid="decoder_8c"/>
      </node>
      <node id="8087">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/decoder.h</label>
        <link refid="libmad_2decoder_8h"/>
        <childnode refid="8085" relation="include">
        </childnode>
      </node>
      <node id="8089">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/frame.c</label>
        <link refid="libmad_2frame_8c"/>
      </node>
      <node id="8084">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/frame.h</label>
        <link refid="libmad_2frame_8h"/>
        <childnode refid="8085" relation="include">
        </childnode>
        <childnode refid="8086" relation="include">
        </childnode>
        <childnode refid="8087" relation="include">
        </childnode>
        <childnode refid="8089" relation="include">
        </childnode>
        <childnode refid="8090" relation="include">
        </childnode>
        <childnode refid="8092" relation="include">
        </childnode>
        <childnode refid="8091" relation="include">
        </childnode>
        <childnode refid="8093" relation="include">
        </childnode>
        <childnode refid="8088" relation="include">
        </childnode>
      </node>
      <node id="8088">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/synth.c</label>
        <link refid="synth_8c"/>
      </node>
      <node id="8086">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/synth.h</label>
        <link refid="synth_8h"/>
        <childnode refid="8085" relation="include">
        </childnode>
        <childnode refid="8087" relation="include">
        </childnode>
        <childnode refid="8088" relation="include">
        </childnode>
      </node>
      <node id="8091">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.c</label>
        <link refid="layer12_8c"/>
      </node>
      <node id="8090">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer12.h</label>
        <link refid="layer12_8h"/>
        <childnode refid="8089" relation="include">
        </childnode>
        <childnode refid="8091" relation="include">
        </childnode>
      </node>
      <node id="8093">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer3.c</label>
        <link refid="layer3_8c"/>
      </node>
      <node id="8092">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/layer3.h</label>
        <link refid="layer3_8h"/>
        <childnode refid="8089" relation="include">
        </childnode>
        <childnode refid="8093" relation="include">
        </childnode>
      </node>
      <node id="8094">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.c</label>
        <link refid="libmad_2fixed_8c"/>
      </node>
      <node id="8083">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h</label>
        <link refid="libmad/fixed.h"/>
        <childnode refid="8084" relation="include">
        </childnode>
        <childnode refid="8086" relation="include">
        </childnode>
        <childnode refid="8094" relation="include">
        </childnode>
        <childnode refid="8091" relation="include">
        </childnode>
        <childnode refid="8093" relation="include">
        </childnode>
        <childnode refid="8088" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="libmad_2fixed_8h_1a283baa2bf012e39c892041bd3bc07479" prot="public" static="no">
        <name>mad_fixed64_t</name>
        <initializer>signed long long</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="40" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" prot="public" static="no">
        <name>MAD_F_FRACBITS</name>
        <initializer>28</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="72" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" prot="public" static="no">
        <name>MAD_F</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>) (x##L))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="75" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a03929035ef601782a50acba22aaa2dac" prot="public" static="no">
        <name>MAD_F_MIN</name>
        <initializer>((<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>) -0x80000000L)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="90" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a67652605773e172bfd88a59f900c5b4f" prot="public" static="no">
        <name>MAD_F_MAX</name>
        <initializer>((<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>) +0x7fffffffL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="91" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" prot="public" static="no">
        <name>MAD_F_ONE</name>
        <initializer><ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" kindref="member">MAD_F</ref>(0x10000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="93" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a6c173fe62613adbb98f65cedeabf54e0" prot="public" static="no">
        <name>mad_f_tofixed</name>
        <param><defname>x</defname></param>
        <initializer>((<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>)  \
				 ((x) * (double) (1L &lt;&lt; MAD_F_FRACBITS) + 0.5))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="95" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1ab89fbb463a905be3b71c39d148626d9c" prot="public" static="no">
        <name>mad_f_todouble</name>
        <param><defname>x</defname></param>
        <initializer>((double)  \
				 ((x) / (double) (1L &lt;&lt; MAD_F_FRACBITS)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="97" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1aa850442e41ebbdf423afc558e02f26fc" prot="public" static="no">
        <name>mad_f_intpart</name>
        <param><defname>x</defname></param>
        <initializer>((x) &gt;&gt; <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="100" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1adb451b6d7dd6c047fbdf93a2a95d1021" prot="public" static="no">
        <name>mad_f_fracpart</name>
        <param><defname>x</defname></param>
        <initializer>((x) &amp; ((1L &lt;&lt; MAD_F_FRACBITS) - 1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="101" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a4be984ff1bc37a93928705089668ee71" prot="public" static="no">
        <name>mad_f_fromint</name>
        <param><defname>x</defname></param>
        <initializer>((x) &lt;&lt; <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="104" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1aa39dad203617307f6d641f797516d871" prot="public" static="no">
        <name>mad_f_add</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x) + (y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="106" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a3836b9f2d266932db1192c4c5195298c" prot="public" static="no">
        <name>mad_f_sub</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((x) - (y))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="107" column="10" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" prot="public" static="no">
        <name>mad_f_mul</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>({ register <ref refid="libmad_2fixed_8h_1af59820b293fa7d6e0e6635c6efaa87d4" kindref="member">mad_fixed64hi_t</ref> __hi;  \
       register <ref refid="libmad_2fixed_8h_1aa1ccaf15864e44cc2af7dc922ddd9b10" kindref="member">mad_fixed64lo_t</ref> __lo;  \
       <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a32e96014bff64372e6ddda6449d2862a" kindref="member">MAD_F_MLX</ref>(__hi, __lo, (x), (y));  \
       <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1a836fb7fa861debac4b5fb4b1013ff309" kindref="member">mad_f_scale64</ref>(__hi, __lo);  \
    })</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="452" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1ad700e5599dd11accc3128356e2d975e8" prot="public" static="no">
        <name>MAD_F_ML0</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((lo)  = <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>((x), (y)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="461" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a770cce15186c32f6214d9dfcf6b79908" prot="public" static="no">
        <name>MAD_F_MLA</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((lo) += <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1ac424f0a810aae505036e63103f4a25af" kindref="member">mad_f_mul</ref>((x), (y)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="462" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="462" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a1ba57ecda7d303598c01041d47e5ddcb" prot="public" static="no">
        <name>MAD_F_MLN</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <initializer>((lo)  = -(lo))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="463" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="463" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a53482b2abc4dd4c38e03713e6ca100fd" prot="public" static="no">
        <name>MAD_F_MLZ</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <initializer>((<ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref>) (hi), (<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>) (lo))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="464" column="11" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1a836fb7fa861debac4b5fb4b1013ff309" prot="public" static="no">
        <name>mad_f_scale64</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <initializer>((<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>)  \
     (((hi) &lt;&lt; (32 - <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1aa0356c356ceced040bed036d0b4a2b2e" kindref="member">MAD_F_SCALEBITS</ref>)) |  \
      ((lo) &gt;&gt; <ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1aa0356c356ceced040bed036d0b4a2b2e" kindref="member">MAD_F_SCALEBITS</ref>)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="486" column="15" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="libmad_2fixed_8h_1aa0356c356ceced040bed036d0b4a2b2e" prot="public" static="no">
        <name>MAD_F_SCALEBITS</name>
        <initializer><ref refid="mac_2config_2i386_2lib-src_2libmad_2mad_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="491" column="14" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" prot="public" static="no">
        <type>signed long</type>
        <definition>typedef signed long mad_fixed_t</definition>
        <argsstring></argsstring>
        <name>mad_fixed_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="31" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="libmad_2fixed_8h_1af59820b293fa7d6e0e6635c6efaa87d4" prot="public" static="no">
        <type>signed long</type>
        <definition>typedef signed long mad_fixed64hi_t</definition>
        <argsstring></argsstring>
        <name>mad_fixed64hi_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="33" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="libmad_2fixed_8h_1aa1ccaf15864e44cc2af7dc922ddd9b10" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long mad_fixed64lo_t</definition>
        <argsstring></argsstring>
        <name>mad_fixed64lo_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="34" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="libmad_2fixed_8h_1a66d26474ecf238cb00458050afb95051" prot="public" static="no">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        <definition>typedef mad_fixed_t mad_sample_t</definition>
        <argsstring></argsstring>
        <name>mad_sample_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="46" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="libmad_2fixed_8h_1a466c2db0842244c4f7770db941c56029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        <definition>mad_fixed_t mad_f_abs</definition>
        <argsstring>(mad_fixed_t)</argsstring>
        <name>mad_f_abs</name>
        <param>
          <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="496" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.c" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="libmad_2fixed_8h_1a293b1aa0fd7234bb7cfe48528a5c91b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        <definition>mad_fixed_t mad_f_div</definition>
        <argsstring>(mad_fixed_t, mad_fixed_t)</argsstring>
        <name>mad_f_div</name>
        <param>
          <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        </param>
        <param>
          <type><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h" line="497" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.c" bodystart="43" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>libmad<sp/>-<sp/>MPEG<sp/>audio<sp/>decoder<sp/>library</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2000-2004<sp/>Underbit<sp/>Technologies,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>2<sp/>of<sp/>the<sp/>License,<sp/>or</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>this<sp/>program;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,<sp/>MA<sp/><sp/>02111-1307<sp/><sp/>USA</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>fixed.h,v<sp/>1.3<sp/>2008-02-02<sp/>11:37:37<sp/>richardash1981<sp/>Exp<sp/>$</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifndef<sp/>LIBMAD_FIXED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>LIBMAD_FIXED_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>SIZEOF_INT<sp/>&gt;=<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1af59820b293fa7d6e0e6635c6efaa87d4" kindref="member">mad_fixed64hi_t</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1aa1ccaf15864e44cc2af7dc922ddd9b10" kindref="member">mad_fixed64lo_t</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="libmad_2fixed_8h_1af59820b293fa7d6e0e6635c6efaa87d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1af59820b293fa7d6e0e6635c6efaa87d4" kindref="member">mad_fixed64hi_t</ref>;</highlight></codeline>
<codeline lineno="34" refid="libmad_2fixed_8h_1aa1ccaf15864e44cc2af7dc922ddd9b10" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1aa1ccaf15864e44cc2af7dc922ddd9b10" kindref="member">mad_fixed64lo_t</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_fixed64_t<sp/><sp/>signed<sp/>__int64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>1<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="libmad_2fixed_8h_1a283baa2bf012e39c892041bd3bc07479" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_fixed64_t<sp/><sp/>signed<sp/>long<sp/>long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(FPM_FLOAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1a66d26474ecf238cb00458050afb95051" kindref="member">mad_sample_t</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="libmad_2fixed_8h_1a66d26474ecf238cb00458050afb95051" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="libmad_2fixed_8h_1a66d26474ecf238cb00458050afb95051" kindref="member">mad_sample_t</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>Fixed-point<sp/>format:<sp/>0xABBBBBBB</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>A<sp/>==<sp/>whole<sp/>part<sp/><sp/><sp/><sp/><sp/><sp/>(sign<sp/>+<sp/>3<sp/>bits)</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>B<sp/>==<sp/>fractional<sp/>part<sp/>(28<sp/>bits)</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>Values<sp/>are<sp/>signed<sp/>two&apos;s<sp/>complement,<sp/>so<sp/>the<sp/>effective<sp/>range<sp/>is:</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*<sp/>0x80000000<sp/>to<sp/>0x7fffffff</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>-8.0<sp/>to<sp/>+7.9999999962747097015380859375</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>The<sp/>smallest<sp/>representable<sp/>value<sp/>is:</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>0x00000001<sp/>==<sp/>0.0000000037252902984619140625<sp/>(i.e.<sp/>about<sp/>3.725e-9)</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/>*<sp/>28<sp/>bits<sp/>of<sp/>fractional<sp/>accuracy<sp/>represent<sp/>about</highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/>*<sp/>8.6<sp/>digits<sp/>of<sp/>decimal<sp/>accuracy.</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>Fixed-point<sp/>numbers<sp/>can<sp/>be<sp/>added<sp/>or<sp/>subtracted<sp/>as<sp/>normal</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*<sp/>integers,<sp/>but<sp/>multiplication<sp/>requires<sp/>shifting<sp/>the<sp/>64-bit<sp/>result</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/>*<sp/>from<sp/>56<sp/>fractional<sp/>bits<sp/>back<sp/>to<sp/>28<sp/>(and<sp/>rounding.)</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>Changing<sp/>the<sp/>definition<sp/>of<sp/>MAD_F_FRACBITS<sp/>is<sp/>only<sp/>partially</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>supported,<sp/>and<sp/>must<sp/>be<sp/>done<sp/>with<sp/>care.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>MAD_F_FRACBITS<sp/><sp/><sp/><sp/><sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>MAD_F_FRACBITS<sp/>==<sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="libmad_2fixed_8h_1a15f8a99ff8c6449921db3c15e8b80ed5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F(x)<sp/><sp/><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/>(x##L))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>MAD_F_FRACBITS<sp/>&lt;<sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>warning<sp/>&quot;MAD_F_FRACBITS<sp/>&lt;<sp/>28&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>MAD_F(x)<sp/><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((x##L)<sp/>+<sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1L<sp/>&lt;&lt;<sp/>(28<sp/>-<sp/>MAD_F_FRACBITS<sp/>-<sp/>1)))<sp/>&gt;&gt;<sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(28<sp/>-<sp/>MAD_F_FRACBITS)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>MAD_F_FRACBITS<sp/>&gt;<sp/>28</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>error<sp/>&quot;MAD_F_FRACBITS<sp/>&gt;<sp/>28<sp/>not<sp/>currently<sp/>supported&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>MAD_F(x)<sp/><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x##L)<sp/>&lt;&lt;<sp/>(MAD_F_FRACBITS<sp/>-<sp/>28)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="libmad_2fixed_8h_1a03929035ef601782a50acba22aaa2dac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>MAD_F_MIN<sp/><sp/><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/>-0x80000000L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="libmad_2fixed_8h_1a67652605773e172bfd88a59f900c5b4f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>MAD_F_MAX<sp/><sp/><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/>+0x7fffffffL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="libmad_2fixed_8h_1a0e0af3bf1ae6bf41e8e25eaa5606beba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>MAD_F_ONE<sp/><sp/><sp/><sp/><sp/><sp/>MAD_F(0x10000000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="libmad_2fixed_8h_1a6c173fe62613adbb98f65cedeabf54e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_tofixed(x)<sp/><sp/><sp/>((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>*<sp/>(double)<sp/>(1L<sp/>&lt;&lt;<sp/>MAD_F_FRACBITS)<sp/>+<sp/>0.5))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="libmad_2fixed_8h_1ab89fbb463a905be3b71c39d148626d9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_todouble(x)<sp/><sp/>((double)<sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((x)<sp/>/<sp/>(double)<sp/>(1L<sp/>&lt;&lt;<sp/>MAD_F_FRACBITS)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="libmad_2fixed_8h_1aa850442e41ebbdf423afc558e02f26fc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_intpart(x)<sp/><sp/><sp/>((x)<sp/>&gt;&gt;<sp/>MAD_F_FRACBITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="libmad_2fixed_8h_1adb451b6d7dd6c047fbdf93a2a95d1021" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_fracpart(x)<sp/><sp/>((x)<sp/>&amp;<sp/>((1L<sp/>&lt;&lt;<sp/>MAD_F_FRACBITS)<sp/>-<sp/>1))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>(x<sp/>should<sp/>be<sp/>positive)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="libmad_2fixed_8h_1a4be984ff1bc37a93928705089668ee71" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_fromint(x)<sp/><sp/><sp/>((x)<sp/>&lt;&lt;<sp/>MAD_F_FRACBITS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="libmad_2fixed_8h_1aa39dad203617307f6d641f797516d871" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_add(x,<sp/>y)<sp/><sp/><sp/><sp/>((x)<sp/>+<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="libmad_2fixed_8h_1a3836b9f2d266932db1192c4c5195298c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>mad_f_sub(x,<sp/>y)<sp/><sp/><sp/><sp/>((x)<sp/>-<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(FPM_FLOAT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>&quot;FPM_FLOAT<sp/>not<sp/>yet<sp/>supported&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>MAD_F</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F(x)<sp/><sp/><sp/><sp/><sp/><sp/>mad_f_todouble(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/><sp/>((x)<sp/>*<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_scale64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>undef<sp/>ASO_ZEROCHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_64BIT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>This<sp/>version<sp/>should<sp/>be<sp/>the<sp/>most<sp/>accurate<sp/>if<sp/>64-bit<sp/>types<sp/>are<sp/>supported<sp/>by</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>the<sp/>compiler,<sp/>although<sp/>it<sp/>may<sp/>not<sp/>be<sp/>the<sp/>most<sp/>efficient.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>((((mad_fixed64_t)<sp/>(x)<sp/>*<sp/>(y))<sp/>+<sp/><sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1L<sp/>&lt;&lt;<sp/>(MAD_F_SCALEBITS<sp/>-<sp/>1)))<sp/>&gt;&gt;<sp/>MAD_F_SCALEBITS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/>(((mad_fixed64_t)<sp/>(x)<sp/>*<sp/>(y))<sp/>&gt;&gt;<sp/>MAD_F_SCALEBITS))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Intel<sp/>---------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_INTEL)<sp/>||<sp/>defined<sp/>(__i386__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>warning(disable:<sp/>4035)<sp/><sp/></highlight><highlight class="comment">/*<sp/>no<sp/>return<sp/>value<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>__forceinline</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>mad_f_mul_inline(<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>,<sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/>y)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>fracbits<sp/>=<sp/><ref refid="libmad_2fixed_8h_1afe9f395501b4973ab536c13fb8235944" kindref="member">MAD_F_FRACBITS</ref></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>__asm<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>mov<sp/>eax,<sp/>x</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>imul<sp/>y</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>shrd<sp/>eax,<sp/>edx,<sp/>fracbits</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>implicit<sp/>return<sp/>of<sp/>eax<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_mul<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_f_mul_inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_scale64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>This<sp/>Intel<sp/>version<sp/>is<sp/>fast<sp/>and<sp/>accurate;<sp/>the<sp/>disposition<sp/>of<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>significant<sp/>bit<sp/>depends<sp/>on<sp/>OPT_ACCURACY<sp/>via<sp/>mad_f_scale64().</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>MAD_F_MLX(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;imull<sp/>%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=a&quot;<sp/>(lo),<sp/>&quot;=d&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%a&quot;<sp/>(x),<sp/>&quot;rm&quot;<sp/>(y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>This<sp/>gives<sp/>best<sp/>accuracy<sp/>but<sp/>is<sp/>not<sp/>very<sp/>fast.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed64hi_t<sp/>__hi;<sp/><sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed64lo_t<sp/>__lo;<sp/><sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAD_F_MLX(__hi,<sp/>__lo,<sp/>(x),<sp/>(y));<sp/><sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;addl<sp/>%2,%0\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;adcl<sp/>%3,%1&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=rm&quot;<sp/>(lo),<sp/>&quot;=rm&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(__lo),<sp/>&quot;r&quot;<sp/>(__hi),<sp/>&quot;0&quot;<sp/>(lo),<sp/>&quot;1&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>OPT_ACCURACY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>Surprisingly,<sp/>this<sp/>is<sp/>faster<sp/>than<sp/>SHRD<sp/>followed<sp/>by<sp/>ADC.</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed64hi_t<sp/>__hi_;<sp/><sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed64lo_t<sp/>__lo_;<sp/><sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;addl<sp/>%4,%2\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;adcl<sp/>%5,%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=rm&quot;<sp/>(__lo_),<sp/>&quot;=rm&quot;<sp/>(__hi_)<sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;0&quot;<sp/>(lo),<sp/>&quot;1&quot;<sp/>(hi),<sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;ir&quot;<sp/>(1L<sp/>&lt;&lt;<sp/>(MAD_F_SCALEBITS<sp/>-<sp/>1)),<sp/>&quot;ir&quot;<sp/>(0)<sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;shrdl<sp/>%3,%2,%1&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=rm&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;0&quot;<sp/>(__lo_),<sp/>&quot;r&quot;<sp/>(__hi_),<sp/>&quot;I&quot;<sp/>(MAD_F_SCALEBITS)<sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>elif<sp/>defined(OPT_INTEL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>Alternate<sp/>Intel<sp/>scaling<sp/>that<sp/>may<sp/>or<sp/>may<sp/>not<sp/>perform<sp/>better.</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="216"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="217"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;shrl<sp/>%3,%1\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="218"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;shll<sp/>%4,%2\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;orl<sp/>%2,%1&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=rm&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;0&quot;<sp/>(lo),<sp/>&quot;r&quot;<sp/>(hi),<sp/><sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;I&quot;<sp/>(MAD_F_SCALEBITS),<sp/>&quot;I&quot;<sp/>(32<sp/>-<sp/>MAD_F_SCALEBITS)<sp/><sp/>\</highlight></codeline>
<codeline lineno="223"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="225"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="229"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;shrdl<sp/>%3,%2,%1&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="230"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=rm&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;0&quot;<sp/>(lo),<sp/>&quot;r&quot;<sp/>(hi),<sp/>&quot;I&quot;<sp/>(MAD_F_SCALEBITS)<sp/><sp/>\</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="233"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="234"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>endif<sp/><sp/></highlight><highlight class="comment">/*<sp/>OPT_ACCURACY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>ARM<sp/>-----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/>*<sp/>This<sp/>ARM<sp/>V4<sp/>version<sp/>is<sp/>as<sp/>accurate<sp/>as<sp/>FPM_64BIT<sp/>but<sp/>much<sp/>faster.<sp/>The</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>least<sp/>significant<sp/>bit<sp/>is<sp/>properly<sp/>rounded<sp/>at<sp/>no<sp/>CPU<sp/>cycle<sp/>cost!</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>faster<sp/>than<sp/>the<sp/>default<sp/>implementation<sp/>via<sp/>MAD_F_MLX()<sp/>and</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/>*<sp/>mad_f_scale64().</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed64hi_t<sp/>__hi;<sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed64lo_t<sp/>__lo;<sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;smull<sp/><sp/>%0,<sp/>%1,<sp/>%3,<sp/>%4\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="258"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;movs<sp/><sp/><sp/>%0,<sp/>%0,<sp/>lsr<sp/>%5\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="259"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;adc<sp/><sp/><sp/><sp/>%2,<sp/>%0,<sp/>%1,<sp/>lsl<sp/>%6&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=&amp;r&quot;<sp/>(__lo),<sp/>&quot;=&amp;r&quot;<sp/>(__hi),<sp/>&quot;=r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y),<sp/><sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;M&quot;<sp/>(MAD_F_SCALEBITS),<sp/>&quot;M&quot;<sp/>(32<sp/>-<sp/>MAD_F_SCALEBITS)<sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLX(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;smull<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=&amp;r&quot;<sp/>(lo),<sp/>&quot;=&amp;r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;smlal<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;+r&quot;<sp/>(lo),<sp/>&quot;+r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLN(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;rsbs<sp/><sp/>%0,<sp/>%2,<sp/>#0\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>&quot;rsc<sp/><sp/><sp/>%1,<sp/>%3,<sp/>#0&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(lo),<sp/>&quot;=r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;0&quot;<sp/>(lo),<sp/>&quot;1&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;movs<sp/><sp/><sp/>%0,<sp/>%1,<sp/>lsr<sp/>%3\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;adc<sp/><sp/><sp/><sp/>%0,<sp/>%0,<sp/>%2,<sp/>lsl<sp/>%4&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=&amp;r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(lo),<sp/>&quot;r&quot;<sp/>(hi),<sp/><sp/>\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;M&quot;<sp/>(MAD_F_SCALEBITS),<sp/>&quot;M&quot;<sp/>(32<sp/>-<sp/>MAD_F_SCALEBITS)<sp/><sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;cc&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="293"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>MIPS<sp/>----------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_MIPS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/>*<sp/>This<sp/>MIPS<sp/>version<sp/>is<sp/>fast<sp/>and<sp/>accurate;<sp/>the<sp/>disposition<sp/>of<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>significant<sp/>bit<sp/>depends<sp/>on<sp/>OPT_ACCURACY<sp/>via<sp/>mad_f_scale64().</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLX(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="307"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;mult<sp/><sp/>%2,%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="308"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=l&quot;<sp/>(lo),<sp/>&quot;=h&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="309"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(HAVE_MADD_ASM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="313"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;madd<sp/><sp/>%2,%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="314"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;+l&quot;<sp/>(lo),<sp/>&quot;+h&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="315"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(HAVE_MADD16_ASM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/>*<sp/>This<sp/>loses<sp/>significant<sp/>accuracy<sp/>due<sp/>to<sp/>the<sp/>16-bit<sp/>integer<sp/>limit<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/>*<sp/>multiply/accumulate<sp/>instruction.</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_ML0(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="322"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;mult<sp/><sp/>%2,%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="323"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=l&quot;<sp/>(lo),<sp/>&quot;=h&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="324"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>((x)<sp/>&gt;&gt;<sp/>12),<sp/>&quot;r&quot;<sp/>((y)<sp/>&gt;&gt;<sp/>16))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="326"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;madd16<sp/><sp/><sp/><sp/>%2,%3&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="327"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;+l&quot;<sp/>(lo),<sp/>&quot;+h&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="328"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>((x)<sp/>&gt;&gt;<sp/>12),<sp/>&quot;r&quot;<sp/>((y)<sp/>&gt;&gt;<sp/>16))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLZ(hi,<sp/>lo)<sp/><sp/>((mad_fixed_t)<sp/>(lo))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(OPT_SPEED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="334"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/>((hi)<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>MAD_F_SCALEBITS)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>SPARC<sp/>---------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_SPARC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="343"><highlight class="comment"><sp/>*<sp/>This<sp/>SPARC<sp/>V8<sp/>version<sp/>is<sp/>fast<sp/>and<sp/>accurate;<sp/>the<sp/>disposition<sp/>of<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/>*<sp/>significant<sp/>bit<sp/>depends<sp/>on<sp/>OPT_ACCURACY<sp/>via<sp/>mad_f_scale64().</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLX(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>asm<sp/>(&quot;smul<sp/>%2,<sp/>%3,<sp/>%0\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>&quot;rd<sp/>%%y,<sp/>%1&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(lo),<sp/>&quot;=r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;rI&quot;<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>PowerPC<sp/>-------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_PPC)<sp/>||<sp/>defined(__ppc__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="357"><highlight class="comment"><sp/>*<sp/>This<sp/>PowerPC<sp/>version<sp/>is<sp/>fast<sp/>and<sp/>accurate;<sp/>the<sp/>disposition<sp/>of<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/>*<sp/>significant<sp/>bit<sp/>depends<sp/>on<sp/>OPT_ACCURACY<sp/>via<sp/>mad_f_scale64().</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLX(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;mullw<sp/>%0,%1,%2&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y));<sp/><sp/>\</highlight></codeline>
<codeline lineno="365"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;mulhw<sp/>%0,%1,%2&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="366"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="367"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(x),<sp/>&quot;r&quot;<sp/>(y));<sp/><sp/>\</highlight></codeline>
<codeline lineno="368"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/>\</highlight></codeline>
<codeline lineno="369"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="373"><highlight class="comment"><sp/>*<sp/>This<sp/>gives<sp/>best<sp/>accuracy<sp/>but<sp/>is<sp/>not<sp/>very<sp/>fast.</highlight></codeline>
<codeline lineno="374"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed64hi_t<sp/>__hi;<sp/><sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_fixed64lo_t<sp/>__lo;<sp/><sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAD_F_MLX(__hi,<sp/>__lo,<sp/>(x),<sp/>(y));<sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;addc<sp/>%0,%2,%3\n\t&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;adde<sp/>%1,%4,%5&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(lo),<sp/>&quot;=r&quot;<sp/>(hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(lo),<sp/>&quot;r&quot;<sp/>(__lo),<sp/><sp/>\</highlight></codeline>
<codeline lineno="383"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;%r&quot;<sp/>(hi),<sp/>&quot;r&quot;<sp/>(__hi)<sp/><sp/>\</highlight></codeline>
<codeline lineno="384"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;xer&quot;);<sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>slower<sp/>than<sp/>the<sp/>truncating<sp/>version<sp/>below<sp/>it.</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed_t<sp/>__result,<sp/>__round;<sp/><sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;rotrwi<sp/>%0,%1,%2&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(lo),<sp/>&quot;i&quot;<sp/>(MAD_F_SCALEBITS));<sp/><sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;extrwi<sp/>%0,%1,1,0&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(__round)<sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(__result));<sp/><sp/>\</highlight></codeline>
<codeline lineno="400"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;insrwi<sp/>%0,%1,%2,0&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="401"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;+r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="402"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(hi),<sp/>&quot;i&quot;<sp/>(MAD_F_SCALEBITS));<sp/><sp/>\</highlight></codeline>
<codeline lineno="403"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;add<sp/>%0,%1,%2&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="404"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="405"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;%r&quot;<sp/>(__result),<sp/>&quot;r&quot;<sp/>(__round));<sp/><sp/>\</highlight></codeline>
<codeline lineno="406"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="407"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="410"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>mad_fixed_t<sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="411"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;rotrwi<sp/>%0,%1,%2&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="412"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;=r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="413"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(lo),<sp/>&quot;i&quot;<sp/>(MAD_F_SCALEBITS));<sp/><sp/>\</highlight></codeline>
<codeline lineno="414"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>asm<sp/>(&quot;insrwi<sp/>%0,%1,%2,0&quot;<sp/><sp/>\</highlight></codeline>
<codeline lineno="415"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;+r&quot;<sp/>(__result)<sp/><sp/>\</highlight></codeline>
<codeline lineno="416"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>&quot;r&quot;<sp/>(hi),<sp/>&quot;i&quot;<sp/>(MAD_F_SCALEBITS));<sp/><sp/>\</highlight></codeline>
<codeline lineno="417"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__result;<sp/><sp/>\</highlight></codeline>
<codeline lineno="418"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>---<sp/>Default<sp/>-------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(FPM_DEFAULT)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/>*<sp/>This<sp/>version<sp/>is<sp/>the<sp/>most<sp/>portable<sp/>but<sp/>it<sp/>loses<sp/>significant<sp/>accuracy.</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/>*<sp/>Furthermore,<sp/>accuracy<sp/>is<sp/>biased<sp/>against<sp/>the<sp/>second<sp/>argument,<sp/>so<sp/>care</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/>*<sp/>should<sp/>be<sp/>taken<sp/>when<sp/>ordering<sp/>operands.</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/>*<sp/>The<sp/>scale<sp/>factors<sp/>are<sp/>constant<sp/>as<sp/>this<sp/>is<sp/>not<sp/>used<sp/>with<sp/>SSO.</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="434"><highlight class="comment"><sp/>*<sp/>Pre-rounding<sp/>is<sp/>required<sp/>to<sp/>stay<sp/>within<sp/>the<sp/>limits<sp/>of<sp/>compliance.</highlight></codeline>
<codeline lineno="435"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(OPT_SPEED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>(((x)<sp/>&gt;&gt;<sp/>12)<sp/>*<sp/>((y)<sp/>&gt;&gt;<sp/>16))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>((((x)<sp/>+<sp/>(1L<sp/>&lt;&lt;<sp/>11))<sp/>&gt;&gt;<sp/>12)<sp/>*<sp/><sp/>\</highlight></codeline>
<codeline lineno="440"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((y)<sp/>+<sp/>(1L<sp/>&lt;&lt;<sp/>15))<sp/>&gt;&gt;<sp/>16))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>-------------------------------------------------------------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>error<sp/>&quot;no<sp/>FPM<sp/>selected&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>default<sp/>implementations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(mad_f_mul)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="libmad_2fixed_8h_1ac424f0a810aae505036e63103f4a25af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>mad_f_mul(x,<sp/>y)<sp/><sp/>\</highlight></codeline>
<codeline lineno="453"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>({<sp/>register<sp/>mad_fixed64hi_t<sp/>__hi;<sp/><sp/>\</highlight></codeline>
<codeline lineno="454"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>register<sp/>mad_fixed64lo_t<sp/>__lo;<sp/><sp/>\</highlight></codeline>
<codeline lineno="455"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAD_F_MLX(__hi,<sp/>__lo,<sp/>(x),<sp/>(y));<sp/><sp/>\</highlight></codeline>
<codeline lineno="456"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mad_f_scale64(__hi,<sp/>__lo);<sp/><sp/>\</highlight></codeline>
<codeline lineno="457"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(MAD_F_MLA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="libmad_2fixed_8h_1ad700e5599dd11accc3128356e2d975e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_ML0(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/><sp/>((lo)<sp/><sp/>=<sp/>mad_f_mul((x),<sp/>(y)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462" refid="libmad_2fixed_8h_1a770cce15186c32f6214d9dfcf6b79908" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLA(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/><sp/>((lo)<sp/>+=<sp/>mad_f_mul((x),<sp/>(y)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="libmad_2fixed_8h_1a1ba57ecda7d303598c01041d47e5ddcb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLN(hi,<sp/>lo)<sp/><sp/><sp/><sp/><sp/>((lo)<sp/><sp/>=<sp/>-(lo))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464" refid="libmad_2fixed_8h_1a53482b2abc4dd4c38e03713e6ca100fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLZ(hi,<sp/>lo)<sp/><sp/><sp/><sp/><sp/>((void)<sp/>(hi),<sp/>(mad_fixed_t)<sp/>(lo))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(MAD_F_ML0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_ML0(hi,<sp/>lo,<sp/>x,<sp/>y)<sp/><sp/><sp/>MAD_F_MLX((hi),<sp/>(lo),<sp/>(x),<sp/>(y))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(MAD_F_MLN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLN(hi,<sp/>lo)<sp/><sp/><sp/><sp/><sp/>((hi)<sp/>=<sp/>((lo)<sp/>=<sp/>-(lo))<sp/>?<sp/>~(hi)<sp/>:<sp/>-(hi))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(MAD_F_MLZ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_MLZ(hi,<sp/>lo)<sp/><sp/><sp/><sp/><sp/>mad_f_scale64((hi),<sp/>(lo))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>!defined(mad_f_scale64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(OPT_ACCURACY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((hi)<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>(MAD_F_SCALEBITS<sp/>-<sp/>1)))<sp/>|<sp/><sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((lo)<sp/>&gt;&gt;<sp/>(MAD_F_SCALEBITS<sp/>-<sp/>1))))<sp/>+<sp/>1)<sp/>&gt;&gt;<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="libmad_2fixed_8h_1a836fb7fa861debac4b5fb4b1013ff309" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>mad_f_scale64(hi,<sp/>lo)<sp/><sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>((mad_fixed_t)<sp/><sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(((hi)<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>MAD_F_SCALEBITS))<sp/>|<sp/><sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>((lo)<sp/>&gt;&gt;<sp/>MAD_F_SCALEBITS)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="libmad_2fixed_8h_1aa0356c356ceced040bed036d0b4a2b2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>MAD_F_SCALEBITS<sp/><sp/>MAD_F_FRACBITS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>C<sp/>routines<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="libmad_2fixed_8h_1a466c2db0842244c4f7770db941c56029" kindref="member">mad_f_abs</ref>(<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref><sp/><ref refid="libmad_2fixed_8h_1a293b1aa0fd7234bb7cfe48528a5c91b1" kindref="member">mad_f_div</ref>(<ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>,<sp/><ref refid="libmad_2fixed_8h_1a8a4b50d6d4d6827b7a8c871db1cbfd78" kindref="member">mad_fixed_t</ref>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libmad/fixed.h"/>
  </compounddef>
</doxygen>
