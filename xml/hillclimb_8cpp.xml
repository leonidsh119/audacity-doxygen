<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="hillclimb_8cpp" kind="file" language="C++">
    <compoundname>hillclimb.cpp</compoundname>
    <includes local="yes">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="sautils_8h" local="yes">sautils.h</includes>
    <includes refid="hillclimb_8h" local="yes">hillclimb.h</includes>
    <incdepgraph>
      <node id="19151">
        <label>stdlib.h</label>
      </node>
      <node id="19149">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp</label>
        <link refid="hillclimb.cpp"/>
        <childnode refid="19150" relation="include">
        </childnode>
        <childnode refid="19151" relation="include">
        </childnode>
        <childnode refid="19152" relation="include">
        </childnode>
        <childnode refid="19153" relation="include">
        </childnode>
      </node>
      <node id="19153">
        <label>hillclimb.h</label>
        <link refid="hillclimb_8h"/>
      </node>
      <node id="19152">
        <label>sautils.h</label>
        <link refid="sautils_8h"/>
      </node>
      <node id="19150">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="hillclimb_8cpp_1a8f986e3391cd4408813c047e67a1ec7b" prot="public" static="no">
        <name>HC_VERBOSE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp" line="35" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" prot="public" static="no">
        <name>V</name>
        <initializer><ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (<ref refid="hillclimb_8cpp_1a8f986e3391cd4408813c047e67a1ec7b" kindref="member">HC_VERBOSE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp" line="36" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/>hillclimb.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/><sp/>scorealign</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>by<sp/>Roger<sp/>Dannenberg<sp/>on<sp/>10/20/07.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/>Copyright<sp/>2007<sp/>__MyCompanyName__.<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Hillclimb<sp/>is<sp/>an<sp/>abstract<sp/>class<sp/>for<sp/>optimization.<sp/>It<sp/>models<sp/>problems<sp/>where</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>you<sp/>have<sp/>a<sp/>vector<sp/>of<sp/>parameters<sp/>(stored<sp/>as<sp/>an<sp/>array),<sp/>a<sp/>corresponding<sp/>set</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>of<sp/>step<sp/>sizes,<sp/>and<sp/>a<sp/>non-linear<sp/>function.<sp/>The<sp/>function<sp/>is<sp/>a<sp/>virtual</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>member<sp/>function<sp/>that<sp/>subclasses<sp/>must<sp/>implement.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>The<sp/>optimization<sp/>algorithm<sp/>is<sp/>as<sp/>follows:</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>An<sp/>initial<sp/>set<sp/>of<sp/>parameters<sp/>and<sp/>step<sp/>sizes<sp/>is<sp/>given.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>Estimate<sp/>the<sp/>partial<sp/>derivatives<sp/>with<sp/>respect<sp/>to<sp/>each<sp/>parameter<sp/>value</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>by<sp/>taking<sp/>a<sp/>step<sp/>along<sp/>that<sp/>dimension<sp/>(use<sp/>step<sp/>sizes<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>how<sp/>far<sp/>to<sp/>go)<sp/>and<sp/>calling<sp/>the<sp/>evaluate<sp/>virtual<sp/>function.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Find<sp/>the<sp/>parameter<sp/>that<sp/>causes<sp/>the<sp/>maximum<sp/>absolute<sp/>change.<sp/>If<sp/>the</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>change<sp/>is<sp/>positive<sp/>for<sp/>that<sp/>parameter,<sp/>take<sp/>the<sp/>step<sp/>along<sp/>that</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>dimension.<sp/>If<sp/>the<sp/>change<sp/>is<sp/>negative,<sp/>take<sp/>a<sp/>negative<sp/>step<sp/>along<sp/>that</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>dimension.<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>Repeat<sp/>the<sp/>previous<sp/>paragraph<sp/>as<sp/>long<sp/>as<sp/>the<sp/>result<sp/>of<sp/>evaluate<sp/>is</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>increasing.<sp/>When<sp/>it<sp/>stops,<sp/>you<sp/>are<sp/>at<sp/>the<sp/>top<sp/>of<sp/>a<sp/>hill,<sp/>a<sp/>local</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>maximum.</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sautils_8h" kindref="compound">sautils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hillclimb_8h" kindref="compound">hillclimb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="hillclimb_8cpp_1a8f986e3391cd4408813c047e67a1ec7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HC_VERBOSE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>V<sp/>if<sp/>(HC_VERBOSE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="class_hillclimb_1ace4a552772524a53439b9afd7cd2f286" refkind="member"><highlight class="normal"><ref refid="class_hillclimb_1ace4a552772524a53439b9afd7cd2f286" kindref="member">Hillclimb::~Hillclimb</ref>()</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>)<sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref>)<sp/><sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(<ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref>)<sp/><sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(<ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref>)<sp/><sp/><ref refid="xmlparse_8c_1a02048bf846e8bc87e3ce188e4957ef06" kindref="member">FREE</ref>(<ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="class_hillclimb_1a50c1aec7038960a624c729f449c722ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb_1a50c1aec7038960a624c729f449c722ab" kindref="member">Hillclimb::setup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref><sp/>=<sp/>n_;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref><sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref><sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref><sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref><sp/>=<sp/><ref refid="sautils_8h_1ade0072e12dad159bbf06858a91e47a8c" kindref="member">ALLOC</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="class_hillclimb_1ac2559b388e2eb870b051bf2985ddbb77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb_1ac2559b388e2eb870b051bf2985ddbb77" kindref="member">Hillclimb::set_parameters</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*<ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ss,<sp/></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*min_,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*max_,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>plen)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref><sp/>=<sp/><ref refid="xmltok_8h_1a94b60f3beb36ae85555d36dc9816769c" kindref="member">p</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref><sp/>=<sp/>ss;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref><sp/>=<sp/>min_;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref><sp/>=<sp/>max_;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref><sp/>=<sp/>plen;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>optimize<sp/>assumes<sp/>that<sp/>the<sp/>surface<sp/>is<sp/>smooth<sp/>enought<sp/>that<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/>*<sp/>function<sp/>decreases<sp/>when<sp/>parameter[i]<sp/>increases,<sp/>then<sp/>the<sp/>function<sp/>will</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>increase<sp/>when<sp/>parameter[i]<sp/>decreases.<sp/>The<sp/>alternative<sp/>version<sp/>does<sp/>more</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*<sp/>evaluation,<sp/>but<sp/>checks<sp/>in<sp/>both<sp/>directions<sp/>to<sp/>find<sp/>the<sp/>best<sp/>overall<sp/>move.</highlight></codeline>
<codeline lineno="70"><highlight class="comment"></highlight></codeline>
<codeline lineno="71"><highlight class="comment">double<sp/>Hillclimb::optimize()</highlight></codeline>
<codeline lineno="72"><highlight class="comment">{</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>double<sp/>best<sp/>=<sp/>evaluate();</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/><sp/><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;best<sp/>%g<sp/>&quot;,<sp/>best);</highlight></codeline>
<codeline lineno="76"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>eval<sp/>partial<sp/>derivatives</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>i;</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>variables<sp/>to<sp/>search<sp/>for<sp/>max<sp/>partial<sp/>derivative</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>max<sp/>=<sp/>0;<sp/>//<sp/>max<sp/>of<sp/>|dy|<sp/>so<sp/>far</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>max_i;<sp/>//<sp/>index<sp/>where<sp/>max<sp/>was<sp/>found</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>max_sign<sp/>=<sp/>1;<sp/>//<sp/>sign<sp/>of<sp/>dy</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>max_y;<sp/>//<sp/>value<sp/>of<sp/>evaluate()<sp/>at<sp/>max_i</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>now<sp/>search<sp/>over<sp/>all<sp/>parameters<sp/>for<sp/>max<sp/>change</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>sign<sp/>=<sp/>1;<sp/>//<sp/>sign<sp/>of<sp/>derivative<sp/>in<sp/>the<sp/>+step<sp/>direction</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>step_direction<sp/>=<sp/>1;<sp/>//<sp/>how<sp/>to<sp/>undo<sp/>parameter<sp/>variation</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[i]<sp/>+=<sp/>step_size[i];</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(parameters[i]<sp/>&gt;<sp/>max_param[i])<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>try<sp/>stepping<sp/>in<sp/>the<sp/>other<sp/>direction</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[i]<sp/>-=<sp/>step_size[i]<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>step_direction<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>y<sp/>=<sp/>evaluate();</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>restore<sp/>parameter<sp/>i</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[i]<sp/>-=<sp/>step_size[i]<sp/>*<sp/>step_direction;</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>dy<sp/>=<sp/>y<sp/>-<sp/>best;</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dy<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>-dy;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-sign;</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>is<sp/>this<sp/>the<sp/>best<sp/>yet<sp/>and<sp/>legal<sp/>move?</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>proposal<sp/>=<sp/>parameters[i]<sp/>+<sp/>step_size[i]<sp/>*<sp/>sign;</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dy<sp/>&gt;<sp/>max<sp/>&amp;&amp;<sp/>proposal<sp/>&lt;=<sp/>max_param[i]<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proposal<sp/>&gt;=<sp/>min_param[i])<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>dy;</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_i<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_sign<sp/>=<sp/>sign;</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>best<sp/>move<sp/>is<sp/>parameter<sp/>max_i<sp/>in<sp/>max_sign<sp/>direction</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[max_i]<sp/>+=<sp/>step_size[max_i]<sp/>*<sp/>max_sign;</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;moved<sp/>%d<sp/>to<sp/>%g&quot;,<sp/>max_i,<sp/>parameters[max_i]);</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>what&apos;s<sp/>the<sp/>value<sp/>now?<sp/>put<sp/>it<sp/>in<sp/>max_y</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(max_sign<sp/>==<sp/>-1)<sp/>max_y<sp/>=<sp/>evaluate();</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;<sp/>to<sp/>get<sp/>%g<sp/>(vs.<sp/>best<sp/>%g)\n&quot;,<sp/>max_y,<sp/>best);</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>otherwise,<sp/>max_y<sp/>already<sp/>has<sp/>the<sp/>new<sp/>value</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(max_y<sp/>&lt;=<sp/>best)<sp/>{<sp/>//<sp/>no<sp/>improvement,<sp/>we&apos;re<sp/>done</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parameters[max_i]<sp/>-=<sp/>step_size[max_i]<sp/>*<sp/>max_sign;</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\nCompleted<sp/>hillclimbing,<sp/>best<sp/>%g\n&quot;,<sp/>best);</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>best;</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>improvement<sp/>because<sp/>max_y<sp/>higher<sp/>than<sp/>best:</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>max_y;</highlight></codeline>
<codeline lineno="128"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="comment">}</highlight></codeline>
<codeline lineno="130"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="class_hillclimb_1a9f3cde5c805f98c0a4aa13163feb5305" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_hillclimb_1a9f3cde5c805f98c0a4aa13163feb5305" kindref="member">Hillclimb::optimize</ref>(<ref refid="hillclimb_8h_1aa31a227fc790865f54882e8f89dcee72" kindref="member">Report_fn_ptr</ref><sp/>report,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cookie)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>best<sp/>=<sp/><ref refid="class_hillclimb_1aedb448a03580fa41f659129384341913" kindref="member">evaluate</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*report)(cookie,<sp/>iterations,<sp/>best);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;best<sp/>%g<sp/>&quot;</highlight><highlight class="normal">,<sp/>best);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eval<sp/>partial<sp/>derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>variables<sp/>to<sp/>search<sp/>for<sp/>max<sp/>partial<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_y<sp/>=<sp/>best;<sp/></highlight><highlight class="comment">//<sp/>max<sp/>of<sp/>evaluate()<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_i<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>index<sp/>where<sp/>best<sp/>max<sp/>was<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>good<sp/>parameter<sp/>value<sp/>for<sp/>max_i:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max_parameter<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[0];<sp/></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>search<sp/>over<sp/>all<sp/>parameters<sp/>for<sp/>best<sp/>improvement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_hillclimb_1a416b75fa8b2d11b4617e3bd92c2c875d" kindref="member">n</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;optimize<sp/>at<sp/>%d<sp/>param<sp/>%g<sp/>&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>save_param<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>save_param<sp/>+<sp/><ref refid="class_hillclimb_1a37c6e7bc6fad83fcc894ede5fb3baada" kindref="member">step_size</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]<sp/>&lt;=<sp/><ref refid="class_hillclimb_1aaaf4fa646f0debedf44d76c77c6ab53a" kindref="member">max_param</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="class_hillclimb_1aedb448a03580fa41f659129384341913" kindref="member">evaluate</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;up-&gt;%g<sp/>&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>max_y)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;NEW<sp/>MAX!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_i<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_parameter<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>save_param<sp/>-<sp/>step_size[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[i]<sp/>&gt;=<sp/><ref refid="class_hillclimb_1a4f5e1bf831b1aba0025042d95d60f66e" kindref="member">min_param</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="class_hillclimb_1aedb448a03580fa41f659129384341913" kindref="member">evaluate</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;dn-&gt;%g<sp/>&quot;</highlight><highlight class="normal">,<sp/>y);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(y<sp/>&gt;<sp/>max_y)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;NEW<sp/>MAX!<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_y<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_i<sp/>=<sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_parameter<sp/>=<sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>save_param;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iterations++;<sp/></highlight><highlight class="comment">//<sp/>for<sp/>debugging,<sp/>reporting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_y<sp/>&lt;=<sp/>best)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>no<sp/>improvement,<sp/>we&apos;re<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hillclimb_8cpp_1af40a326b23c68a27cebe60f16634a2cb" kindref="member">V</ref><sp/><ref refid="octave__test_8m_1ac6d0e62c65e5715b13a5fcb381118888" kindref="member">printf</ref>(</highlight><highlight class="stringliteral">&quot;\nCompleted<sp/>hillclimbing,<sp/>best<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>best);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*report)(cookie,<sp/>iterations,<sp/>best);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>best;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>improvement<sp/>because<sp/>max_y<sp/>higher<sp/>than<sp/>best:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_hillclimb_1a227a3569c5b207d4305a78028d59b4eb" kindref="member">parameters</ref>[max_i]<sp/>=<sp/>max_parameter;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>best<sp/>=<sp/>max_y;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libscorealign/hillclimb.cpp"/>
  </compounddef>
</doxygen>
