<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="4-split-channels_8c" kind="file" language="C++">
    <compoundname>4-split-channels.c</compoundname>
    <includes refid="soxr_8h" local="no">soxr.h</includes>
    <includes refid="examples-common_8h" local="yes">examples-common.h</includes>
    <incdepgraph>
      <node id="21031">
        <label>stdlib.h</label>
      </node>
      <node id="21027">
        <label>errno.h</label>
      </node>
      <node id="21024">
        <label>stddef.h</label>
      </node>
      <node id="21026">
        <label>assert.h</label>
        <link refid="assert_8h"/>
      </node>
      <node id="21028">
        <label>limits.h</label>
      </node>
      <node id="21032">
        <label>string.h</label>
      </node>
      <node id="21029">
        <label>math.h</label>
      </node>
      <node id="21025">
        <label>examples-common.h</label>
        <link refid="examples-common_8h"/>
        <childnode refid="21026" relation="include">
        </childnode>
        <childnode refid="21027" relation="include">
        </childnode>
        <childnode refid="21028" relation="include">
        </childnode>
        <childnode refid="21029" relation="include">
        </childnode>
        <childnode refid="21024" relation="include">
        </childnode>
        <childnode refid="21030" relation="include">
        </childnode>
        <childnode refid="21031" relation="include">
        </childnode>
        <childnode refid="21032" relation="include">
        </childnode>
      </node>
      <node id="21022">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c</label>
        <link refid="4-split-channels.c"/>
        <childnode refid="21023" relation="include">
        </childnode>
        <childnode refid="21025" relation="include">
        </childnode>
      </node>
      <node id="21023">
        <label>soxr.h</label>
        <link refid="soxr_8h"/>
        <childnode refid="21024" relation="include">
        </childnode>
      </node>
      <node id="21030">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" prot="public" static="no">
        <name>DEINTERLEAVE</name>
        <param><defname>T</defname></param>
        <initializer>do { \
  unsigned <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>; \
  size_t j; \
  <ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> * <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> * dest = (<ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> * <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *)dest0; \
  <ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> * src = src0; \
  <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (ch == 1) memcpy(dest[0], src, n * sizeof(dest[0][0])); \
  else <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (j = 0; j &lt; n; ++j) <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> = 0; <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> &lt; ch; ++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>) dest[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j] = *src++; \
  <ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref>; \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="23" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" prot="public" static="no">
        <name>INTERLEAVE</name>
        <param><defname>T</defname></param>
        <initializer>do { \
  unsigned <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>; \
  size_t j; \
  <ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> * dest = dest0; \
  <ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> * <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> * src = (<ref refid="xmltchar_8h_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> * <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *)src0; \
  <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (ch == 1) memcpy(dest, src[0], n * sizeof(dest[0])); \
  else <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (j = 0; j &lt; n; ++j) <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> = 0; <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> &lt; ch; ++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>) *dest++ = src[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>][j]; \
  <ref refid="hashrout_8h_1a9842e92184417c07866419916b2b3ce3" kindref="member">return</ref>; \
} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="47" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="4-split-channels_8c_1a58c391d4fe581fb9e15cf5c89099f1d7" prot="public" static="no">
        <name>buf_total_len</name>
        <initializer>15000  /* <ref refid="devicetopology_8h_1aab6c7474a070d22bf61ccf21b532412fad8ff8dfc9381018e97fce86d909f8975" kindref="member">In</ref> <ref refid="test__w__saw8_8c_1a54185623a5a093f671a73e5fba6197a1" kindref="member">samples</ref> per channel. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="87" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="4-split-channels_8c_1a998d7e5628c95918be6f99bf8636e60a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void deinterleave</definition>
        <argsstring>(soxr_datatype_t data_type, void *const *dest0, void const *src0, size_t n, unsigned ch)</argsstring>
        <name>deinterleave</name>
        <param>
          <type><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref></type>
          <declname>data_type</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>dest0</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="33" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" bodystart="33" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="4-split-channels_8c_1a634508334c8b4f49bd84bbbcb19a440f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void interleave</definition>
        <argsstring>(soxr_datatype_t data_type, void *dest0, void *const *src0, size_t n, unsigned ch)</argsstring>
        <name>interleave</name>
        <param>
          <type><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref></type>
          <declname>data_type</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>dest0</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *<ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>src0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="57" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="4-split-channels_8c_1a2948288d5a202a7f1bec9085b62efce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int main</definition>
        <argsstring>(int n, char const *arg[])</argsstring>
        <name>main</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>char <ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> *</type>
          <declname>arg</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" line="69" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c" bodystart="69" bodyend="147"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>SoX<sp/>Resampler<sp/>Library<sp/><sp/><sp/><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2007-13<sp/>robs@users.sourceforge.net</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Licence<sp/>for<sp/>this<sp/>file:<sp/>LGPL<sp/>v2.1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>LICENCE<sp/>for<sp/>details.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Example<sp/>4:<sp/>variant<sp/>of<sp/>examples<sp/>2<sp/>&amp;<sp/>3,<sp/>demonstrating<sp/>I/O<sp/>with<sp/>split<sp/>channels.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Note<sp/>that,<sp/>for<sp/>convenience<sp/>of<sp/>the<sp/>demonstration,<sp/>split-channel<sp/>data<sp/>is</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>made<sp/>available<sp/>by<sp/>deinterleaving<sp/>data<sp/>sourced<sp/>from<sp/>and<sp/>sent<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>interleaved<sp/>file-streams;<sp/>this<sp/>adds<sp/>a<sp/>lot<sp/>of<sp/>code<sp/>to<sp/>the<sp/>example<sp/>that,</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>for<sp/>purposes<sp/>of<sp/>understanding<sp/>how<sp/>to<sp/>use<sp/>split-channels,<sp/>may<sp/>safely<sp/>be</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>ignored.<sp/><sp/>In<sp/>a<sp/>real<sp/>application,<sp/>the<sp/>channel-data<sp/>might<sp/>never<sp/>be</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>interleaved;<sp/>for<sp/>example,<sp/>the<sp/>split-channel<sp/>data<sp/>output<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>resampler<sp/>might<sp/>be<sp/>sent<sp/>directly<sp/>to<sp/>digital-to-analogue<sp/>converters.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>Note<sp/>also<sp/>(not<sp/>shown<sp/>in<sp/>the<sp/>examples)<sp/>that<sp/>split/interleaved<sp/>channels<sp/>may</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>be<sp/>used<sp/>for<sp/>input<sp/>and<sp/>output<sp/>independently.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="soxr_8h" kindref="compound">soxr.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="examples-common_8h" kindref="compound">examples-common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DEINTERLEAVE(T)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>j;<sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/>T<sp/>*<sp/>const<sp/>*<sp/>dest<sp/>=<sp/>(T<sp/>*<sp/>const<sp/>*)dest0;<sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="preprocessor"><sp/><sp/>T<sp/>const<sp/>*<sp/>src<sp/>=<sp/>src0;<sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"><sp/><sp/>if<sp/>(ch<sp/>==<sp/>1)<sp/>memcpy(dest[0],<sp/>src,<sp/>n<sp/>*<sp/>sizeof(dest[0][0]));<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/>else<sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ch;<sp/>++i)<sp/>dest[i][j]<sp/>=<sp/>*src++;<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>deinterleave(<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref><sp/>data_type,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>dest0,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>src0,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(data_type<sp/>&amp;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dad1716db1382f46a308b7df696bdbed45" kindref="member">SOXR_FLOAT32</ref>:<sp/><ref refid="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" kindref="member">DEINTERLEAVE</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dac4467d0142aa3f567a44b33c63c12a0e" kindref="member">SOXR_FLOAT64</ref>:<sp/><ref refid="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" kindref="member">DEINTERLEAVE</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66da1e90ac1fc35fe1d864887c287d4e45f4" kindref="member">SOXR_INT32</ref><sp/><sp/>:<sp/><ref refid="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" kindref="member">DEINTERLEAVE</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66da8fb4e6993616d8f31c387f6de0d6108c" kindref="member">SOXR_INT16</ref><sp/><sp/>:<sp/><ref refid="4-split-channels_8c_1ab84936e9b3df2f292408be493ee63d98" kindref="member">DEINTERLEAVE</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a044293bfeff56852a28ed6c2cfbb2649" kindref="member">int16_t</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INTERLEAVE(T)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>unsigned<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/>size_t<sp/>j;<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/>T<sp/>*<sp/>dest<sp/>=<sp/>dest0;<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/>T<sp/>const<sp/>*<sp/>const<sp/>*<sp/>src<sp/>=<sp/>(T<sp/>const<sp/>*<sp/>const<sp/>*)src0;<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/>if<sp/>(ch<sp/>==<sp/>1)<sp/>memcpy(dest,<sp/>src[0],<sp/>n<sp/>*<sp/>sizeof(dest[0]));<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/>else<sp/>for<sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>n;<sp/>++j)<sp/>for<sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>ch;<sp/>++i)<sp/>*dest++<sp/>=<sp/>src[i][j];<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/>return;<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>interleave(<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref><sp/>data_type,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>dest0,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>src0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>ch)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(data_type<sp/>&amp;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dad1716db1382f46a308b7df696bdbed45" kindref="member">SOXR_FLOAT32</ref>:<sp/><ref refid="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" kindref="member">INTERLEAVE</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dac4467d0142aa3f567a44b33c63c12a0e" kindref="member">SOXR_FLOAT64</ref>:<sp/><ref refid="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" kindref="member">INTERLEAVE</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66da1e90ac1fc35fe1d864887c287d4e45f4" kindref="member">SOXR_INT32</ref><sp/><sp/>:<sp/><ref refid="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" kindref="member">INTERLEAVE</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a37994e3b11c72957c6f454c6ec96d43d" kindref="member">int32_t</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66da8fb4e6993616d8f31c387f6de0d6108c" kindref="member">SOXR_INT16</ref><sp/><sp/>:<sp/><ref refid="4-split-channels_8c_1a3b15b8193f64337386cd05ba8f89b565" kindref="member">INTERLEAVE</ref>(<ref refid="lib-src_2ffmpeg_2win32_2stdint_8h_1a044293bfeff56852a28ed6c2cfbb2649" kindref="member">int16_t</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="4-split-channels_8c_1a2948288d5a202a7f1bec9085b62efce2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="4-split-channels_8c_1a2948288d5a202a7f1bec9085b62efce2" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>arg[])</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>arg0<sp/>=<sp/>n?<sp/>--n,<sp/>*arg++<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>irate<sp/>=<sp/>n?<sp/>--n,<sp/><ref refid="xlread_8c_1ad37d469faf1f38a3c35d1253575a513a" kindref="member">atof</ref>(*arg++)<sp/>:<sp/>96000.;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>orate<sp/>=<sp/>n?<sp/>--n,<sp/><ref refid="xlread_8c_1ad37d469faf1f38a3c35d1253575a513a" kindref="member">atof</ref>(*arg++)<sp/>:<sp/>44100.;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>chans<sp/>=<sp/>n?<sp/>--n,<sp/>(unsigned)atoi(*arg++)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>itype<sp/>=<sp/>n?<sp/>--n,<sp/>(<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref>)atoi(*arg++)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>otype<sp/>=<sp/>n?<sp/>--n,<sp/>(<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66d" kindref="member">soxr_datatype_t</ref>)atoi(*arg++)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q_recipe=<sp/>n?<sp/>--n,<sp/>strtoul(*arg++,<sp/>0,<sp/>16)<sp/>:<sp/><ref refid="soxr_8h_1aea42ded9f1863b84c90e95de3b250a9b" kindref="member">SOXR_HQ</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q_flags<sp/>=<sp/>n?<sp/>--n,<sp/>strtoul(*arg++,<sp/>0,<sp/>16)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>use_threads<sp/>=<sp/>n?<sp/>--n,<sp/>atoi(*arg++)<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="structsoxr__quality__spec" kindref="compound">soxr_quality_spec_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>q_spec<sp/>=<sp/><ref refid="soxr_8c_1a8bc34e71491e5ab698dcccdfc06c7ad8" kindref="member">soxr_quality_spec</ref>(q_recipe,<sp/>q_flags);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="structsoxr__io__spec" kindref="compound">soxr_io_spec_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>io_spec=<ref refid="soxr_8c_1a6003249f89c7705eef58d69f0afae011" kindref="member">soxr_io_spec</ref>(itype|<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dab990a97e8f13eecb9886d91af4e2a67c" kindref="member">SOXR_SPLIT</ref>,<sp/>otype|<ref refid="soxr_8h_1ac648d3d2dd7b1988e631d6205e73f66dab990a97e8f13eecb9886d91af4e2a67c" kindref="member">SOXR_SPLIT</ref>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="structsoxr__runtime__spec" kindref="compound">soxr_runtime_spec_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>runtime_spec<sp/>=<sp/><ref refid="soxr_8c_1adef2594d0bbe957075423c9450477fc2" kindref="member">soxr_runtime_spec</ref>(!use_threads);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>resampling<sp/>input<sp/>and<sp/>output<sp/>buffers<sp/>in<sp/>proportion<sp/>to<sp/>the<sp/>input</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/>*<sp/>and<sp/>output<sp/>rates:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>buf_total_len<sp/>15000<sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>samples<sp/>per<sp/>channel.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>osize<sp/>=<sp/><ref refid="soxr_8h_1ace5ac3572ab64ec7d335f5e278a446e4" kindref="member">soxr_datatype_size</ref>(otype)<sp/>*<sp/>chans;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>isize<sp/>=<sp/><ref refid="soxr_8h_1ace5ac3572ab64ec7d335f5e278a446e4" kindref="member">soxr_datatype_size</ref>(itype)<sp/>*<sp/>chans;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>olen<sp/>=<sp/>(size_t)(orate<sp/>*<sp/><ref refid="4-split-channels_8c_1a58c391d4fe581fb9e15cf5c89099f1d7" kindref="member">buf_total_len</ref><sp/>/<sp/>(irate<sp/>+<sp/>orate)<sp/>+<sp/>.5);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ilen<sp/>=<sp/><ref refid="4-split-channels_8c_1a58c391d4fe581fb9e15cf5c89099f1d7" kindref="member">buf_total_len</ref><sp/>-<sp/>olen;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>split<sp/>channels:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>obuf_ptrs<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>chans);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ibuf_ptrs<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>*<sp/>chans);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>obufs<sp/>=<sp/>malloc(osize<sp/>*<sp/>olen),<sp/>*<sp/>optr<sp/>=<sp/>obufs;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ibufs<sp/>=<sp/>malloc(isize<sp/>*<sp/>ilen),<sp/>*<sp/>iptr<sp/>=<sp/>ibufs;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>interleaved<sp/>channels:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>obuf<sp/>=<sp/>malloc(osize<sp/>*<sp/>olen);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ibuf<sp/>=<sp/>malloc(isize<sp/>*<sp/>ilen);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>odone,<sp/>written,<sp/>need_input<sp/>=<sp/>1,<sp/>clips<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><ref refid="soxr_8h_1a9c0f6f8249a04c1ccb71881e2b0b6937" kindref="member">soxr_error_t</ref><sp/><ref refid="sndfile__load_8m_1a3a81ee160b23b01b04b7c08b35123218" kindref="member">error</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="structsoxr" kindref="compound">soxr_t</ref><sp/><ref refid="structsoxr" kindref="compound">soxr</ref><sp/>=<sp/><ref refid="soxr_8c_1a763983e4a1f00869383ba22421b768e5" kindref="member">soxr_create</ref>(</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>irate,<sp/>orate,<sp/>chans,<sp/>&amp;error,<sp/>&amp;io_spec,<sp/>&amp;q_spec,<sp/>&amp;runtime_spec);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chans;<sp/>++<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ibuf_ptrs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>iptr;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>obuf_ptrs[<ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>]<sp/>=<sp/>optr;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>iptr<sp/>+=<sp/>ilen<sp/>*<sp/><ref refid="soxr_8h_1ace5ac3572ab64ec7d335f5e278a446e4" kindref="member">soxr_datatype_size</ref>(itype);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>optr<sp/>+=<sp/>olen<sp/>*<sp/><ref refid="soxr_8h_1ace5ac3572ab64ec7d335f5e278a446e4" kindref="member">soxr_datatype_size</ref>(otype);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!error)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="examples-common_8h_1ae8f98482924f7cbfd7a7b7f926b9bb17" kindref="member">USE_STD_STDIO</ref>;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ilen1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(need_input)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ilen1<sp/>=<sp/>fread(ibuf,<sp/>isize,<sp/>ilen,<sp/>stdin)))</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(ibuf_ptrs),<sp/>ibuf_ptrs<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">/*<sp/>If<sp/>none<sp/>available,<sp/>don&apos;t<sp/>retry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>deinterleave(itype,<sp/>ibuf_ptrs,<sp/>ibuf,<sp/>ilen1,<sp/>chans);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>error<sp/>=<sp/><ref refid="soxr_8c_1a853769187cb96f9e89aadcfe8a0deb10" kindref="member">soxr_process</ref>(soxr,<sp/>ibuf_ptrs,<sp/>ilen1,<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>,<sp/>obuf_ptrs,<sp/>olen,<sp/>&amp;odone);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>interleave(otype,<sp/>obuf,<sp/>obuf_ptrs,<sp/>odone,<sp/>chans);<sp/><sp/></highlight><highlight class="comment">/*<sp/>Consume<sp/>output...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>written<sp/>=<sp/>fwrite(obuf,<sp/>osize,<sp/>odone,<sp/><ref refid="namespacewaflib_1_1ansiterm_1acf95a6e21629de2ca2b5716f5089f3f0" kindref="member">stdout</ref>);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>need_input<sp/>=<sp/>odone<sp/>&lt;<sp/>olen<sp/>&amp;&amp;<sp/>ibuf_ptrs;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!error<sp/>&amp;&amp;<sp/>(need_input<sp/>||<sp/>written));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>clips<sp/>=<sp/>*<ref refid="soxr_8c_1ab2ae956aeb86e03efb5c068a6bb52955" kindref="member">soxr_num_clips</ref>(soxr);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can<sp/>occur<sp/>only<sp/>with<sp/>integer<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tidy<sp/>up:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><ref refid="soxr_8c_1af3bff5e9b256197fd02730fea110a5ea" kindref="member">soxr_delete</ref>(soxr);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>free(obuf),<sp/>free(ibuf),<sp/>free(obufs),<sp/>free(ibufs);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>free(obuf_ptrs),<sp/>free(ibuf_ptrs);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Diagnostics:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>fprintf(<ref refid="namespacewaflib_1_1ansiterm_1a44bedfddf1392d636441272f5f3c95d4" kindref="member">stderr</ref>,<sp/></highlight><highlight class="stringliteral">&quot;%-26s<sp/>%s;<sp/>%lu<sp/>clips;<sp/>I/O:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>arg0,<sp/><ref refid="soxr_8h_1a2f44b4b77b6b4f69d9b4fae79c14bcea" kindref="member">soxr_strerror</ref>(error),</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)clips,<sp/>errno?<sp/>strerror(errno)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error<sp/>||<sp/>errno;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/examples/4-split-channels.c"/>
  </compounddef>
</doxygen>
