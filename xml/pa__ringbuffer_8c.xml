<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="pa__ringbuffer_8c" kind="file" language="C++">
    <compoundname>pa_ringbuffer.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="pa__ringbuffer_8h" local="yes">pa_ringbuffer.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="pa__memorybarrier_8h" local="yes">pa_memorybarrier.h</includes>
    <incdepgraph>
      <node id="29561">
        <label>stdlib.h</label>
      </node>
      <node id="29564">
        <label>string.h</label>
      </node>
      <node id="29559">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c</label>
        <link refid="pa_ringbuffer.c"/>
        <childnode refid="29560" relation="include">
        </childnode>
        <childnode refid="29561" relation="include">
        </childnode>
        <childnode refid="29562" relation="include">
        </childnode>
        <childnode refid="29563" relation="include">
        </childnode>
        <childnode refid="29564" relation="include">
        </childnode>
        <childnode refid="29565" relation="include">
        </childnode>
      </node>
      <node id="29563">
        <label>pa_ringbuffer.h</label>
        <link refid="pa__ringbuffer_8h"/>
      </node>
      <node id="29562">
        <label>math.h</label>
      </node>
      <node id="29565">
        <label>pa_memorybarrier.h</label>
        <link refid="pa__memorybarrier_8h"/>
      </node>
      <node id="29560">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pa__ringbuffer_8c_1ac59abf83ad9ad72e1971ac406b0e67a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_InitializeRingBuffer</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, ring_buffer_size_t elementSizeBytes, ring_buffer_size_t elementCount, void *dataPtr)</argsstring>
        <name>PaUtil_InitializeRingBuffer</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementSizeBytes</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>dataPtr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize Ring Buffer to empty state ready to have elements written to it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementSizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of a single data element in bytes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements in the buffer (must be a power of 2).</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a previously allocated area where the data will be maintained. It must be elementCount*elementSizeBytes long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if elementCount is not a power of 2, otherwise 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="66" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a40786e9932b9f988be2accfce19d5ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_GetRingBufferReadAvailable</definition>
        <argsstring>(const PaUtilRingBuffer *rbuf)</argsstring>
        <name>PaUtil_GetRingBufferReadAvailable</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the number of elements available in the ring buffer for reading.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements available for reading. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="80" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1af53b4365e12a70524fd4ca0d59476097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_GetRingBufferWriteAvailable</definition>
        <argsstring>(const PaUtilRingBuffer *rbuf)</argsstring>
        <name>PaUtil_GetRingBufferWriteAvailable</name>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the number of elements available in the ring buffer for writing.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements available for writing. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="86" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a5d0da19fd934ad23afe8bafebfdc81e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>void PaUtil_FlushRingBuffer</definition>
        <argsstring>(PaUtilRingBuffer *rbuf)</argsstring>
        <name>PaUtil_FlushRingBuffer</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset buffer to empty. Should only be called when buffer is NOT being read or written.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="93" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a5c0ed00cc826518012a780544c31b31e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_GetRingBufferWriteRegions</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, ring_buffer_size_t elementCount, void **dataPtr1, ring_buffer_size_t *sizePtr1, void **dataPtr2, ring_buffer_size_t *sizePtr2)</argsstring>
        <name>PaUtil_GetRingBufferWriteRegions</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>dataPtr1</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref> *</type>
          <declname>sizePtr1</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>dataPtr2</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref> *</type>
          <declname>sizePtr2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of region(s) to which we can write data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements desired.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr1</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the first (or only) region pointer will be stored.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizePtr1</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the first (or only) region length will be stored.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the second region pointer will be stored if the first region is too small to satisfy elementCount.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizePtr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the second region length will be stored if the first region is too small to satisfy elementCount.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The room available to be written or elementCount, whichever is smaller. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="104" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="104" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1ad38033c3d1cef68a44b7ccb0cf318236" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_AdvanceRingBufferWriteIndex</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, ring_buffer_size_t elementCount)</argsstring>
        <name>PaUtil_AdvanceRingBufferWriteIndex</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance the write index to the next location to be written.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to advance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new position. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="139" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="139" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a0e1ef06e0ee328c9da54755cf889913d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_GetRingBufferReadRegions</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, ring_buffer_size_t elementCount, void **dataPtr1, ring_buffer_size_t *sizePtr1, void **dataPtr2, ring_buffer_size_t *sizePtr2)</argsstring>
        <name>PaUtil_GetRingBufferReadRegions</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>dataPtr1</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref> *</type>
          <declname>sizePtr1</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> **</type>
          <declname>dataPtr2</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref> *</type>
          <declname>sizePtr2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of region(s) from which we can read data.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements desired.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr1</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the first (or only) region pointer will be stored.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizePtr1</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the first (or only) region length will be stored.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataPtr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the second region pointer will be stored if the first region is too small to satisfy elementCount.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sizePtr2</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the second region length will be stored if the first region is too small to satisfy elementCount.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements available for reading. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="154" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="154" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a7acc44292930d2911445b41f982a6a73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_AdvanceRingBufferReadIndex</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, ring_buffer_size_t elementCount)</argsstring>
        <name>PaUtil_AdvanceRingBufferReadIndex</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Advance the read index to the next location to be read.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to advance.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new position. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="187" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="187" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1a2767b217dc115e4f20db8ea206ca9520" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_WriteRingBuffer</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, const void *data, ring_buffer_size_t elementCount)</argsstring>
        <name>PaUtil_WriteRingBuffer</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> <ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write data to the ring buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of new data to write to the buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to be written.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements written. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="198" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="198" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="pa__ringbuffer_8c_1af6d879da3efb3894ef3956310bb3918e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
        <definition>ring_buffer_size_t PaUtil_ReadRingBuffer</definition>
        <argsstring>(PaUtilRingBuffer *rbuf, void *data, ring_buffer_size_t elementCount)</argsstring>
        <name>PaUtil_ReadRingBuffer</name>
        <param>
          <type><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref> *</type>
          <declname>rbuf</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref></type>
          <declname>elementCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read data from the ring buffer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>The ring buffer.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The address where the data should be stored.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elementCount</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements to be read.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of elements read. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" line="220" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c" bodystart="220" bodyend="237"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>$Id:<sp/>pa_ringbuffer.c<sp/>1738<sp/>2011-08-18<sp/>11:47:28Z<sp/>rossb<sp/>$</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Portable<sp/>Audio<sp/>I/O<sp/>Library</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Ring<sp/>Buffer<sp/>utility.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Author:<sp/>Phil<sp/>Burk,<sp/>http://www.softsynth.com</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>modified<sp/>for<sp/>SMP<sp/>safety<sp/>on<sp/>Mac<sp/>OS<sp/>X<sp/>by<sp/>Bjorn<sp/>Roche</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>modified<sp/>for<sp/>SMP<sp/>safety<sp/>on<sp/>Linux<sp/>by<sp/>Leland<sp/>Lucius</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>also,<sp/>allowed<sp/>for<sp/>const<sp/>where<sp/>possible</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modified<sp/>for<sp/>multiple-byte-sized<sp/>data<sp/>elements<sp/>by<sp/>Sven<sp/>Fischer<sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>safe<sp/>only<sp/>for<sp/>a<sp/>single-thread<sp/>reader<sp/>and<sp/>a</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>single-thread<sp/>writer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>This<sp/>program<sp/>uses<sp/>the<sp/>PortAudio<sp/>Portable<sp/>Audio<sp/>Library.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>For<sp/>more<sp/>information<sp/>see:<sp/>http://www.portaudio.com</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>1999-2000<sp/>Ross<sp/>Bencina<sp/>and<sp/>Phil<sp/>Burk</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>a<sp/>copy<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of<sp/>the<sp/>Software,</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>included<sp/>in<sp/>all<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>The<sp/>text<sp/>above<sp/>constitutes<sp/>the<sp/>entire<sp/>PortAudio<sp/>license;<sp/>however,<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*<sp/>the<sp/>PortAudio<sp/>community<sp/>also<sp/>makes<sp/>the<sp/>following<sp/>non-binding<sp/>requests:</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*<sp/>Any<sp/>person<sp/>wishing<sp/>to<sp/>distribute<sp/>modifications<sp/>to<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/>*<sp/>requested<sp/>to<sp/>send<sp/>the<sp/>modifications<sp/>to<sp/>the<sp/>original<sp/>developer<sp/>so<sp/>that</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/>*<sp/>they<sp/>can<sp/>be<sp/>incorporated<sp/>into<sp/>the<sp/>canonical<sp/>version.<sp/>It<sp/>is<sp/>also<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>requested<sp/>that<sp/>these<sp/>non-binding<sp/>requests<sp/>be<sp/>included<sp/>along<sp/>with<sp/>the<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>license<sp/>above.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__ringbuffer_8h" kindref="compound">pa_ringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pa__memorybarrier_8h" kindref="compound">pa_memorybarrier.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/>*<sp/>Initialize<sp/>FIFO.</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/>*<sp/>elementCount<sp/>must<sp/>be<sp/>power<sp/>of<sp/>2,<sp/>returns<sp/>-1<sp/>if<sp/>not.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="pa__ringbuffer_8h_1ac59abf83ad9ad72e1971ac406b0e67a8" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1ac59abf83ad9ad72e1971ac406b0e67a8" kindref="member">PaUtil_InitializeRingBuffer</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementSizeBytes,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dataPtr<sp/>)</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>((elementCount-1)<sp/>&amp;<sp/>elementCount)<sp/>!=<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>Power<sp/>of<sp/>two.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>=<sp/>elementCount;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)dataPtr;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8c_1a5d0da19fd934ad23afe8bafebfdc81e7" kindref="member">PaUtil_FlushRingBuffer</ref>(<sp/>rbuf<sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a15f2f074f86d67747ac3d7cddd722d3e" kindref="member">bigMask</ref><sp/>=<sp/>(elementCount*2)-1;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a852c77d20c925439882cdb4dc9d1c0c9" kindref="member">smallMask</ref><sp/>=<sp/>(elementCount)-1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>=<sp/>elementSizeBytes;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="79"><highlight class="comment">**<sp/>Return<sp/>number<sp/>of<sp/>elements<sp/>available<sp/>for<sp/>reading.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="pa__ringbuffer_8h_1a40786e9932b9f988be2accfce19d5ea4" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1a40786e9932b9f988be2accfce19d5ea4" kindref="member">PaUtil_GetRingBufferReadAvailable</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ad2ae4e486eca6d273eed2e06f1d57aec" kindref="member">writeIndex</ref><sp/>-<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1aae25b99beddc44ae0efe8ae2ef341401" kindref="member">readIndex</ref>)<sp/>&amp;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a15f2f074f86d67747ac3d7cddd722d3e" kindref="member">bigMask</ref><sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="85"><highlight class="comment">**<sp/>Return<sp/>number<sp/>of<sp/>elements<sp/>available<sp/>for<sp/>writing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="pa__ringbuffer_8h_1af53b4365e12a70524fd4ca0d59476097" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1af53b4365e12a70524fd4ca0d59476097" kindref="member">PaUtil_GetRingBufferWriteAvailable</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>-<sp/><ref refid="pa__ringbuffer_8c_1a40786e9932b9f988be2accfce19d5ea4" kindref="member">PaUtil_GetRingBufferReadAvailable</ref>(rbuf));</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="92"><highlight class="comment">**<sp/>Clear<sp/>buffer.<sp/>Should<sp/>only<sp/>be<sp/>called<sp/>when<sp/>buffer<sp/>is<sp/>NOT<sp/>being<sp/>read<sp/>or<sp/>written.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="pa__ringbuffer_8h_1a5d0da19fd934ad23afe8bafebfdc81e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="pa__ringbuffer_8c_1a5d0da19fd934ad23afe8bafebfdc81e7" kindref="member">PaUtil_FlushRingBuffer</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf<sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ad2ae4e486eca6d273eed2e06f1d57aec" kindref="member">writeIndex</ref><sp/>=<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1aae25b99beddc44ae0efe8ae2ef341401" kindref="member">readIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="99"><highlight class="comment">**<sp/>Get<sp/>address<sp/>of<sp/>region(s)<sp/>to<sp/>which<sp/>we<sp/>can<sp/>write<sp/>data.</highlight></codeline>
<codeline lineno="100"><highlight class="comment">**<sp/>If<sp/>the<sp/>region<sp/>is<sp/>contiguous,<sp/>size2<sp/>will<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="101"><highlight class="comment">**<sp/>If<sp/>non-contiguous,<sp/>size2<sp/>will<sp/>be<sp/>the<sp/>size<sp/>of<sp/>second<sp/>region.</highlight></codeline>
<codeline lineno="102"><highlight class="comment">**<sp/>Returns<sp/>room<sp/>available<sp/>to<sp/>be<sp/>written<sp/>or<sp/>elementCount,<sp/>whichever<sp/>is<sp/>smaller.</highlight></codeline>
<codeline lineno="103"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="pa__ringbuffer_8h_1a5c0ed00cc826518012a780544c31b31e" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1a5c0ed00cc826518012a780544c31b31e" kindref="member">PaUtil_GetRingBufferWriteRegions</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**dataPtr1,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>*sizePtr1,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**dataPtr2,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>*sizePtr2<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><sp/><sp/>index;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><sp/><sp/>available<sp/>=<sp/><ref refid="pa__ringbuffer_8c_1af53b4365e12a70524fd4ca0d59476097" kindref="member">PaUtil_GetRingBufferWriteAvailable</ref>(<sp/>rbuf<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>elementCount<sp/>&gt;<sp/>available<sp/>)<sp/>elementCount<sp/>=<sp/>available;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>write<sp/>is<sp/>not<sp/>contiguous.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ad2ae4e486eca6d273eed2e06f1d57aec" kindref="member">writeIndex</ref><sp/>&amp;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a852c77d20c925439882cdb4dc9d1c0c9" kindref="member">smallMask</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(index<sp/>+<sp/>elementCount)<sp/>&gt;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>data<sp/>in<sp/>two<sp/>blocks<sp/>that<sp/>wrap<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><sp/><sp/>firstHalf<sp/>=<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>-<sp/>index;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr1<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[index*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>];</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr1<sp/>=<sp/>firstHalf;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr2<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[0];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr2<sp/>=<sp/>elementCount<sp/>-<sp/>firstHalf;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr1<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[index*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr1<sp/>=<sp/>elementCount;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr2<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>available<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PaUtil_FullMemoryBarrier();<sp/></highlight><highlight class="comment">/*<sp/>(write-after-read)<sp/>=&gt;<sp/>full<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elementCount;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="138"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="pa__ringbuffer_8h_1ad38033c3d1cef68a44b7ccb0cf318236" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1ad38033c3d1cef68a44b7ccb0cf318236" kindref="member">PaUtil_AdvanceRingBufferWriteIndex</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount<sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>previous<sp/>writes<sp/>are<sp/>seen<sp/>before<sp/>we<sp/>update<sp/>the<sp/>write<sp/>index<sp/></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(write<sp/>after<sp/>write)</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>PaUtil_WriteMemoryBarrier();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ad2ae4e486eca6d273eed2e06f1d57aec" kindref="member">writeIndex</ref><sp/>=<sp/>(rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ad2ae4e486eca6d273eed2e06f1d57aec" kindref="member">writeIndex</ref><sp/>+<sp/>elementCount)<sp/>&amp;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a15f2f074f86d67747ac3d7cddd722d3e" kindref="member">bigMask</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="149"><highlight class="comment">**<sp/>Get<sp/>address<sp/>of<sp/>region(s)<sp/>from<sp/>which<sp/>we<sp/>can<sp/>read<sp/>data.</highlight></codeline>
<codeline lineno="150"><highlight class="comment">**<sp/>If<sp/>the<sp/>region<sp/>is<sp/>contiguous,<sp/>size2<sp/>will<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="151"><highlight class="comment">**<sp/>If<sp/>non-contiguous,<sp/>size2<sp/>will<sp/>be<sp/>the<sp/>size<sp/>of<sp/>second<sp/>region.</highlight></codeline>
<codeline lineno="152"><highlight class="comment">**<sp/>Returns<sp/>room<sp/>available<sp/>to<sp/>be<sp/>read<sp/>or<sp/>elementCount,<sp/>whichever<sp/>is<sp/>smaller.</highlight></codeline>
<codeline lineno="153"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="pa__ringbuffer_8h_1a0e1ef06e0ee328c9da54755cf889913d" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1a0e1ef06e0ee328c9da54755cf889913d" kindref="member">PaUtil_GetRingBufferReadRegions</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**dataPtr1,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>*sizePtr1,</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>**dataPtr2,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>*sizePtr2<sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><sp/><sp/>index;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><sp/><sp/>available<sp/>=<sp/><ref refid="pa__ringbuffer_8c_1a40786e9932b9f988be2accfce19d5ea4" kindref="member">PaUtil_GetRingBufferReadAvailable</ref>(<sp/>rbuf<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>doesn&apos;t<sp/>use<sp/>memory<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>elementCount<sp/>&gt;<sp/>available<sp/>)<sp/>elementCount<sp/>=<sp/>available;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>read<sp/>is<sp/>not<sp/>contiguous.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>index<sp/>=<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1aae25b99beddc44ae0efe8ae2ef341401" kindref="member">readIndex</ref><sp/>&amp;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a852c77d20c925439882cdb4dc9d1c0c9" kindref="member">smallMask</ref>;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(index<sp/>+<sp/>elementCount)<sp/>&gt;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>data<sp/>in<sp/>two<sp/>blocks<sp/>that<sp/>wrap<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>firstHalf<sp/>=<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ae4e41eb1cc214406adb26203d4643371" kindref="member">bufferSize</ref><sp/>-<sp/>index;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr1<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[index*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr1<sp/>=<sp/>firstHalf;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr2<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[0];</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr2<sp/>=<sp/>elementCount<sp/>-<sp/>firstHalf;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr1<sp/>=<sp/>&amp;rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1ac16a18dca2fc3becee50d159cf2074f2" kindref="member">buffer</ref>[index*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr1<sp/>=<sp/>elementCount;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dataPtr2<sp/>=<sp/><ref refid="getopt1_8c_1a070d2ce7b6bb7e5c05602aa8c308d0c4" kindref="member">NULL</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sizePtr2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>available<sp/>)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PaUtil_ReadMemoryBarrier();<sp/></highlight><highlight class="comment">/*<sp/>(read-after-read)<sp/>=&gt;<sp/>read<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>elementCount;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="186"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="pa__ringbuffer_8h_1a7acc44292930d2911445b41f982a6a73" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1a7acc44292930d2911445b41f982a6a73" kindref="member">PaUtil_AdvanceRingBufferReadIndex</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount<sp/>)</highlight></codeline>
<codeline lineno="188"><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ensure<sp/>that<sp/>previous<sp/>reads<sp/>(copies<sp/>out<sp/>of<sp/>the<sp/>ring<sp/>buffer)<sp/>are<sp/>always<sp/>completed<sp/>before<sp/>updating<sp/>(writing)<sp/>the<sp/>read<sp/>index.<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(write-after-read)<sp/>=&gt;<sp/>full<sp/>barrier</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>PaUtil_FullMemoryBarrier();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1aae25b99beddc44ae0efe8ae2ef341401" kindref="member">readIndex</ref><sp/>=<sp/>(rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1aae25b99beddc44ae0efe8ae2ef341401" kindref="member">readIndex</ref><sp/>+<sp/>elementCount)<sp/>&amp;<sp/>rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a15f2f074f86d67747ac3d7cddd722d3e" kindref="member">bigMask</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="197"><highlight class="comment">**<sp/>Return<sp/>elements<sp/>written.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="pa__ringbuffer_8h_1a2767b217dc115e4f20db8ea206ca9520" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1a2767b217dc115e4f20db8ea206ca9520" kindref="member">PaUtil_WriteRingBuffer</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount<sp/>)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>size1,<sp/>size2,<sp/>numWritten;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data1,<sp/>*data2;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>numWritten<sp/>=<sp/><ref refid="pa__ringbuffer_8c_1a5c0ed00cc826518012a780544c31b31e" kindref="member">PaUtil_GetRingBufferWriteRegions</ref>(<sp/>rbuf,<sp/>elementCount,<sp/>&amp;data1,<sp/>&amp;size1,<sp/>&amp;data2,<sp/>&amp;size2<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>size2<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data1,<sp/>data,<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data)<sp/>+<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data2,<sp/>data,<sp/>size2*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data1,<sp/>data,<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8c_1ad38033c3d1cef68a44b7ccb0cf318236" kindref="member">PaUtil_AdvanceRingBufferWriteIndex</ref>(<sp/>rbuf,<sp/>numWritten<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numWritten;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">/***************************************************************************</highlight></codeline>
<codeline lineno="219"><highlight class="comment">**<sp/>Return<sp/>elements<sp/>read.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="pa__ringbuffer_8h_1af6d879da3efb3894ef3956310bb3918e" refkind="member"><highlight class="normal"><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/><ref refid="pa__ringbuffer_8c_1af6d879da3efb3894ef3956310bb3918e" kindref="member">PaUtil_ReadRingBuffer</ref>(<sp/><ref refid="struct_pa_util_ring_buffer" kindref="compound">PaUtilRingBuffer</ref><sp/>*rbuf,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>elementCount<sp/>)</highlight></codeline>
<codeline lineno="221"><highlight class="normal">{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8h_1a56482b88e581ba588fe43b1568978b94" kindref="member">ring_buffer_size_t</ref><sp/>size1,<sp/>size2,<sp/>numRead;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data1,<sp/>*data2;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>numRead<sp/>=<sp/><ref refid="pa__ringbuffer_8c_1a0e1ef06e0ee328c9da54755cf889913d" kindref="member">PaUtil_GetRingBufferReadRegions</ref>(<sp/>rbuf,<sp/>elementCount,<sp/>&amp;data1,<sp/>&amp;size1,<sp/>&amp;data2,<sp/>&amp;size2<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>size2<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data,<sp/>data1,<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)data)<sp/>+<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data,<sp/>data2,<sp/>size2*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(<sp/>data,<sp/>data1,<sp/>size1*rbuf-&gt;<ref refid="struct_pa_util_ring_buffer_1a5a7585b4f9929cb74e2fcf6d0e0be072" kindref="member">elementSizeBytes</ref><sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pa__ringbuffer_8c_1a7acc44292930d2911445b41f982a6a73" kindref="member">PaUtil_AdvanceRingBufferReadIndex</ref>(<sp/>rbuf,<sp/>numRead<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>numRead;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/portaudio-v19/src/common/pa_ringbuffer.c"/>
  </compounddef>
</doxygen>
