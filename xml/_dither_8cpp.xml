<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_dither_8cpp" kind="file" language="C++">
    <compoundname>Dither.cpp</compoundname>
    <includes refid="float__cast_8h" local="yes">float_cast.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">wx/defs.h</includes>
    <includes refid="src_2dither_8h" local="yes">Dither.h</includes>
    <incdepgraph>
      <node id="40454">
        <label>stdlib.h</label>
      </node>
      <node id="40456">
        <label>wx/defs.h</label>
      </node>
      <node id="40459">
        <label>audacity/Types.h</label>
        <link refid="include_2audacity_2_types_8h"/>
        <childnode refid="40460" relation="include">
        </childnode>
        <childnode refid="40461" relation="include">
        </childnode>
      </node>
      <node id="40455">
        <label>string.h</label>
      </node>
      <node id="40450">
        <label>C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp</label>
        <link refid="Dither.cpp"/>
        <childnode refid="40451" relation="include">
        </childnode>
        <childnode refid="40454" relation="include">
        </childnode>
        <childnode refid="40453" relation="include">
        </childnode>
        <childnode refid="40455" relation="include">
        </childnode>
        <childnode refid="40456" relation="include">
        </childnode>
        <childnode refid="40457" relation="include">
        </childnode>
      </node>
      <node id="40452">
        <label>Audacity.h</label>
        <link refid="_audacity_8h"/>
      </node>
      <node id="40460">
        <label>wx/string.h</label>
      </node>
      <node id="40453">
        <label>math.h</label>
      </node>
      <node id="40461">
        <label>wx/arrstr.h</label>
      </node>
      <node id="40451">
        <label>float_cast.h</label>
        <link refid="float__cast_8h"/>
        <childnode refid="40452" relation="include">
        </childnode>
        <childnode refid="40453" relation="include">
        </childnode>
      </node>
      <node id="40458">
        <label>SampleFormat.h</label>
        <link refid="_sample_format_8h"/>
        <childnode refid="40452" relation="include">
        </childnode>
        <childnode refid="40456" relation="include">
        </childnode>
        <childnode refid="40459" relation="include">
        </childnode>
      </node>
      <node id="40457">
        <label>Dither.h</label>
        <link refid="src_2dither_8h"/>
        <childnode refid="40458" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" prot="public" static="no">
        <name>DITHER_NOISE</name>
        <initializer>(rand() / (float)RAND_MAX - 0.5f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="64" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a435355833f4e882f7a8b9208d3b312b2" prot="public" static="no">
        <name>CONVERT_DIV16</name>
        <initializer>float(1&lt;&lt;15)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="133" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a44e120ab95bfee187efcf3b18c53bd51" prot="public" static="no">
        <name>CONVERT_DIV24</name>
        <initializer>float(1&lt;&lt;23)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="134" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a227fcfd645c1b97c48db382e7152e5c6" prot="public" static="no">
        <name>FROM_INT16</name>
        <param><defname>ptr</defname></param>
        <initializer>(*((short*)(ptr)) / <ref refid="_dither_8cpp_1a435355833f4e882f7a8b9208d3b312b2" kindref="member">CONVERT_DIV16</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="137" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a84e03a6a96bffea7e0909323b2dadc79" prot="public" static="no">
        <name>FROM_INT24</name>
        <param><defname>ptr</defname></param>
        <initializer>(*((  <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>*)(ptr)) / <ref refid="_dither_8cpp_1a44e120ab95bfee187efcf3b18c53bd51" kindref="member">CONVERT_DIV24</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="138" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1ae06915704c105d9bb81da3c4214fdc56" prot="public" static="no">
        <name>FROM_FLOAT</name>
        <param><defname>ptr</defname></param>
        <initializer>(*((float*)(ptr)) &gt;  1.0 ?  1.0 : \
                         *((float*)(ptr)) &lt; -1.0 ? -1.0 : \
                         *((float*)(ptr)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="143" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1ae1c0ba97b2cdd4baa6df23a6ee332143" prot="public" static="no">
        <name>PROMOTE_TO_INT16</name>
        <param><defname>sample</defname></param>
        <initializer>((sample) * <ref refid="_dither_8cpp_1a435355833f4e882f7a8b9208d3b312b2" kindref="member">CONVERT_DIV16</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="148" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1aa714872407ee1d58635bf97cec2ccd79" prot="public" static="no">
        <name>PROMOTE_TO_INT24</name>
        <param><defname>sample</defname></param>
        <initializer>((sample) * <ref refid="_dither_8cpp_1a44e120ab95bfee187efcf3b18c53bd51" kindref="member">CONVERT_DIV24</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="149" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a5f066290901548b4021059a3bbbd0227" prot="public" static="no">
        <name>IMPLEMENT_STORE</name>
        <param><defname>ptr</defname></param>
        <param><defname>sample</defname></param>
        <param><defname>ptr_type</defname></param>
        <param><defname>min_bound</defname></param>
        <param><defname>max_bound</defname></param>
        <initializer>do { \
    x = <ref refid="float__cast_8h_1a483e8f95ebd254c9279e0ada03a9a6e8" kindref="member">lrintf</ref>(sample); \
    <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (x&gt;(max_bound)) *((ptr_type*)(ptr))=(max_bound); \
    else <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (x&lt;(min_bound)) *((ptr_type*)(ptr))=(min_bound); \
    else *((ptr_type*)(ptr))=(ptr_type)x; } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="154" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a75a0f210e1aa7d754c6b048a04a2317d" prot="public" static="no">
        <name>STORE_INT16</name>
        <param><defname>ptr</defname></param>
        <param><defname>sample</defname></param>
        <initializer><ref refid="_dither_8cpp_1a5f066290901548b4021059a3bbbd0227" kindref="member">IMPLEMENT_STORE</ref>((ptr), (sample), short, -32768, 32767)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="161" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a0bd9af25f11f615561e6518e5b64b415" prot="public" static="no">
        <name>STORE_INT24</name>
        <param><defname>ptr</defname></param>
        <param><defname>sample</defname></param>
        <initializer><ref refid="_dither_8cpp_1a5f066290901548b4021059a3bbbd0227" kindref="member">IMPLEMENT_STORE</ref>((ptr), (sample), <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>, -8388608, 8388607)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="162" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1af1a7ee3f968a9485f8b372796a939175" prot="public" static="no">
        <name>DITHER_TO_INT16</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>sample</defname></param>
        <initializer><ref refid="_dither_8cpp_1a75a0f210e1aa7d754c6b048a04a2317d" kindref="member">STORE_INT16</ref>((dst), dither(<ref refid="_dither_8cpp_1ae1c0ba97b2cdd4baa6df23a6ee332143" kindref="member">PROMOTE_TO_INT16</ref>(sample)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="165" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a56b2a38710dd30a561cb1084ee453c49" prot="public" static="no">
        <name>DITHER_TO_INT24</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>sample</defname></param>
        <initializer><ref refid="_dither_8cpp_1a0bd9af25f11f615561e6518e5b64b415" kindref="member">STORE_INT24</ref>((dst), dither(<ref refid="_dither_8cpp_1aa714872407ee1d58635bf97cec2ccd79" kindref="member">PROMOTE_TO_INT24</ref>(sample)))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="166" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1aea25831fbc1ea8c9895ab50afe8491ed" prot="public" static="no">
        <name>DITHER_STEP</name>
        <param><defname>dither</defname></param>
        <param><defname>store</defname></param>
        <param><defname>load</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>src</defname></param>
        <initializer>store(dither, (dst), load(src))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="169" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a242b9a395ee72a563f72b326bedce22e" prot="public" static="no">
        <name>DITHER_LOOP</name>
        <param><defname>dither</defname></param>
        <param><defname>store</defname></param>
        <param><defname>load</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>dstFormat</defname></param>
        <param><defname>dstStride</defname></param>
        <param><defname>src</defname></param>
        <param><defname>srcFormat</defname></param>
        <param><defname>srcStride</defname></param>
        <param><defname>len</defname></param>
        <initializer>do { \
       char *<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>, *<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>; \
       unsigned <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>; \
       <ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref> x; \
       <ref refid="hashrout_8h_1a63bdfbdfaa50cfc85afcbff4ce2c16a6" kindref="member">for</ref> (<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref> = (char*)dst, <ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref> = (char*)src, <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> = 0; \
            <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref> &lt; <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>; \
            <ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>++, <ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref> += <ref refid="paex__read__write__wire_8c_1ae25e0da7cdb20c758a56dc6aece92ba7" kindref="member">SAMPLE_SIZE</ref>(dstFormat) * dstStride, \
                 <ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref> += <ref refid="paex__read__write__wire_8c_1ae25e0da7cdb20c758a56dc6aece92ba7" kindref="member">SAMPLE_SIZE</ref>(srcFormat) * srcStride) \
          <ref refid="_dither_8cpp_1aea25831fbc1ea8c9895ab50afe8491ed" kindref="member">DITHER_STEP</ref>(dither, store, load, <ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>, <ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>); \
   } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="174" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="174" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a71fe1effc21678affbbb5eca7ec4d595" prot="public" static="no">
        <name>DITHER_INT24_TO_INT16</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>dstStride</defname></param>
        <param><defname>src</defname></param>
        <param><defname>srcStride</defname></param>
        <param><defname>len</defname></param>
        <initializer><ref refid="_dither_8cpp_1a242b9a395ee72a563f72b326bedce22e" kindref="member">DITHER_LOOP</ref>(dither, <ref refid="_dither_8cpp_1af1a7ee3f968a9485f8b372796a939175" kindref="member">DITHER_TO_INT16</ref>, <ref refid="_dither_8cpp_1a84e03a6a96bffea7e0909323b2dadc79" kindref="member">FROM_INT24</ref>, dst, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>, dstStride, src, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="187" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a33eb8ee5d66dc0d461dd7632ecc431f4" prot="public" static="no">
        <name>DITHER_FLOAT_TO_INT16</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>dstStride</defname></param>
        <param><defname>src</defname></param>
        <param><defname>srcStride</defname></param>
        <param><defname>len</defname></param>
        <initializer><ref refid="_dither_8cpp_1a242b9a395ee72a563f72b326bedce22e" kindref="member">DITHER_LOOP</ref>(dither, <ref refid="_dither_8cpp_1af1a7ee3f968a9485f8b372796a939175" kindref="member">DITHER_TO_INT16</ref>, <ref refid="_dither_8cpp_1ae06915704c105d9bb81da3c4214fdc56" kindref="member">FROM_FLOAT</ref>, dst, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>, dstStride, src, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="189" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1aad726da63094514f8446dcb228a2f04b" prot="public" static="no">
        <name>DITHER_FLOAT_TO_INT24</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>dstStride</defname></param>
        <param><defname>src</defname></param>
        <param><defname>srcStride</defname></param>
        <param><defname>len</defname></param>
        <initializer><ref refid="_dither_8cpp_1a242b9a395ee72a563f72b326bedce22e" kindref="member">DITHER_LOOP</ref>(dither, <ref refid="_dither_8cpp_1a56b2a38710dd30a561cb1084ee453c49" kindref="member">DITHER_TO_INT24</ref>, <ref refid="_dither_8cpp_1ae06915704c105d9bb81da3c4214fdc56" kindref="member">FROM_FLOAT</ref>, dst, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>, dstStride, src, <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="191" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" prot="public" static="no">
        <name>DITHER</name>
        <param><defname>dither</defname></param>
        <param><defname>dst</defname></param>
        <param><defname>dstFormat</defname></param>
        <param><defname>dstStride</defname></param>
        <param><defname>src</defname></param>
        <param><defname>srcFormat</defname></param>
        <param><defname>srcStride</defname></param>
        <param><defname>len</defname></param>
        <initializer>do { <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (srcFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref> &amp;&amp; dstFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>) \
        <ref refid="_dither_8cpp_1a71fe1effc21678affbbb5eca7ec4d595" kindref="member">DITHER_INT24_TO_INT16</ref>(dither, dst, dstStride, src, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>); \
    else <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (srcFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref> &amp;&amp; dstFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>) \
        <ref refid="_dither_8cpp_1a33eb8ee5d66dc0d461dd7632ecc431f4" kindref="member">DITHER_FLOAT_TO_INT16</ref>(dither, dst, dstStride, src, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>); \
    else <ref refid="sndfile__save_8m_1a55944e1fa1bcc1bfc6185bc610b0a930" kindref="member">if</ref> (srcFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref> &amp;&amp; dstFormat == <ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>) \
        <ref refid="_dither_8cpp_1aad726da63094514f8446dcb228a2f04b" kindref="member">DITHER_FLOAT_TO_INT24</ref>(dither, dst, dstStride, src, srcStride, <ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>); \
    else { wxASSERT(<ref refid="mac_2config_2i386_2lib-src_2libsoxr_2soxr-config_8h_1a65e9886d74aaee76545e83dd09011727" kindref="member">false</ref>); } \
    } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" line="196" column="9" bodyfile="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/>Audacity:<sp/>A<sp/>Digital<sp/>Audio<sp/>Editor</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/><sp/>Dither.cpp</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Steve<sp/>Harris</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>Markus<sp/>Meyer</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">*******************************************************************/</highlight><highlight class="comment">/*******************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Erik<sp/>de<sp/>Castro<sp/>Lopo&apos;s<sp/>header<sp/>file<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>makes<sp/>sure<sp/>that<sp/>we<sp/>have<sp/>lrint<sp/>and<sp/>lrintf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(Note:<sp/>this<sp/>file<sp/>should<sp/>be<sp/>included<sp/>first)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="float__cast_8h" kindref="compound">float_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;memory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;wx/defs.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="src_2dither_8h" kindref="compound">Dither.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants<sp/>for<sp/>the<sp/>noise<sp/>shaping<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dither::BUF_MASK<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Dither::BUF_SIZE<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Lipshitz&apos;s<sp/>minimally<sp/>audible<sp/>FIR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dither::SHAPED_BS[]<sp/>=<sp/>{<sp/>2.033f,<sp/>-2.165f,<sp/>1.959f,<sp/>-1.590f,<sp/>0.6149f<sp/>};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>supposed<sp/>to<sp/>produce<sp/>white<sp/>noise<sp/>and<sp/>no<sp/>dc</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_NOISE<sp/>(rand()<sp/>/<sp/>(float)RAND_MAX<sp/>-<sp/>0.5f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>is<sp/>a<sp/>rather<sp/>ugly,<sp/>but<sp/>fast<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>dither<sp/>loop.<sp/>The<sp/>macro<sp/>&quot;DITHER&quot;<sp/>is<sp/>expanded<sp/>to<sp/>an<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>dithering<sp/>algorithm,<sp/>which<sp/>contains<sp/>no<sp/>branches<sp/>in<sp/>the<sp/>inner<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>except<sp/>the<sp/>branches<sp/>for<sp/>clipping<sp/>the<sp/>sample,<sp/>and<sp/>therefore<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>quite<sp/>fast.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>assist<sp/>in<sp/>understanding<sp/>what<sp/>the<sp/>macros<sp/>are<sp/>doing,<sp/>here&apos;s<sp/>an<sp/>example<sp/>of<sp/>what</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>would<sp/>be<sp/>for<sp/>Shaped<sp/>dither:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DITHER(ShapedDither,<sp/>dest,<sp/>destFormat,<sp/>destStride,<sp/>source,<sp/>sourceFormat,<sp/>sourceStride,<sp/>len);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref><sp/>&amp;&amp;<sp/>destFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>,<sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>,<sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacewaflib_1_1_task_gen_1a34bb2baa863bf0c5ab4742e22e6bc556" kindref="member">source</ref>,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++,<sp/>d<sp/>+=<sp/>(int16Sample<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>destStride,<sp/>s<sp/>+=<sp/>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref><sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>sourceStride)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="real_8h_1a483e8f95ebd254c9279e0ada03a9a6e8" kindref="member">lrintf</ref>((ShapedDither((((*((<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)(s))<sp/>/<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(1&lt;&lt;23)))<sp/>*<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(1&lt;&lt;15)))));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&gt;(32767))</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((d)))))=(32767);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&lt;(-32768))</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>)))))=(-32768);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((d)))))=(short)x;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref><sp/>&amp;&amp;<sp/>destFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>,<sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>,<sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacewaflib_1_1_task_gen_1a34bb2baa863bf0c5ab4742e22e6bc556" kindref="member">source</ref>,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++,<sp/>d<sp/>+=<sp/>(int16Sample<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>destStride,<sp/>s<sp/>+=<sp/>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref><sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>sourceStride)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="real_8h_1a483e8f95ebd254c9279e0ada03a9a6e8" kindref="member">lrintf</ref>((ShapedDither((((*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))<sp/>&gt;<sp/>1.0<sp/>?<sp/>1.0<sp/>:<sp/>*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))<sp/>&lt;<sp/>-1.0<sp/>?<sp/>-1.0<sp/>:<sp/>*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))))<sp/>*<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(1&lt;&lt;15)))));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&gt;(32767))</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((d)))))=(32767);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&lt;(-32768))</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>)))))=(-32768);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)((((d)))))=(short)x;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref><sp/>&amp;&amp;<sp/>destFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>,<sp/>*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_utils_1a15fc4f04cecad81fba9772c4e43d40f7" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(d<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>,<sp/>s<sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="namespacewaflib_1_1_task_gen_1a34bb2baa863bf0c5ab4742e22e6bc556" kindref="member">source</ref>,<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++,<sp/>d<sp/>+=<sp/>(int24Sample<sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>destStride,<sp/>s<sp/>+=<sp/>(<ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref><sp/>&gt;&gt;<sp/>16)<sp/>*<sp/>sourceStride)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x<sp/>=<sp/><ref refid="real_8h_1a483e8f95ebd254c9279e0ada03a9a6e8" kindref="member">lrintf</ref>((ShapedDither((((*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))<sp/>&gt;<sp/>1.0<sp/>?<sp/>1.0<sp/>:<sp/>*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))<sp/>&lt;<sp/>-1.0<sp/>?<sp/>-1.0<sp/>:<sp/>*((</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)(s))))<sp/>*<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(1&lt;&lt;23)))));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&gt;(8388607))</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)((((d)))))=(8388607);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x&lt;(-8388608))</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)((((<ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref>)))))=(-8388608);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)((((d)))))=(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>)x;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>wxOnAssert(L</highlight><highlight class="stringliteral">&quot;c:\\users\\yam\\documents\\audacity\\mixer\\n\\audacity\\src\\dither.cpp&quot;</highlight><highlight class="normal">,<sp/>348,<sp/><sp/>__FUNCTION__<sp/><sp/>,<sp/>L</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>for<sp/>sample<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="_dither_8cpp_1a435355833f4e882f7a8b9208d3b312b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONVERT_DIV16<sp/>float(1&lt;&lt;15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="_dither_8cpp_1a44e120ab95bfee187efcf3b18c53bd51" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CONVERT_DIV24<sp/>float(1&lt;&lt;23)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dereference<sp/>sample<sp/>pointer<sp/>and<sp/>convert<sp/>to<sp/>float<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137" refid="_dither_8cpp_1a227fcfd645c1b97c48db382e7152e5c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FROM_INT16(ptr)<sp/>(*((short*)(ptr))<sp/>/<sp/>CONVERT_DIV16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="_dither_8cpp_1a84e03a6a96bffea7e0909323b2dadc79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FROM_INT24(ptr)<sp/>(*((<sp/><sp/>int*)(ptr))<sp/>/<sp/>CONVERT_DIV24)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>float,<sp/>we<sp/>internally<sp/>allow<sp/>values<sp/>greater<sp/>than<sp/>1.0,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>would<sp/>blow<sp/>up<sp/>the<sp/>dithering<sp/>to<sp/>int<sp/>values.<sp/><sp/>FROM_FLOAT<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>used<sp/>to<sp/>dither<sp/>to<sp/>int,<sp/>so<sp/>clip<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="_dither_8cpp_1ae06915704c105d9bb81da3c4214fdc56" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FROM_FLOAT(ptr)<sp/>(*((float*)(ptr))<sp/>&gt;<sp/><sp/>1.0<sp/>?<sp/><sp/>1.0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((float*)(ptr))<sp/>&lt;<sp/>-1.0<sp/>?<sp/>-1.0<sp/>:<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*((float*)(ptr)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Promote<sp/>sample<sp/>to<sp/>range<sp/>of<sp/>specified<sp/>type,<sp/>keep<sp/>it<sp/>float,<sp/>though</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="_dither_8cpp_1ae1c0ba97b2cdd4baa6df23a6ee332143" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROMOTE_TO_INT16(sample)<sp/>((sample)<sp/>*<sp/>CONVERT_DIV16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="_dither_8cpp_1aa714872407ee1d58635bf97cec2ccd79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROMOTE_TO_INT24(sample)<sp/>((sample)<sp/>*<sp/>CONVERT_DIV24)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Store<sp/>float<sp/>sample<sp/>&apos;sample&apos;<sp/>into<sp/>pointer<sp/>&apos;ptr&apos;,<sp/>clip<sp/>it,<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>This<sp/>assumes,<sp/>a<sp/>variable<sp/>&apos;x&apos;<sp/>of<sp/>type<sp/>int<sp/>is<sp/>valid<sp/>which<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>by<sp/>this<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="_dither_8cpp_1a5f066290901548b4021059a3bbbd0227" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IMPLEMENT_STORE(ptr,<sp/>sample,<sp/>ptr_type,<sp/>min_bound,<sp/>max_bound)<sp/>\</highlight></codeline>
<codeline lineno="155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="156"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>lrintf(sample);<sp/>\</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(x&gt;(max_bound))<sp/>*((ptr_type*)(ptr))=(max_bound);<sp/>\</highlight></codeline>
<codeline lineno="158"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(x&lt;(min_bound))<sp/>*((ptr_type*)(ptr))=(min_bound);<sp/>\</highlight></codeline>
<codeline lineno="159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>*((ptr_type*)(ptr))=(ptr_type)x;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="_dither_8cpp_1a75a0f210e1aa7d754c6b048a04a2317d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STORE_INT16(ptr,<sp/>sample)<sp/>IMPLEMENT_STORE((ptr),<sp/>(sample),<sp/>short,<sp/>-32768,<sp/>32767)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="_dither_8cpp_1a0bd9af25f11f615561e6518e5b64b415" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STORE_INT24(ptr,<sp/>sample)<sp/>IMPLEMENT_STORE((ptr),<sp/>(sample),<sp/>int,<sp/>-8388608,<sp/>8388607)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dither<sp/>single<sp/>float<sp/>&apos;sample&apos;<sp/>and<sp/>store<sp/>it<sp/>in<sp/>pointer<sp/>&apos;dst&apos;,<sp/>using<sp/>&apos;dither&apos;<sp/>as<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="_dither_8cpp_1af1a7ee3f968a9485f8b372796a939175" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_TO_INT16(dither,<sp/>dst,<sp/>sample)<sp/>STORE_INT16((dst),<sp/>dither(PROMOTE_TO_INT16(sample)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="_dither_8cpp_1a56b2a38710dd30a561cb1084ee453c49" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_TO_INT24(dither,<sp/>dst,<sp/>sample)<sp/>STORE_INT24((dst),<sp/>dither(PROMOTE_TO_INT24(sample)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>one<sp/>single<sp/>dither<sp/>step</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="_dither_8cpp_1aea25831fbc1ea8c9895ab50afe8491ed" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_STEP(dither,<sp/>store,<sp/>load,<sp/>dst,<sp/>src)<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>store(dither,<sp/>(dst),<sp/>load(src))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>a<sp/>dithering<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>The<sp/>variable<sp/>&apos;x&apos;<sp/>is<sp/>needed<sp/>for<sp/>the<sp/>STORE_...<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="_dither_8cpp_1a242b9a395ee72a563f72b326bedce22e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_LOOP(dither,<sp/>store,<sp/>load,<sp/>dst,<sp/>dstFormat,<sp/>dstStride,<sp/>src,<sp/>srcFormat,<sp/>srcStride,<sp/>len)<sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>*d,<sp/>*s;<sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>i;<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>x;<sp/>\</highlight></codeline>
<codeline lineno="179"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(d<sp/>=<sp/>(char*)dst,<sp/>s<sp/>=<sp/>(char*)src,<sp/>i<sp/>=<sp/>0;<sp/>\</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>&lt;<sp/>len;<sp/>\</highlight></codeline>
<codeline lineno="181"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++,<sp/>d<sp/>+=<sp/>SAMPLE_SIZE(dstFormat)<sp/>*<sp/>dstStride,<sp/>\</highlight></codeline>
<codeline lineno="182"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>+=<sp/>SAMPLE_SIZE(srcFormat)<sp/>*<sp/>srcStride)<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DITHER_STEP(dither,<sp/>store,<sp/>load,<sp/>d,<sp/>s);<sp/>\</highlight></codeline>
<codeline lineno="184"><highlight class="preprocessor"><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shortcuts<sp/>to<sp/>dithering<sp/>loops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="_dither_8cpp_1a71fe1effc21678affbbb5eca7ec4d595" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_INT24_TO_INT16(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len)<sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DITHER_LOOP(dither,<sp/>DITHER_TO_INT16,<sp/>FROM_INT24,<sp/>dst,<sp/>int16Sample,<sp/>dstStride,<sp/>src,<sp/>int24Sample,<sp/>srcStride,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="_dither_8cpp_1a33eb8ee5d66dc0d461dd7632ecc431f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_FLOAT_TO_INT16(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len)<sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DITHER_LOOP(dither,<sp/>DITHER_TO_INT16,<sp/>FROM_FLOAT,<sp/>dst,<sp/>int16Sample,<sp/>dstStride,<sp/>src,<sp/>floatSample,<sp/>srcStride,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="_dither_8cpp_1aad726da63094514f8446dcb228a2f04b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER_FLOAT_TO_INT24(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len)<sp/>\</highlight></codeline>
<codeline lineno="192"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>DITHER_LOOP(dither,<sp/>DITHER_TO_INT24,<sp/>FROM_FLOAT,<sp/>dst,<sp/>int24Sample,<sp/>dstStride,<sp/>src,<sp/>floatSample,<sp/>srcStride,<sp/>len)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implement<sp/>a<sp/>dither.<sp/>There<sp/>are<sp/>only<sp/>3<sp/>cases<sp/>where<sp/>we<sp/>must<sp/>dither,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>all<sp/>other<sp/>cases,<sp/>no<sp/>dithering<sp/>is<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DITHER(dither,<sp/>dst,<sp/>dstFormat,<sp/>dstStride,<sp/>src,<sp/>srcFormat,<sp/>srcStride,<sp/>len)<sp/>\</highlight></codeline>
<codeline lineno="197"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/>if<sp/>(srcFormat<sp/>==<sp/>int24Sample<sp/>&amp;&amp;<sp/>dstFormat<sp/>==<sp/>int16Sample)<sp/>\</highlight></codeline>
<codeline lineno="198"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DITHER_INT24_TO_INT16(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len);<sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(srcFormat<sp/>==<sp/>floatSample<sp/>&amp;&amp;<sp/>dstFormat<sp/>==<sp/>int16Sample)<sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DITHER_FLOAT_TO_INT16(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len);<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(srcFormat<sp/>==<sp/>floatSample<sp/>&amp;&amp;<sp/>dstFormat<sp/>==<sp/>int24Sample)<sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DITHER_FLOAT_TO_INT24(dither,<sp/>dst,<sp/>dstStride,<sp/>src,<sp/>srcStride,<sp/>len);<sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>else<sp/>{<sp/>wxASSERT(false);<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_dither_1a3d229a9790aeaf00e63121495e2e0b48" refkind="member"><highlight class="normal"><ref refid="class_dither_1a3d229a9790aeaf00e63121495e2e0b48" kindref="member">Dither::Dither</ref>()</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>startup,<sp/>initialize<sp/>dither<sp/>by<sp/>resetting<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_dither_1a39eb37b93d93a262e4beea29488e573a" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="class_dither_1a39eb37b93d93a262e4beea29488e573a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_dither_1a39eb37b93d93a262e4beea29488e573a" kindref="member">Dither::Reset</ref>()</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>mTriangleState<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>mPhase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(mBuffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>*<sp/><ref refid="atom-test_8c_1a6821bafc3c88dfb2e433a095df9940c6" kindref="member">BUF_SIZE</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>only<sp/>decides<sp/>if<sp/>we<sp/>must<sp/>dither<sp/>at<sp/>all,<sp/>the<sp/>dithers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>are<sp/>all<sp/>implemented<sp/>using<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;source&quot;<sp/>and<sp/>&quot;dest&quot;<sp/>can<sp/>contain<sp/>either<sp/>interleaved<sp/>or<sp/>non-interleaved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="comment">//<sp/>samples.<sp/><sp/>They<sp/>do<sp/>not<sp/>have<sp/>to<sp/>be<sp/>the<sp/>same...one<sp/>can<sp/>be<sp/>interleaved<sp/>while</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>otner<sp/>non-interleaved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;len&quot;<sp/>argument<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>samples<sp/>to<sp/>process.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>stride<sp/>value<sp/>equals<sp/>1<sp/>then<sp/>the<sp/>corresponding<sp/>buffer<sp/>contains</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>non-interleaved<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>either<sp/>stride<sp/>value<sp/>is<sp/>greater<sp/>than<sp/>1<sp/>then<sp/>the<sp/>corresponding<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contains<sp/>interleaved<sp/>samples<sp/>and<sp/>they<sp/>will<sp/>be<sp/>processed<sp/>by<sp/>skipping<sp/>every</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stride<sp/>number<sp/>of<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="class_dither_1a6c3a234d3ff2ea8dff4fa39b2172f3f5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_dither_1a6c3a234d3ff2ea8dff4fa39b2172f3f5" kindref="member">Dither::Apply</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="class_dither_1adea8077a2ba5a6c4ad2f11ed20cd4086" kindref="member">DitherType</ref><sp/>ditherType,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="namespacewaflib_1_1_task_gen_1a34bb2baa863bf0c5ab4742e22e6bc556" kindref="member">source</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>sourceFormat,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="include_2audacity_2_types_8h_1aaafb46d1caf7c79262fec96b577215fe" kindref="member">samplePtr</ref><sp/><ref refid="namespacelv2specgen_1af69976955f051ccef12ad2f85392e818" kindref="member">dest</ref>,<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792" kindref="member">sampleFormat</ref><sp/>destFormat,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceStride<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>destStride<sp/></highlight><highlight class="comment">/*<sp/>=<sp/>1<sp/>*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="checksum_8c_1ab80e330a3bc9e38c1297fe17381e92b4" kindref="member">i</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>is<sp/>not<sp/>designed<sp/>for<sp/>16-bit<sp/>or<sp/>64-bit<sp/>machine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>==<sp/>4);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(source);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(dest);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(len<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(sourceStride<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>wxASSERT(destStride<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destFormat<sp/>==<sp/>sourceFormat)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>dither,<sp/>because<sp/>source<sp/>and<sp/>destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>format<sp/>are<sp/>the<sp/>same.<sp/>Just<sp/>copy<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destStride<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>sourceStride<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dest,<sp/>source,<sp/>len<sp/>*<sp/><ref refid="include_2audacity_2_types_8h_1a7ecd88c1f16f362ccc891b8d1f6f69cb" kindref="member">SAMPLE_SIZE</ref>(destFormat));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)dest;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/>*s;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)dest;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/>*s;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)dest;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/>*s;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>source<sp/>format<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba7300a3d7158e88f04d5f81e613dde2" kindref="member">floatSample</ref>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>need<sp/>to<sp/>dither,<sp/>just<sp/>convert<sp/>samples<sp/>to<sp/>float.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>clipping<sp/>should<sp/>be<sp/>necessary.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*)dest;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/><ref refid="_dither_8cpp_1a227fcfd645c1b97c48db382e7152e5c6" kindref="member">FROM_INT16</ref>(s);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/><ref refid="_dither_8cpp_1a84e03a6a96bffea7e0909323b2dadc79" kindref="member">FROM_INT24</ref>(s);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>source<sp/>format<sp/>unknown</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(destFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792af7d5dcd7629454f6c6f3d7be44068a5f" kindref="member">int24Sample</ref><sp/>&amp;&amp;<sp/>sourceFormat<sp/>==<sp/><ref refid="include_2audacity_2_types_8h_1a9938d2e2f6adef23e745cd80ef379792aba99d110ae36be71bbf3cb9ad3af4550" kindref="member">int16Sample</ref>)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>case<sp/>when<sp/>promoting<sp/>16<sp/>bit<sp/>to<sp/>24<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/><ref refid="poly-fir_8h_1a2530554172d8629149ec56816eeaa947" kindref="member">d</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)dest;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*<sp/><ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">*)source;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="lib_2expat_8h_1af86d325fecfc8f47b61fbf5a5146f582" kindref="member">len</ref>;<sp/>i++,<sp/>d<sp/>+=<sp/>destStride,<sp/>s<sp/>+=<sp/>sourceStride)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*d<sp/>=<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)*<ref refid="lib_2expat_8h_1a755339d27872b13735c2cab829e47157" kindref="member">s</ref>)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>must<sp/>do<sp/>dithering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ditherType)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_dither_1adea8077a2ba5a6c4ad2f11ed20cd4086ab2f6eaa06d9f79958f282ba62ea96847" kindref="member">none</ref>:</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" kindref="member">DITHER</ref>(NoDither,<sp/>dest,<sp/>destFormat,<sp/>destStride,<sp/>source,<sp/>sourceFormat,<sp/>sourceStride,<sp/>len);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_dither_1adea8077a2ba5a6c4ad2f11ed20cd4086ad020f87518df3c744151879bf184fae9" kindref="member">rectangle</ref>:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" kindref="member">DITHER</ref>(RectangleDither,<sp/>dest,<sp/>destFormat,<sp/>destStride,<sp/>source,<sp/>sourceFormat,<sp/>sourceStride,<sp/>len);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_dither_1adea8077a2ba5a6c4ad2f11ed20cd4086a821f5379115ed0e0bfebe7723e707b63" kindref="member">triangle</ref>:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dither_1a39eb37b93d93a262e4beea29488e573a" kindref="member">Reset</ref>();<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>dither<sp/>filter<sp/>for<sp/>this<sp/>NEW<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" kindref="member">DITHER</ref>(TriangleDither,<sp/>dest,<sp/>destFormat,<sp/>destStride,<sp/>source,<sp/>sourceFormat,<sp/>sourceStride,<sp/>len);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="class_dither_1adea8077a2ba5a6c4ad2f11ed20cd4086a607d818d7eea1ee97cfa38949cf9203b" kindref="member">shaped</ref>:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_dither_1a39eb37b93d93a262e4beea29488e573a" kindref="member">Reset</ref>();<sp/></highlight><highlight class="comment">//<sp/>reset<sp/>dither<sp/>filter<sp/>for<sp/>this<sp/>NEW<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_dither_8cpp_1a0351d22bb15c26fd07fed07bdb32a626" kindref="member">DITHER</ref>(ShapedDither,<sp/>dest,<sp/>destFormat,<sp/>destStride,<sp/>source,<sp/>sourceFormat,<sp/>sourceStride,<sp/>len);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wxASSERT(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>unknown<sp/>dither<sp/>algorithm</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dither<sp/>implementations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>dither,<sp/>just<sp/>return<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dither::NoDither(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Rectangle<sp/>dithering,<sp/>apply<sp/>one-step<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dither::RectangleDither(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sample<sp/>-<sp/><ref refid="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" kindref="member">DITHER_NOISE</ref>;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Triangle<sp/>dither<sp/>-<sp/>high<sp/>pass<sp/>filtered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dither::TriangleDither(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" kindref="member">DITHER_NOISE</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>sample<sp/>+<sp/>r<sp/>-<sp/>mTriangleState;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>mTriangleState<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="370"><highlight class="normal">}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shaped<sp/>dither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>Dither::ShapedDither(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>triangular<sp/>dither,<sp/>+-1<sp/>LSB,<sp/>flat<sp/>psd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>r<sp/>=<sp/><ref refid="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" kindref="member">DITHER_NOISE</ref><sp/>+<sp/><ref refid="_dither_8cpp_1ade4a8104b2bcd7fb7141eb6a252fe39a" kindref="member">DITHER_NOISE</ref>;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sample<sp/>!=<sp/>sample)<sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>NaN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>and<sp/>do<sp/>the<sp/>best<sp/>we<sp/>can<sp/>with<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>FIR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>xe<sp/>=<sp/>sample<sp/>+<sp/>mBuffer[mPhase]<sp/>*<sp/>SHAPED_BS[0]</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>mBuffer[(mPhase<sp/>-<sp/>1)<sp/>&amp;<sp/>BUF_MASK]<sp/>*<sp/>SHAPED_BS[1]</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>mBuffer[(mPhase<sp/>-<sp/>2)<sp/>&amp;<sp/>BUF_MASK]<sp/>*<sp/>SHAPED_BS[2]</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>mBuffer[(mPhase<sp/>-<sp/>3)<sp/>&amp;<sp/>BUF_MASK]<sp/>*<sp/>SHAPED_BS[3]</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>mBuffer[(mPhase<sp/>-<sp/>4)<sp/>&amp;<sp/>BUF_MASK]<sp/>*<sp/>SHAPED_BS[4];</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accumulate<sp/>FIR<sp/>and<sp/>triangular<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>xe<sp/>+<sp/>r;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Roll<sp/>buffer<sp/>and<sp/>store<sp/>last<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>mPhase<sp/>=<sp/>(mPhase<sp/>+<sp/>1)<sp/>&amp;<sp/>BUF_MASK;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>mBuffer[mPhase]<sp/>=<sp/>xe<sp/>-<sp/><ref refid="real_8h_1a483e8f95ebd254c9279e0ada03a9a6e8" kindref="member">lrintf</ref>(result);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/src/Dither.cpp"/>
  </compounddef>
</doxygen>
