<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="lv2_2plugins_2eg-amp_8lv2_2waflib_2_tools_2python_8py" kind="file" language="Python">
    <compoundname>python.py</compoundname>
    <innernamespace refid="namespacewaflib_1_1_tools_1_1python">waflib::Tools::python</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#!<sp/>/usr/bin/env<sp/>python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/>encoding:<sp/>utf-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/>WARNING!<sp/>Do<sp/>not<sp/>edit!<sp/>http://waf.googlecode.com/git/docs/wafbook/single.html#_obtaining_the_waf_file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>os,sys</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>waflib<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>Utils,Options,Errors,Logs</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_task_gen" kindref="compound">waflib.TaskGen</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>extension,before_method,after_method,feature</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacewaflib_1_1_configure" kindref="compound">waflib.Configure</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>conf</highlight></codeline>
<codeline lineno="9"><highlight class="normal">FRAG=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="10"><highlight class="stringliteral">#include<sp/>&lt;Python.h&gt;</highlight></codeline>
<codeline lineno="11"><highlight class="stringliteral">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="12"><highlight class="stringliteral">extern<sp/>&quot;C&quot;<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="14"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>Py_Initialize(void);</highlight></codeline>
<codeline lineno="15"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>void<sp/>Py_Finalize(void);</highlight></codeline>
<codeline lineno="16"><highlight class="stringliteral">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="17"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="18"><highlight class="stringliteral">#endif</highlight></codeline>
<codeline lineno="19"><highlight class="stringliteral">int<sp/>main(int<sp/>argc,<sp/>char<sp/>**argv)</highlight></codeline>
<codeline lineno="20"><highlight class="stringliteral">{</highlight></codeline>
<codeline lineno="21"><highlight class="stringliteral"><sp/><sp/><sp/>(void)argc;<sp/>(void)argv;</highlight></codeline>
<codeline lineno="22"><highlight class="stringliteral"><sp/><sp/><sp/>Py_Initialize();</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral"><sp/><sp/><sp/>Py_Finalize();</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral"><sp/><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline lineno="25"><highlight class="stringliteral">}</highlight></codeline>
<codeline lineno="26"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">INST=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="28"><highlight class="stringliteral">import<sp/>sys,<sp/>py_compile</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">py_compile.compile(sys.argv[1],<sp/>sys.argv[2],<sp/>sys.argv[3])</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal">DISTUTILS_IMP=[</highlight><highlight class="stringliteral">&apos;from<sp/>distutils.sysconfig<sp/>import<sp/>get_config_var,<sp/>get_python_lib&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="32"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1ab4b159e661d17937cf1be8254dedb12f" kindref="member">extension</ref>(</highlight><highlight class="stringliteral">&apos;.py&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a71636ae0482b95c564b6d4187d0859e2" kindref="member">process_py</ref>(self,node):</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.bld.is_install:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.install_path:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.install_path=</highlight><highlight class="stringliteral">&apos;${PYTHONDIR}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">inst_py(ctx):</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>install_from=getattr(self,</highlight><highlight class="stringliteral">&apos;install_from&apos;</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>install_from:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>install_from=self.path.find_dir(install_from)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacewaflib_1_1_tools_1_1python_1a058abbc5b39435a0b9e521b2c7469b0e" kindref="member">install_pyfile</ref>(self,node,install_from)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>self.bld.add_post_fun(inst_py)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a058abbc5b39435a0b9e521b2c7469b0e" kindref="member">install_pyfile</ref>(self,node,install_from=None):</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>from_node=install_from<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>node.parent</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>tsk=self.bld.install_as(self.install_path+</highlight><highlight class="stringliteral">&apos;/&apos;</highlight><highlight class="normal">+node.path_from(from_node),node,postpone=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>path=tsk.get_install_path()</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.bld.is_install&lt;0:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.info(</highlight><highlight class="stringliteral">&quot;+<sp/>removing<sp/>byte<sp/>compiled<sp/>python<sp/>files&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="stringliteral">&apos;co&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.remove(path+x)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.bld.is_install&gt;0:</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st1=os.stat(path)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.error(</highlight><highlight class="stringliteral">&apos;The<sp/>python<sp/>file<sp/>is<sp/>missing,<sp/>this<sp/>should<sp/>not<sp/>happen&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;o&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_inst=self.env[</highlight><highlight class="stringliteral">&apos;PY&apos;</highlight><highlight class="normal">+x.upper()]</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>st2=os.stat(path+x)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>OSError:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>st1.st_mtime&lt;=st2.st_mtime:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do_inst=</highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>do_inst:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst=(x==</highlight><highlight class="stringliteral">&apos;o&apos;</highlight><highlight class="normal">)</highlight><highlight class="keywordflow">and</highlight><highlight class="normal">[self.env[</highlight><highlight class="stringliteral">&apos;PYFLAGS_OPT&apos;</highlight><highlight class="normal">]]</highlight><highlight class="keywordflow">or</highlight><highlight class="normal">[]</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(a,b,c)=(path,path+x,tsk.get_install_path(destdir=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)+x)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv=self.env[</highlight><highlight class="stringliteral">&apos;PYTHON&apos;</highlight><highlight class="normal">]+lst+[</highlight><highlight class="stringliteral">&apos;-c&apos;</highlight><highlight class="normal">,INST,a,b,c]</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.info(</highlight><highlight class="stringliteral">&apos;+<sp/>byte<sp/>compiling<sp/>%r&apos;</highlight><highlight class="normal">%(path+x))</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env=self.env.env<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=Utils.subprocess.Popen(argv,env=env).wait()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret:</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">raise</highlight><highlight class="normal"><sp/>Errors.WafError(</highlight><highlight class="stringliteral">&apos;py%s<sp/>compilation<sp/>failed<sp/>%r&apos;</highlight><highlight class="normal">%(x,path))</highlight></codeline>
<codeline lineno="84"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;py&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1acc4f408ad28420fd71f5d55e8460c860" kindref="member">feature_py</ref>(self):</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;pyext&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;propagate_uselib_vars&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;apply_link&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a3411cecc8687a44154a45078c3224fb7" kindref="member">after_method</ref>(</highlight><highlight class="stringliteral">&apos;apply_bundle&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1adfd20f1acfdfb23e2a6835e8f46380d8" kindref="member">init_pyext</ref>(self):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>self.uselib=self.to_list(getattr(self,</highlight><highlight class="stringliteral">&apos;uselib&apos;</highlight><highlight class="normal">,[]))</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;PYEXT&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.uselib:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.uselib.append(</highlight><highlight class="stringliteral">&apos;PYEXT&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>self.env.cshlib_PATTERN=self.env.cxxshlib_PATTERN=self.env.macbundle_PATTERN=self.env.pyext_PATTERN</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>self.env.fcshlib_PATTERN=self.env.dshlib_PATTERN=self.env.pyext_PATTERN</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.install_path:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.install_path=</highlight><highlight class="stringliteral">&apos;${PYTHONARCHDIR}&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;pyext&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;apply_link&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;apply_bundle&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a8871401a5a253c6c5f23b93abfc7c6ce" kindref="member">set_bundle</ref>(self):</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Utils.unversioned_sys_platform()==</highlight><highlight class="stringliteral">&apos;darwin&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.mac_bundle=</highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a56d188988dd3babc77f1d283e1f8c1b1" kindref="member">before_method</ref>(</highlight><highlight class="stringliteral">&apos;propagate_uselib_vars&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">@<ref refid="namespacewaflib_1_1_task_gen_1a839f18f16539f3131cbe573262099bf1" kindref="member">feature</ref>(</highlight><highlight class="stringliteral">&apos;pyembed&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a57ee91575ef5da03257f030eeda97eb8" kindref="member">init_pyembed</ref>(self):</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>self.uselib=self.to_list(getattr(self,</highlight><highlight class="stringliteral">&apos;uselib&apos;</highlight><highlight class="normal">,[]))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.uselib:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.uselib.append(</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a25e6fedc3ee179a0fd6941d4b9a4dc59" kindref="member">get_python_variables</ref>(self,variables,imports=None):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>imports:</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imports=self.python_imports</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>AttributeError:</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imports=DISTUTILS_IMP</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>program=list(imports)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>program.append(</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>v<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>variables:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>program.append(</highlight><highlight class="stringliteral">&quot;print(repr(%s))&quot;</highlight><highlight class="normal">%v)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>os_env=dict(os.environ)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>del<sp/>os_env[</highlight><highlight class="stringliteral">&apos;MACOSX_DEPLOYMENT_TARGET&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>KeyError:</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out=self.cmd_and_log(self.env.PYTHON+[</highlight><highlight class="stringliteral">&apos;-c&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(program)],env=os_env)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Errors.WafError:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.fatal(</highlight><highlight class="stringliteral">&apos;The<sp/>distutils<sp/>module<sp/>is<sp/>unusable:<sp/>install<sp/>&quot;python-devel&quot;?&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>self.to_log(out)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>return_values=[]</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>s<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>out.split(</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s=s.strip()</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>s:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>s==</highlight><highlight class="stringliteral">&apos;None&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_values.append(</highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elif(s[0]==</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>s[-1]==</highlight><highlight class="stringliteral">&quot;&apos;&quot;</highlight><highlight class="normal">)or(s[0]==</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>s[-1]==</highlight><highlight class="stringliteral">&apos;&quot;&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_values.append(<ref refid="sndfile__load_8m_1a2e42535874848cdfc8a19e67b71befc9" kindref="member">eval</ref>(s))</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">elif</highlight><highlight class="normal"><sp/>s[0].isdigit():</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_values.append(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(s))</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>return_values</highlight></codeline>
<codeline lineno="146"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a02a439285fad316b6be47a63235641e6" kindref="member">check_python_headers</ref>(conf):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>env=conf.env</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;CC_NAME&apos;</highlight><highlight class="normal">]</highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;CXX_NAME&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;load<sp/>a<sp/>compiler<sp/>first<sp/>(gcc,<sp/>g++,<sp/>..)&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check_python_version()</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>pybin=conf.env.PYTHON</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>pybin:</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>find<sp/>the<sp/>python<sp/>executable&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>v=</highlight><highlight class="stringliteral">&apos;prefix<sp/>SO<sp/>LDFLAGS<sp/>LIBDIR<sp/>LIBPL<sp/>INCLUDEPY<sp/>Py_ENABLE_SHARED<sp/>MACOSX_DEPLOYMENT_TARGET<sp/>LDSHARED<sp/>CFLAGS<sp/>LDVERSION&apos;</highlight><highlight class="normal">.split()</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lst=conf.get_python_variables([</highlight><highlight class="stringliteral">&quot;get_config_var(&apos;%s&apos;)<sp/>or<sp/>&apos;&apos;&quot;</highlight><highlight class="normal">%x<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>v])</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>RuntimeError:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&quot;Python<sp/>development<sp/>headers<sp/>not<sp/>found<sp/>(-v<sp/>for<sp/>details).&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>vals=[</highlight><highlight class="stringliteral">&apos;%s<sp/>=<sp/>%r&apos;</highlight><highlight class="normal">%(x,y)<ref refid="hashrout_8h_1af69473f95324d0c0f91fdfb1d1a00360" kindref="member">for</ref>(x,y)</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>zip(v,lst)]</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;Configuration<sp/>returned<sp/>from<sp/>%r:\n%r\n&quot;</highlight><highlight class="normal">%(pybin,</highlight><highlight class="stringliteral">&apos;\n&apos;</highlight><highlight class="normal">.join(vals)))</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>dct=dict(zip(v,lst))</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>x=</highlight><highlight class="stringliteral">&apos;MACOSX_DEPLOYMENT_TARGET&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dct[x]:</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.env[x]=conf.environ[x]=dct[x]</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;pyext_PATTERN&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;%s&apos;</highlight><highlight class="normal">+dct[</highlight><highlight class="stringliteral">&apos;SO&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>all_flags=dct[</highlight><highlight class="stringliteral">&apos;LDFLAGS&apos;</highlight><highlight class="normal">]+</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">+dct[</highlight><highlight class="stringliteral">&apos;CFLAGS&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.parse_flags(all_flags,</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>all_flags=dct[</highlight><highlight class="stringliteral">&apos;LDFLAGS&apos;</highlight><highlight class="normal">]+</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">+dct[</highlight><highlight class="stringliteral">&apos;LDSHARED&apos;</highlight><highlight class="normal">]+</highlight><highlight class="stringliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">+dct[</highlight><highlight class="stringliteral">&apos;CFLAGS&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.parse_flags(all_flags,</highlight><highlight class="stringliteral">&apos;PYEXT&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>result=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>dct[</highlight><highlight class="stringliteral">&quot;LDVERSION&quot;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dct[</highlight><highlight class="stringliteral">&quot;LDVERSION&quot;</highlight><highlight class="normal">]=env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>name<sp/><ref refid="1-single-block_8c_1a18b1d64a94008e3c56953d279b8095e2" kindref="member">in</ref>(</highlight><highlight class="stringliteral">&apos;python&apos;</highlight><highlight class="normal">+dct[</highlight><highlight class="stringliteral">&apos;LDVERSION&apos;</highlight><highlight class="normal">],</highlight><highlight class="stringliteral">&apos;python&apos;</highlight><highlight class="normal">+env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">]+</highlight><highlight class="stringliteral">&apos;m&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;python&apos;</highlight><highlight class="normal">+env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">].<ref refid="namespacewaflib_1_1_tools_1_1errcheck_1a3c373d095646ee41f81dd43ade9e0b63" kindref="member">replace</ref>(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;LIBPATH_PYEMBED&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path=env[</highlight><highlight class="stringliteral">&apos;LIBPATH_PYEMBED&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;\n\n#<sp/>Trying<sp/>default<sp/>LIBPATH_PYEMBED:<sp/>%r\n&quot;</highlight><highlight class="normal">%path)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=conf.check(lib=name,uselib=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,libpath=path,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>library<sp/>%s<sp/>in<sp/>LIBPATH_PYEMBED&apos;</highlight><highlight class="normal">%name)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dct[</highlight><highlight class="stringliteral">&apos;LIBDIR&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path=[dct[</highlight><highlight class="stringliteral">&apos;LIBDIR&apos;</highlight><highlight class="normal">]]</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;\n\n#<sp/>try<sp/>again<sp/>with<sp/>-L$python_LIBDIR:<sp/>%r\n&quot;</highlight><highlight class="normal">%path)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=conf.check(lib=name,uselib=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,libpath=path,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>library<sp/>%s<sp/>in<sp/>LIBDIR&apos;</highlight><highlight class="normal">%name)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>dct[</highlight><highlight class="stringliteral">&apos;LIBPL&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path=[dct[</highlight><highlight class="stringliteral">&apos;LIBPL&apos;</highlight><highlight class="normal">]]</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;\n\n#<sp/>try<sp/>again<sp/>with<sp/>-L$python_LIBPL<sp/>(some<sp/>systems<sp/>don&apos;t<sp/>install<sp/>the<sp/>python<sp/>library<sp/>in<sp/>$prefix/lib)\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=conf.check(lib=name,uselib=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,libpath=path,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>library<sp/>%s<sp/>in<sp/>python_LIBPL&apos;</highlight><highlight class="normal">%name)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path=[os.path.join(dct[</highlight><highlight class="stringliteral">&apos;prefix&apos;</highlight><highlight class="normal">],</highlight><highlight class="stringliteral">&quot;libs&quot;</highlight><highlight class="normal">)]</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;\n\n#<sp/>try<sp/>again<sp/>with<sp/>-L$prefix/libs,<sp/>and<sp/>pythonXY<sp/>name<sp/>rather<sp/>than<sp/>pythonX.Y<sp/>(win32)\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result=conf.check(lib=name,uselib=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,libpath=path,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>library<sp/>%s<sp/>in<sp/>$prefix/libs&apos;</highlight><highlight class="normal">%name)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>result:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>result:</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;LIBPATH_PYEMBED&apos;</highlight><highlight class="normal">]=path</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;LIB_PYEMBED&apos;</highlight><highlight class="normal">,[name])</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;\n\n###<sp/>LIB<sp/>NOT<sp/>FOUND\n&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref>(Utils.is_win32<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>sys.platform.startswith(</highlight><highlight class="stringliteral">&apos;os2&apos;</highlight><highlight class="normal">)</highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>dct[</highlight><highlight class="stringliteral">&apos;Py_ENABLE_SHARED&apos;</highlight><highlight class="normal">]):</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;LIBPATH_PYEXT&apos;</highlight><highlight class="normal">]=env[</highlight><highlight class="stringliteral">&apos;LIBPATH_PYEMBED&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;LIB_PYEXT&apos;</highlight><highlight class="normal">]=env[</highlight><highlight class="stringliteral">&apos;LIB_PYEMBED&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>num=</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">.join(env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">].split(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">)[:2])</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.find_program([</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">.join(pybin)+</highlight><highlight class="stringliteral">&apos;-config&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;python%s-config&apos;</highlight><highlight class="normal">%num,</highlight><highlight class="stringliteral">&apos;python-config-%s&apos;</highlight><highlight class="normal">%num,</highlight><highlight class="stringliteral">&apos;python%sm-config&apos;</highlight><highlight class="normal">%num],var=</highlight><highlight class="stringliteral">&apos;PYTHON_CONFIG&apos;</highlight><highlight class="normal">,mandatory=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>includes=[]</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conf.env.PYTHON_CONFIG:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>incstr<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>conf.cmd_and_log([conf.env.PYTHON_CONFIG,</highlight><highlight class="stringliteral">&apos;--includes&apos;</highlight><highlight class="normal">]).strip().split():</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="winfun_8c_1ab24f32995c1d94525943b4568cce20cb" kindref="member">if</ref>(incstr.startswith(</highlight><highlight class="stringliteral">&apos;-I&apos;</highlight><highlight class="normal">)</highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>incstr.startswith(</highlight><highlight class="stringliteral">&apos;/I&apos;</highlight><highlight class="normal">)):</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incstr=incstr[2:]</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>incstr<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>includes:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>includes.append(incstr)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;Include<sp/>path<sp/>for<sp/>Python<sp/>extensions<sp/>(found<sp/>via<sp/>python-config<sp/>--includes):<sp/>%r\n&quot;</highlight><highlight class="normal">%(includes,))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;INCLUDES_PYEXT&apos;</highlight><highlight class="normal">]=includes</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;INCLUDES_PYEMBED&apos;</highlight><highlight class="normal">]=includes</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.to_log(</highlight><highlight class="stringliteral">&quot;Include<sp/>path<sp/>for<sp/>Python<sp/>extensions<sp/>&quot;</highlight><highlight class="stringliteral">&quot;(found<sp/>via<sp/>distutils<sp/>module):<sp/>%r\n&quot;</highlight><highlight class="normal">%(dct[</highlight><highlight class="stringliteral">&apos;INCLUDEPY&apos;</highlight><highlight class="normal">],))</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;INCLUDES_PYEXT&apos;</highlight><highlight class="normal">]=[dct[</highlight><highlight class="stringliteral">&apos;INCLUDEPY&apos;</highlight><highlight class="normal">]]</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env[</highlight><highlight class="stringliteral">&apos;INCLUDES_PYEMBED&apos;</highlight><highlight class="normal">]=[dct[</highlight><highlight class="stringliteral">&apos;INCLUDEPY&apos;</highlight><highlight class="normal">]]</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;CC_NAME&apos;</highlight><highlight class="normal">]==</highlight><highlight class="stringliteral">&apos;gcc&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CFLAGS_PYEMBED&apos;</highlight><highlight class="normal">,[</highlight><highlight class="stringliteral">&apos;-fno-strict-aliasing&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CFLAGS_PYEXT&apos;</highlight><highlight class="normal">,[</highlight><highlight class="stringliteral">&apos;-fno-strict-aliasing&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env[</highlight><highlight class="stringliteral">&apos;CXX_NAME&apos;</highlight><highlight class="normal">]==</highlight><highlight class="stringliteral">&apos;gcc&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CXXFLAGS_PYEMBED&apos;</highlight><highlight class="normal">,[</highlight><highlight class="stringliteral">&apos;-fno-strict-aliasing&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CXXFLAGS_PYEXT&apos;</highlight><highlight class="normal">,[</highlight><highlight class="stringliteral">&apos;-fno-strict-aliasing&apos;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>env.CC_NAME==</highlight><highlight class="stringliteral">&quot;msvc&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>distutils.msvccompiler<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MSVCCompiler</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_compiler=MSVCCompiler()</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dist_compiler.initialize()</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CFLAGS_PYEXT&apos;</highlight><highlight class="normal">,dist_compiler.compile_options)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;CXXFLAGS_PYEXT&apos;</highlight><highlight class="normal">,dist_compiler.compile_options)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>env.append_value(</highlight><highlight class="stringliteral">&apos;LINKFLAGS_PYEXT&apos;</highlight><highlight class="normal">,dist_compiler.ldflags_shared)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check(header_name=</highlight><highlight class="stringliteral">&apos;Python.h&apos;</highlight><highlight class="normal">,define_name=</highlight><highlight class="stringliteral">&apos;HAVE_PYTHON_H&apos;</highlight><highlight class="normal">,uselib=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,fragment=FRAG,errmsg=</highlight><highlight class="stringliteral">&apos;:-(&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>conf.errors.ConfigurationError:</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xx=conf.env.CXX_NAME<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="stringliteral">&apos;cxx&apos;</highlight><highlight class="keywordflow">or</highlight><highlight class="stringliteral">&apos;c&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>flags=[</highlight><highlight class="stringliteral">&apos;--cflags&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;--libs&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;--ldflags&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>f<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>flags:</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check_cfg(msg=</highlight><highlight class="stringliteral">&apos;Asking<sp/>python-config<sp/>for<sp/>pyembed<sp/>%s<sp/>flags&apos;</highlight><highlight class="normal">%f,path=conf.env.PYTHON_CONFIG,package=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,uselib_store=</highlight><highlight class="stringliteral">&apos;PYEMBED&apos;</highlight><highlight class="normal">,args=[f])</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check(header_name=</highlight><highlight class="stringliteral">&apos;Python.h&apos;</highlight><highlight class="normal">,define_name=</highlight><highlight class="stringliteral">&apos;HAVE_PYTHON_H&apos;</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Getting<sp/>pyembed<sp/>flags<sp/>from<sp/>python-config&apos;</highlight><highlight class="normal">,fragment=FRAG,errmsg=</highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>build<sp/>a<sp/>python<sp/>embedded<sp/>interpreter&apos;</highlight><highlight class="normal">,features=</highlight><highlight class="stringliteral">&apos;%s<sp/>%sprogram<sp/>pyembed&apos;</highlight><highlight class="normal">%(xx,xx))</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>f<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>flags:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check_cfg(msg=</highlight><highlight class="stringliteral">&apos;Asking<sp/>python-config<sp/>for<sp/>pyext<sp/>%s<sp/>flags&apos;</highlight><highlight class="normal">%f,path=conf.env.PYTHON_CONFIG,package=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,uselib_store=</highlight><highlight class="stringliteral">&apos;PYEXT&apos;</highlight><highlight class="normal">,args=[f])</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.check(header_name=</highlight><highlight class="stringliteral">&apos;Python.h&apos;</highlight><highlight class="normal">,define_name=</highlight><highlight class="stringliteral">&apos;HAVE_PYTHON_H&apos;</highlight><highlight class="normal">,msg=</highlight><highlight class="stringliteral">&apos;Getting<sp/>pyext<sp/>flags<sp/>from<sp/>python-config&apos;</highlight><highlight class="normal">,features=</highlight><highlight class="stringliteral">&apos;%s<sp/>%sshlib<sp/>pyext&apos;</highlight><highlight class="normal">%(xx,xx),fragment=FRAG,errmsg=</highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>build<sp/>python<sp/>extensions&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a384089b6d673ce03705110abb0b572c8" kindref="member">check_python_version</ref>(conf,minver=None):</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>minver<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>isinstance(minver,tuple)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>pybin=conf.env[</highlight><highlight class="stringliteral">&apos;PYTHON&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>pybin:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;could<sp/>not<sp/>find<sp/>the<sp/>python<sp/>executable&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>cmd=pybin+[</highlight><highlight class="stringliteral">&apos;-c&apos;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&apos;import<sp/>sys\nfor<sp/>x<sp/>in<sp/>sys.version_info:<sp/>print(str(x))&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>Logs.debug(</highlight><highlight class="stringliteral">&apos;python:<sp/>Running<sp/>python<sp/>command<sp/>%r&apos;</highlight><highlight class="normal">%cmd)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>lines=conf.cmd_and_log(cmd).split()</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">assert</highlight><highlight class="normal"><sp/>len(lines)==5,</highlight><highlight class="stringliteral">&quot;found<sp/>%i<sp/>lines,<sp/>expected<sp/>5:<sp/>%r&quot;</highlight><highlight class="normal">%(len(lines),lines)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>pyver_tuple=(<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(lines[0]),<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(lines[1]),<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(lines[2]),lines[3],<ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref>(lines[4]))</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>result=(minver<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">)or(pyver_tuple&gt;=minver)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>result:</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyver=</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">.join([<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>(x)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>pyver_tuple[:2]])</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.env[</highlight><highlight class="stringliteral">&apos;PYTHON_VERSION&apos;</highlight><highlight class="normal">]=pyver</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="stringliteral">&apos;PYTHONDIR&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>conf.environ:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pydir=conf.environ[</highlight><highlight class="stringliteral">&apos;PYTHONDIR&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>Utils.is_win32:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(python_LIBDEST,pydir)=conf.get_python_variables([</highlight><highlight class="stringliteral">&quot;get_config_var(&apos;LIBDEST&apos;)<sp/>or<sp/>&apos;&apos;&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;get_python_lib(standard_lib=0,<sp/>prefix=%r)<sp/>or<sp/>&apos;&apos;&quot;</highlight><highlight class="normal">%conf.env[</highlight><highlight class="stringliteral">&apos;PREFIX&apos;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>python_LIBDEST=</highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pydir,)=conf.get_python_variables([</highlight><highlight class="stringliteral">&quot;get_python_lib(standard_lib=0,<sp/>prefix=%r)<sp/>or<sp/>&apos;&apos;&quot;</highlight><highlight class="normal">%conf.env[</highlight><highlight class="stringliteral">&apos;PREFIX&apos;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>python_LIBDEST<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conf.env[</highlight><highlight class="stringliteral">&apos;LIBDIR&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>python_LIBDEST=os.path.join(conf.env[</highlight><highlight class="stringliteral">&apos;LIBDIR&apos;</highlight><highlight class="normal">],</highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">+pyver)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>python_LIBDEST=os.path.join(conf.env[</highlight><highlight class="stringliteral">&apos;PREFIX&apos;</highlight><highlight class="normal">],</highlight><highlight class="stringliteral">&quot;lib&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;python&quot;</highlight><highlight class="normal">+pyver)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="stringliteral">&apos;PYTHONARCHDIR&apos;</highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>conf.environ:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyarchdir=conf.environ[</highlight><highlight class="stringliteral">&apos;PYTHONARCHDIR&apos;</highlight><highlight class="normal">]</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pyarchdir,)=conf.get_python_variables([</highlight><highlight class="stringliteral">&quot;get_python_lib(plat_specific=1,<sp/>standard_lib=0,<sp/>prefix=%r)<sp/>or<sp/>&apos;&apos;&quot;</highlight><highlight class="normal">%conf.env[</highlight><highlight class="stringliteral">&apos;PREFIX&apos;</highlight><highlight class="normal">]])</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>pyarchdir:</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyarchdir=pydir</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>hasattr(conf,</highlight><highlight class="stringliteral">&apos;define&apos;</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.define(</highlight><highlight class="stringliteral">&apos;PYTHONDIR&apos;</highlight><highlight class="normal">,pydir)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.define(</highlight><highlight class="stringliteral">&apos;PYTHONARCHDIR&apos;</highlight><highlight class="normal">,pyarchdir)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.env[</highlight><highlight class="stringliteral">&apos;PYTHONDIR&apos;</highlight><highlight class="normal">]=pydir</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.env[</highlight><highlight class="stringliteral">&apos;PYTHONARCHDIR&apos;</highlight><highlight class="normal">]=pyarchdir</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>pyver_full=</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">.join(<ref refid="structmap" kindref="compound">map</ref>(str,pyver_tuple[:3]))</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>minver<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.msg(</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>python<sp/>version&apos;</highlight><highlight class="normal">,pyver_full)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minver_str=</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">.join(<ref refid="structmap" kindref="compound">map</ref>(str,minver))</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.msg(</highlight><highlight class="stringliteral">&apos;Checking<sp/>for<sp/>python<sp/>version&apos;</highlight><highlight class="normal">,pyver_tuple,</highlight><highlight class="stringliteral">&quot;&gt;=<sp/>%s&quot;</highlight><highlight class="normal">%(minver_str,)</highlight><highlight class="keywordflow">and</highlight><highlight class="stringliteral">&apos;GREEN&apos;</highlight><highlight class="keywordflow">or</highlight><highlight class="stringliteral">&apos;YELLOW&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>result:</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;The<sp/>python<sp/>version<sp/>is<sp/>too<sp/>old,<sp/>expecting<sp/>%r&apos;</highlight><highlight class="normal">%(minver,))</highlight></codeline>
<codeline lineno="289"><highlight class="normal">PYTHON_MODULE_TEMPLATE=</highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="290"><highlight class="stringliteral">import<sp/>%s<sp/>as<sp/>current_module</highlight></codeline>
<codeline lineno="291"><highlight class="stringliteral">version<sp/>=<sp/>getattr(current_module,<sp/>&apos;__version__&apos;,<sp/>None)</highlight></codeline>
<codeline lineno="292"><highlight class="stringliteral">if<sp/>version<sp/>is<sp/>not<sp/>None:</highlight></codeline>
<codeline lineno="293"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>print(str(version))</highlight></codeline>
<codeline lineno="294"><highlight class="stringliteral">else:</highlight></codeline>
<codeline lineno="295"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>print(&apos;unknown<sp/>version&apos;)</highlight></codeline>
<codeline lineno="296"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">@conf</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a72e73914976ccc85f0013225e2fa0a3c" kindref="member">check_python_module</ref>(conf,module_name,condition=&apos;&apos;):</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>msg=</highlight><highlight class="stringliteral">&apos;Python<sp/>module<sp/>%s&apos;</highlight><highlight class="normal">%module_name</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>condition:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg=</highlight><highlight class="stringliteral">&apos;%s<sp/>(%s)&apos;</highlight><highlight class="normal">%(msg,condition)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.start_msg(msg)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret=conf.cmd_and_log(conf.env[</highlight><highlight class="stringliteral">&apos;PYTHON&apos;</highlight><highlight class="normal">]+[</highlight><highlight class="stringliteral">&apos;-c&apos;</highlight><highlight class="normal">,PYTHON_MODULE_TEMPLATE%module_name])</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>Exception:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.end_msg(</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>find<sp/>the<sp/>python<sp/>module<sp/>%r&apos;</highlight><highlight class="normal">%module_name)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>ret=ret.strip()</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>condition:</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.end_msg(ret)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret==</highlight><highlight class="stringliteral">&apos;unknown<sp/>version&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;Could<sp/>not<sp/>check<sp/>the<sp/>%s<sp/>version&apos;</highlight><highlight class="normal">%module_name)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>distutils.version<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>LooseVersion</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">num(*k):</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(k[0],int):</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LooseVersion(</highlight><highlight class="stringliteral">&apos;.&apos;</highlight><highlight class="normal">.join([<ref refid="sndfile__save_8m_1a4b99ff73a8a869319570237b5c57ab03" kindref="member">str</ref>(x)</highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>k]))</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LooseVersion(k[0])</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d={</highlight><highlight class="stringliteral">&apos;num&apos;</highlight><highlight class="normal">:num,</highlight><highlight class="stringliteral">&apos;ver&apos;</highlight><highlight class="normal">:LooseVersion(ret)}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ev=<ref refid="sndfile__load_8m_1a2e42535874848cdfc8a19e67b71befc9" kindref="member">eval</ref>(condition,{},d)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>ev:</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.fatal(</highlight><highlight class="stringliteral">&apos;The<sp/>%s<sp/>version<sp/>does<sp/>not<sp/>satisfy<sp/>the<sp/>requirements&apos;</highlight><highlight class="normal">%module_name)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>ret==</highlight><highlight class="stringliteral">&apos;unknown<sp/>version&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.end_msg(</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.end_msg(ret)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a4c940b786ec6ccb9dfbe0ad259793f85" kindref="member">configure</ref>(conf):</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.find_program(</highlight><highlight class="stringliteral">&apos;python&apos;</highlight><highlight class="normal">,var=</highlight><highlight class="stringliteral">&apos;PYTHON&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>conf.errors.ConfigurationError:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.warn(</highlight><highlight class="stringliteral">&quot;could<sp/>not<sp/>find<sp/>a<sp/>python<sp/>executable,<sp/>setting<sp/>to<sp/>sys.executable<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">%sys.executable)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conf.env.PYTHON=sys.executable</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>conf.env.PYTHON!=sys.executable:</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Logs.warn(</highlight><highlight class="stringliteral">&quot;python<sp/>executable<sp/>%r<sp/>differs<sp/>from<sp/>system<sp/>%r&quot;</highlight><highlight class="normal">%(conf.env.PYTHON,sys.executable))</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>conf.env.PYTHON=conf.cmd_to_list(conf.env.PYTHON)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>v=conf.env</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>v[</highlight><highlight class="stringliteral">&apos;PYCMD&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;&quot;import<sp/>sys,<sp/>py_compile;py_compile.compile(sys.argv[1],<sp/>sys.argv[2])&quot;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>v[</highlight><highlight class="stringliteral">&apos;PYFLAGS&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>v[</highlight><highlight class="stringliteral">&apos;PYFLAGS_OPT&apos;</highlight><highlight class="normal">]=</highlight><highlight class="stringliteral">&apos;-O&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>v[</highlight><highlight class="stringliteral">&apos;PYC&apos;</highlight><highlight class="normal">]=getattr(Options.options,</highlight><highlight class="stringliteral">&apos;pyc&apos;</highlight><highlight class="normal">,1)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>v[</highlight><highlight class="stringliteral">&apos;PYO&apos;</highlight><highlight class="normal">]=getattr(Options.options,</highlight><highlight class="stringliteral">&apos;pyo&apos;</highlight><highlight class="normal">,1)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal"><ref refid="namespacewaflib_1_1_tools_1_1python_1a1729b5b9d6f6a5972667bc5d2d1c5f0b" kindref="member">options</ref>(opt):</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>opt.add_option(</highlight><highlight class="stringliteral">&apos;--nopyc&apos;</highlight><highlight class="normal">,action=</highlight><highlight class="stringliteral">&apos;store_false&apos;</highlight><highlight class="normal">,default=1,help=</highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>install<sp/>bytecode<sp/>compiled<sp/>.pyc<sp/>files<sp/>(configuration)<sp/>[Default:install]&apos;</highlight><highlight class="normal">,dest=</highlight><highlight class="stringliteral">&apos;pyc&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>opt.add_option(</highlight><highlight class="stringliteral">&apos;--nopyo&apos;</highlight><highlight class="normal">,action=</highlight><highlight class="stringliteral">&apos;store_false&apos;</highlight><highlight class="normal">,default=1,help=</highlight><highlight class="stringliteral">&apos;Do<sp/>not<sp/>install<sp/>optimised<sp/>compiled<sp/>.pyo<sp/>files<sp/>(configuration)<sp/>[Default:install]&apos;</highlight><highlight class="normal">,dest=</highlight><highlight class="stringliteral">&apos;pyo&apos;</highlight><highlight class="normal">)</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/lv2/lv2/plugins/eg-amp.lv2/waflib/Tools/python.py"/>
  </compounddef>
</doxygen>
