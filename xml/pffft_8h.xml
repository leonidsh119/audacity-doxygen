<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="pffft_8h" kind="file" language="C++">
    <compoundname>pffft.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includedby refid="pffft_8c" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.c</includedby>
    <incdepgraph>
      <node id="21227">
        <label>stddef.h</label>
      </node>
      <node id="21226">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h</label>
        <link refid="pffft.h"/>
        <childnode refid="21227" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="21230">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft32.c</label>
        <link refid="pffft32_8c"/>
      </node>
      <node id="21232">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd-dev.h</label>
        <link refid="simd-dev_8h"/>
        <childnode refid="21233" relation="include">
        </childnode>
      </node>
      <node id="21231">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft32s.c</label>
        <link refid="pffft32s_8c"/>
      </node>
      <node id="21229">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.c</label>
        <link refid="pffft_8c"/>
        <childnode refid="21230" relation="include">
        </childnode>
        <childnode refid="21231" relation="include">
        </childnode>
        <childnode refid="21232" relation="include">
        </childnode>
      </node>
      <node id="21228">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h</label>
        <link refid="pffft.h"/>
        <childnode refid="21229" relation="include">
        </childnode>
      </node>
      <node id="21233">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/simd.c</label>
        <link refid="simd_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91" prot="public" static="no">
        <name>pffft_direction_t</name>
        <enumvalue id="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91a5b1276b534d9d8995951d81f61e179bb" prot="public">
          <name>PFFFT_FORWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91a1b2da06526af5dde2d16fa0b36cba46b" prot="public">
          <name>PFFFT_BACKWARD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="92" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1" prot="public" static="no">
        <name>pffft_transform_t</name>
        <enumvalue id="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1a0d8b922832bef8ecca106aad8bcd67a8" prot="public">
          <name>PFFFT_REAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1a49bcfbb9d5a46fd48c907c98fe0e9af9" prot="public">
          <name>PFFFT_COMPLEX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="95" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" bodystart="95" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pffft_8h_1a6299fd05123a505cff9605b6fd4ff452" prot="public" static="no">
        <type>struct <ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref></type>
        <definition>typedef struct PFFFT_Setup PFFFT_Setup</definition>
        <argsstring></argsstring>
        <name>PFFFT_Setup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="945" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pffft_8h_1a5880257f9fa517b2c77605082509c50c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
        <definition>static PFFFT_Setup* pffft_new_setup</definition>
        <argsstring>(int N, pffft_transform_t transform)</argsstring>
        <name>pffft_new_setup</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>N</declname>
        </param>
        <param>
          <type><ref refid="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1" kindref="member">pffft_transform_t</ref></type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="102" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.c" bodystart="948" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1aa72227e06a02c6a115c0aa404f271333" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_destroy_setup</definition>
        <argsstring>(PFFFT_Setup *)</argsstring>
        <name>pffft_destroy_setup</name>
        <param>
          <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1acb44f7f85bccc37e35ebf9c53ed3027f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_transform</definition>
        <argsstring>(PFFFT_Setup *setup, const float *input, float *output, float *work, pffft_direction_t direction)</argsstring>
        <name>pffft_transform</name>
        <param>
          <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
          <declname>setup</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91" kindref="member">pffft_direction_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1a7d882f918abebb24d1b4125f3a5dc5d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_transform_ordered</definition>
        <argsstring>(PFFFT_Setup *setup, const float *input, float *output, float *work, pffft_direction_t direction)</argsstring>
        <name>pffft_transform_ordered</name>
        <param>
          <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
          <declname>setup</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <param>
          <type><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91" kindref="member">pffft_direction_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1a348abab9f98259586a01b85718e403f8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_zreorder</definition>
        <argsstring>(PFFFT_Setup *setup, const float *input, float *output, pffft_direction_t direction)</argsstring>
        <name>pffft_zreorder</name>
        <param>
          <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
          <declname>setup</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>output</declname>
        </param>
        <param>
          <type><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91" kindref="member">pffft_direction_t</ref></type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1a127e73c91fd2771ba31110bd40048f97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_zconvolve</definition>
        <argsstring>(PFFFT_Setup *setup, const float *dft_a, const float *dft_b, float *dft_ab)</argsstring>
        <name>pffft_zconvolve</name>
        <param>
          <type><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref> *</type>
          <declname>setup</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>dft_a</declname>
        </param>
        <param>
          <type><ref refid="getopt1_8c_1a2c212835823e3c54a8ab6d95c652660e" kindref="member">const</ref> float *</type>
          <declname>dft_b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>dft_ab</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1ac0472e2ff3d963a141c0514882a2c036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
        <definition>int pffft_simd_size</definition>
        <argsstring>(void)</argsstring>
        <name>pffft_simd_size</name>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pffft_8h_1a61e5a8623ce08a01b835c2e946ee4eeb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref></type>
        <definition>static void pffft_reorder_back</definition>
        <argsstring>(int length, void *setup, float *data, float *work)</argsstring>
        <name>pffft_reorder_back</name>
        <param>
          <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
          <declname>setup</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>work</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h" line="171" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2011<sp/><sp/>Julien<sp/>Pommier<sp/>(<sp/>pommier@modartt.com<sp/>)</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/><sp/><sp/>Based<sp/>on<sp/>original<sp/>fortran<sp/>77<sp/>code<sp/>from<sp/>FFTPACKv4<sp/>from<sp/>NETLIB,</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/><sp/><sp/>authored<sp/>by<sp/>Dr<sp/>Paul<sp/>Swarztrauber<sp/>of<sp/>NCAR,<sp/>in<sp/>1985.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/><sp/><sp/>As<sp/>confirmed<sp/>by<sp/>the<sp/>NCAR<sp/>fftpack<sp/>software<sp/>curators,<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/>FFTPACKv5<sp/>license<sp/>applies<sp/>to<sp/>FFTPACKv4<sp/>sources.<sp/>My<sp/>changes<sp/>are</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/>released<sp/>under<sp/>the<sp/>same<sp/>terms.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>FFTPACK<sp/>license:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"></highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>http://www.cisl.ucar.edu/css/software/fftpack5/ftpk.html</highlight></codeline>
<codeline lineno="13"><highlight class="comment"></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>Copyright<sp/>(c)<sp/>2004<sp/>the<sp/>University<sp/>Corporation<sp/>for<sp/>Atmospheric</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/>Research<sp/>(&quot;UCAR&quot;).<sp/>All<sp/>rights<sp/>reserved.<sp/>Developed<sp/>by<sp/>NCAR&apos;s</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/>Computational<sp/>and<sp/>Information<sp/>Systems<sp/>Laboratory,<sp/>UCAR,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>www.cisl.ucar.edu.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>of<sp/>the<sp/>Software<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>with<sp/>or<sp/>without<sp/>modification,<sp/>is<sp/>permitted<sp/>provided<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Neither<sp/>the<sp/>names<sp/>of<sp/>NCAR&apos;s<sp/>Computational<sp/>and<sp/>Information<sp/>Systems</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>Laboratory,<sp/>the<sp/>University<sp/>Corporation<sp/>for<sp/>Atmospheric<sp/>Research,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>sponsors<sp/>or<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>Software<sp/>without</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"></highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>notices,<sp/>this<sp/>list<sp/>of<sp/>conditions,<sp/>and<sp/>the<sp/>disclaimer<sp/>below.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions,<sp/>and<sp/>the<sp/>disclaimer<sp/>below<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/>distribution.</highlight></codeline>
<codeline lineno="36"><highlight class="comment"></highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/>EXPRESS<sp/>OR<sp/>IMPLIED,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/>MERCHANTABILITY,<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>CONTRIBUTORS<sp/>OR<sp/>COPYRIGHT</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>WITH<sp/>THE</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="46"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/>PFFFT<sp/>:<sp/>a<sp/>Pretty<sp/>Fast<sp/>FFT.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"></highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/>This<sp/>is<sp/>basically<sp/>an<sp/>adaptation<sp/>of<sp/>the<sp/>single<sp/>precision<sp/>fftpack</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/>(v4)<sp/>as<sp/>found<sp/>on<sp/>netlib<sp/>taking<sp/>advantage<sp/>of<sp/>SIMD<sp/>instruction<sp/>found</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/>on<sp/>cpus<sp/>such<sp/>as<sp/>intel<sp/>x86<sp/>(SSE1),<sp/>powerpc<sp/>(Altivec),<sp/>and<sp/>arm<sp/>(NEON).</highlight></codeline>
<codeline lineno="54"><highlight class="comment"></highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/>For<sp/>architectures<sp/>where<sp/>no<sp/>SIMD<sp/>instruction<sp/>is<sp/>available,<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/>falls<sp/>back<sp/>to<sp/>a<sp/>scalar<sp/>version.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"></highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/>Restrictions:</highlight></codeline>
<codeline lineno="59"><highlight class="comment"></highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/>-<sp/>1D<sp/>transforms<sp/>only,<sp/>with<sp/>32-bit<sp/>single<sp/>precision.</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/>-<sp/>supports<sp/>only<sp/>transforms<sp/>for<sp/>inputs<sp/>of<sp/>length<sp/>N<sp/>of<sp/>the<sp/>form</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/>N=(2^a)*(3^b),<sp/>a<sp/>&gt;=<sp/>5<sp/>and<sp/>b<sp/>&gt;=0<sp/>(32,<sp/>48,<sp/>64,<sp/>96,<sp/>128,<sp/>144<sp/>etc</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/>are<sp/>all<sp/>acceptable<sp/>lengths).<sp/>Performance<sp/>is<sp/>best<sp/>for<sp/>128&lt;=N&lt;=8192.</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/>-<sp/>all<sp/>(float*)<sp/>pointers<sp/>in<sp/>the<sp/>functions<sp/>below<sp/>are<sp/>expected<sp/>to</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/>have<sp/>an<sp/>&quot;simd-compatible&quot;<sp/>alignment,<sp/>that<sp/>is<sp/>16<sp/>bytes<sp/>on<sp/>x86<sp/>and</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/><sp/>powerpc<sp/>CPUs.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/>You<sp/>can<sp/>allocate<sp/>such<sp/>buffers<sp/>with<sp/>the<sp/>functions</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/>pffft_aligned_malloc<sp/>/<sp/>pffft_aligned_free<sp/>(or<sp/>with<sp/>stuff<sp/>like</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/>posix_memalign..)</highlight></codeline>
<codeline lineno="73"><highlight class="comment"></highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>PFFFT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PFFFT_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>opaque<sp/>struct<sp/>holding<sp/>internal<sp/>stuff<sp/>(precomputed<sp/>twiddle<sp/>factors)</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>this<sp/>struct<sp/>can<sp/>be<sp/>shared<sp/>by<sp/>many<sp/>threads<sp/>as<sp/>it<sp/>contains<sp/>only</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>read-only<sp/>data.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="pffft_8h_1a6299fd05123a505cff9605b6fd4ff452" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>direction<sp/>of<sp/>the<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91a5b1276b534d9d8995951d81f61e179bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91a5b1276b534d9d8995951d81f61e179bb" kindref="member">PFFFT_FORWARD</ref>,<sp/><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91a1b2da06526af5dde2d16fa0b36cba46b" kindref="member">PFFFT_BACKWARD</ref><sp/>}<sp/><ref refid="pffft_8h_1a2e53fece2e9e96e8beeabe770f191f91" kindref="member">pffft_direction_t</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>type<sp/>of<sp/>transform<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1a0d8b922832bef8ecca106aad8bcd67a8" kindref="member">PFFFT_REAL</ref>,<sp/><ref refid="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1a49bcfbb9d5a46fd48c907c98fe0e9af9" kindref="member">PFFFT_COMPLEX</ref><sp/>}<sp/><ref refid="pffft_8h_1af5506e26b5d8295b89aa0186261dfef1" kindref="member">pffft_transform_t</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/><sp/><sp/><sp/>prepare<sp/>for<sp/>performing<sp/>transforms<sp/>of<sp/>size<sp/>N<sp/>--<sp/>the<sp/>returned</highlight></codeline>
<codeline lineno="99"><highlight class="comment"><sp/><sp/><sp/><sp/>PFFFT_Setup<sp/>structure<sp/>is<sp/>read-only<sp/>so<sp/>it<sp/>can<sp/>safely<sp/>be<sp/>shared<sp/>by</highlight></codeline>
<codeline lineno="100"><highlight class="comment"><sp/><sp/><sp/><sp/>multiple<sp/>concurrent<sp/>threads.</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*<ref refid="pffft_8c_1a7a523ab656e85367f1d256f89ee39974" kindref="member">pffft_new_setup</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="rfft2d_test_m_l_8m_1af6d1246b147a7c5763d9fc83082020ff" kindref="member">N</ref>,<sp/>pffft_transform_t<sp/><ref refid="struct_p_f_f_f_t___setup_1a980def09ec15883c12689443d97a36b5" kindref="member">transform</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_destroy_setup(<ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Perform<sp/>a<sp/>Fourier<sp/>transform<sp/>,<sp/>The<sp/>z-domain<sp/>data<sp/>is<sp/>stored<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>most<sp/>efficient<sp/>order<sp/>for<sp/>transforming<sp/>it<sp/>back,<sp/>or<sp/>using<sp/>it<sp/>for</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>convolution.<sp/>If<sp/>you<sp/>need<sp/>to<sp/>have<sp/>its<sp/>content<sp/>sorted<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>&quot;usual&quot;<sp/>way,<sp/>that<sp/>is<sp/>as<sp/>an<sp/>array<sp/>of<sp/>interleaved<sp/>complex<sp/>numbers,</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>either<sp/>use<sp/>pffft_transform_ordered<sp/>,<sp/>or<sp/>call<sp/>pffft_zreorder<sp/>after</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>forward<sp/>fft,<sp/>and<sp/>before<sp/>the<sp/>backward<sp/>fft.</highlight></codeline>
<codeline lineno="111"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Transforms<sp/>are<sp/>not<sp/>scaled:<sp/>PFFFT_BACKWARD(PFFFT_FORWARD(x))<sp/>=<sp/>N*x.</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Typically<sp/>you<sp/>will<sp/>want<sp/>to<sp/>scale<sp/>the<sp/>backward<sp/>transform<sp/>by<sp/>1/N.</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>&apos;work&apos;<sp/>pointer<sp/>should<sp/>point<sp/>to<sp/>an<sp/>area<sp/>of<sp/>N<sp/>(2*N<sp/>for<sp/>complex</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>fft)<sp/>floats,<sp/>properly<sp/>aligned.<sp/>[del]If<sp/>&apos;work&apos;<sp/>is<sp/>NULL,<sp/>then<sp/>stack<sp/>will</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>be<sp/>used<sp/>instead<sp/>(this<sp/>is<sp/>probably<sp/>the<sp/>beest<sp/>strategy<sp/>for<sp/>small</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>FFTs,<sp/>say<sp/>for<sp/>N<sp/>&lt;<sp/>16384).[/del]</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>input<sp/>and<sp/>output<sp/>may<sp/>alias.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_transform(<ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*<ref refid="namespacesetup" kindref="compound">setup</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<ref refid="namespacelv2specgen_1a653e2b7722801dea4d25040ac958b631" kindref="member">output</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*work,<sp/>pffft_direction_t<sp/>direction);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Similar<sp/>to<sp/>pffft_transform,<sp/>but<sp/>makes<sp/>sure<sp/>that<sp/>the<sp/>output<sp/>is</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>ordered<sp/>as<sp/>expected<sp/>(interleaved<sp/>complex<sp/>numbers).<sp/><sp/>This<sp/>is</highlight></codeline>
<codeline lineno="127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>similar<sp/>to<sp/>calling<sp/>pffft_transform<sp/>and<sp/>then<sp/>pffft_zreorder.</highlight></codeline>
<codeline lineno="128"><highlight class="comment"></highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>input<sp/>and<sp/>output<sp/>may<sp/>alias.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_transform_ordered(<ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*setup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*output,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*work,<sp/>pffft_direction_t<sp/>direction);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>call<sp/>pffft_zreorder(..,<sp/>PFFFT_FORWARD)<sp/>after<sp/>pffft_transform(...,</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>PFFFT_FORWARD)<sp/>if<sp/>you<sp/>want<sp/>to<sp/>have<sp/>the<sp/>frequency<sp/>components<sp/>in</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>correct<sp/>&quot;canonical&quot;<sp/>order,<sp/>as<sp/>interleaved<sp/>complex<sp/>numbers.</highlight></codeline>
<codeline lineno="137"><highlight class="comment"></highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>(for<sp/>real<sp/>transforms,<sp/>both<sp/>0-frequency<sp/>and<sp/>half<sp/>frequency</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>components,<sp/>which<sp/>are<sp/>real,<sp/>are<sp/>assembled<sp/>in<sp/>the<sp/>first<sp/>entry<sp/>as</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>F(0)+i*F(n/2+1).<sp/>Note<sp/>that<sp/>the<sp/>original<sp/>fftpack<sp/>did<sp/>place</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>F(n/2+1)<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>arrays).</highlight></codeline>
<codeline lineno="142"><highlight class="comment"></highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>input<sp/>and<sp/>output<sp/>should<sp/>not<sp/>alias.</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_zreorder(<ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*setup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*output,<sp/>pffft_direction_t<sp/>direction);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>Perform<sp/>a<sp/>multiplication<sp/>of<sp/>the<sp/>frequency<sp/>components<sp/>of<sp/>dft_a<sp/>and</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>dft_b<sp/>and<sp/>accumulate<sp/>them<sp/>into<sp/>dft_ab.<sp/>The<sp/>arrays<sp/>should<sp/>have</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>been<sp/>obtained<sp/>with<sp/>pffft_transform(..,<sp/>PFFFT_FORWARD)<sp/>and<sp/>should</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*not*<sp/>have<sp/>been<sp/>reordered<sp/>with<sp/>pffft_zreorder<sp/>(otherwise<sp/>just</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>perform<sp/>the<sp/>operation<sp/>yourself<sp/>as<sp/>the<sp/>dft<sp/>coefs<sp/>are<sp/>stored<sp/>as</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>interleaved<sp/>complex<sp/>numbers).</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>operation<sp/>performed<sp/>is:<sp/>dft_ab<sp/>+=<sp/>(dft_a<sp/>*<sp/>fdt_b)*scaling</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>dft_a,<sp/>dft_b<sp/>and<sp/>dft_ab<sp/>pointers<sp/>may<sp/>alias.</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/>void<sp/>pffft_zconvolve_accumulate(PFFFT_Setup<sp/>*setup,<sp/>const<sp/>float<sp/>*dft_a,<sp/>const<sp/>float<sp/>*dft_b,<sp/>float<sp/>*dft_ab,<sp/>float<sp/>scaling);</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>the<sp/>operation<sp/>performed<sp/>is:<sp/>dft_ab<sp/>=<sp/>(dft_a<sp/>*<sp/>fdt_b)</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>The<sp/>dft_a,<sp/>dft_b<sp/>and<sp/>dft_ab<sp/>pointers<sp/>may<sp/>alias.</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_zconvolve(<ref refid="struct_p_f_f_f_t___setup" kindref="compound">PFFFT_Setup</ref><sp/>*setup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*dft_a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*dft_b,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*dft_ab);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>4<sp/>or<sp/>1<sp/>wether<sp/>support<sp/>SSE/Altivec<sp/>instructions<sp/>was<sp/>enable<sp/>when<sp/>building<sp/>pffft.c<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="pffft_8h_1ac0472e2ff3d963a141c0514882a2c036" kindref="member">pffft_simd_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pffft_reorder_back(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test__lib_f_l_a_c_2format_8c_1ac94dc16b22556ba5fa815655f27442da" kindref="member">length</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>setup,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/><ref refid="lib_2expat_8h_1ac39e72a1de1cb50dbdc54b08d0432a24" kindref="member">data</ref>,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*<sp/>work);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libsoxr/src/pffft.h"/>
  </compounddef>
</doxygen>
