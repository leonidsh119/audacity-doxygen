<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="callback_8h" kind="file" language="C++">
    <compoundname>callback.h</compoundname>
    <includes refid="ordinals_8h" local="yes">ordinals.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="include_2_f_l_a_c_2all_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/all.h</includedby>
    <includedby refid="include_2_f_l_a_c_2metadata_8h" local="yes">C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h</includedby>
    <incdepgraph>
      <node id="6325">
        <label>ordinals.h</label>
        <link refid="ordinals_8h"/>
        <childnode refid="6326" relation="include">
        </childnode>
      </node>
      <node id="6326">
        <label>stdint.h</label>
      </node>
      <node id="6327">
        <label>stdlib.h</label>
      </node>
      <node id="6324">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h</label>
        <link refid="callback.h"/>
        <childnode refid="6325" relation="include">
        </childnode>
        <childnode refid="6327" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6333">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/main.c</label>
        <link refid="src_2flac_2main_8c"/>
      </node>
      <node id="6334">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/plugin_xmms/plugin.c</label>
        <link refid="libflac_2src_2plugin__xmms_2plugin_8c"/>
      </node>
      <node id="6330">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/analyze.c</label>
        <link refid="analyze_8c"/>
      </node>
      <node id="6335">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/metadata.h</label>
        <link refid="include_2_f_l_a_c_2metadata_8h"/>
        <childnode refid="6329" relation="include">
        </childnode>
      </node>
      <node id="6328">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h</label>
        <link refid="callback.h"/>
        <childnode refid="6329" relation="include">
        </childnode>
        <childnode refid="6335" relation="include">
        </childnode>
      </node>
      <node id="6331">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/decode.c</label>
        <link refid="libflac_2src_2flac_2decode_8c"/>
      </node>
      <node id="6329">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/all.h</label>
        <link refid="include_2_f_l_a_c_2all_8h"/>
        <childnode refid="6330" relation="include">
        </childnode>
        <childnode refid="6331" relation="include">
        </childnode>
        <childnode refid="6332" relation="include">
        </childnode>
        <childnode refid="6333" relation="include">
        </childnode>
        <childnode refid="6334" relation="include">
        </childnode>
      </node>
      <node id="6332">
        <label>C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/src/flac/encode.c</label>
        <link refid="libflac_2src_2flac_2encode_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_f_l_a_c_____i_o_callbacks" prot="public">FLAC__IOCallbacks</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" prot="public" static="no">
        <type><ref refid="sound_8c_1ae35f5844602719cf66324f4de2a658b3" kindref="member">void</ref> *</type>
        <definition>typedef void* FLAC__IOHandle</definition>
        <argsstring></argsstring>
        <name>FLAC__IOHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the opaque handle type used by the callbacks. Typically this is a <computeroutput>FILE*</computeroutput> or address of a file descriptor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="89" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga49d95218a6c09b215cd92cc96de71bf9" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* FLAC__IOCallback_Read) (void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</definition>
        <argsstring>)(void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Read</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the read callback. The signature and semantics match POSIX fread() implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the read buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the records to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records to be read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records read. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="102" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1gad991792235879aecae289b56a112e1b8" prot="public" static="no">
        <type>size_t(*</type>
        <definition>typedef size_t(* FLAC__IOCallback_Write) (const void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</definition>
        <argsstring>)(const void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the write callback. The signature and semantics match POSIX fwrite() implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the write buffer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the records to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nmemb</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records to be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>size_t</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of records written. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="115" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1gab3942bbbd6ae09bcefe7cb3a0060c49c" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Seek) (FLAC__IOHandle handle, FLAC__int64 offset, int whence)</definition>
        <argsstring>)(FLAC__IOHandle handle, FLAC__int64 offset, int whence)</argsstring>
        <name>FLAC__IOCallback_Seek</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the seek callback. The signature and semantics mostly match POSIX fseek() WITH ONE IMPORTANT EXCEPTION: the offset is a 64-bit type whereas fseek() is generally &apos;long&apos; and 32-bits wide.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new position, relative to <emphasis>whence</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>whence</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>SEEK_SET</computeroutput>, <computeroutput>SEEK_CUR</computeroutput>, or <computeroutput>SEEK_END</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> on success, <computeroutput>-1</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="128" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga45314930cabc2e9c04867eae6bca309f" prot="public" static="no">
        <type><ref refid="ordinals_8h_1a12b57f75f760b9062a13bcda1bdb3f3e" kindref="member">FLAC__int64</ref>(*</type>
        <definition>typedef FLAC__int64(* FLAC__IOCallback_Tell) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Tell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the tell callback. The signature and semantics mostly match POSIX ftell() WITH ONE IMPORTANT EXCEPTION: the offset is a 64-bit type whereas ftell() is generally &apos;long&apos; and 32-bits wide.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>FLAC__int64</parametername>
</parameternamelist>
<parameterdescription>
<para>The current position on success, <computeroutput>-1</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="139" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga00ae3b3d373e691908e9539ebf720675" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Eof) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the EOF callback. The signature and semantics mostly match POSIX feof() but WATCHOUT: on many systems, feof() is a macro, so in this case a wrapper function must be provided instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> if not at end of file, nonzero if at end of file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="150" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__flac__callbacks_1ga0032267fac38220689778833e08f7387" prot="public" static="no">
        <type><ref refid="xmltok_8h_1a5a0d4a5641ce434f1d23533f2b2e6653" kindref="member">int</ref>(*</type>
        <definition>typedef int(* FLAC__IOCallback_Close) (FLAC__IOHandle handle)</definition>
        <argsstring>)(FLAC__IOHandle handle)</argsstring>
        <name>FLAC__IOCallback_Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Signature for the close callback. The signature and semantics match POSIX <ref refid="conv2dtest_8m_1ae93e9d524fd1ef618af3d5070a8126eb" kindref="member">fclose()</ref> implementations and can generally be used interchangeably.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle to the data source. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>int</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>0</computeroutput> on success, <computeroutput>EOF</computeroutput> on error. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" line="160" column="1" bodyfile="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This module defines the structures for describing I/O callbacks to the other <ref refid="namespace_f_l_a_c" kindref="compound">FLAC</ref> interfaces. </para>    </briefdescription>
    <detaileddescription>
<para>See the detailed documentation for callbacks in the <ref refid="group__flac__callbacks" kindref="compound">callbacks </ref> module. </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>libFLAC<sp/>-<sp/>Free<sp/>Lossless<sp/>Audio<sp/>Codec<sp/>library</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2004-2009<sp/><sp/>Josh<sp/>Coalson</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2011-2014<sp/><sp/>Xiph.Org<sp/>Foundation</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Xiph.org<sp/>Foundation<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/><sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>FOUNDATION<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FLAC__CALLBACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FLAC__CALLBACK_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ordinals_8h" kindref="compound">ordinals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>size_t<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__flac__callbacks_1ga4c329c3168dee6e352384c5e9306260d" kindref="member">FLAC__IOHandle</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__flac__callbacks_1ga49d95218a6c09b215cd92cc96de71bf9" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="group__flac__callbacks_1ga49d95218a6c09b215cd92cc96de71bf9" kindref="member">FLAC__IOCallback_Read</ref>)<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref>,<sp/>FLAC__IOHandle<sp/>handle);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__flac__callbacks_1gad991792235879aecae289b56a112e1b8" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>size_t<sp/>(*<ref refid="group__flac__callbacks_1gad991792235879aecae289b56a112e1b8" kindref="member">FLAC__IOCallback_Write</ref>)<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga854352f53b148adc24983a58a1866d66" kindref="member">size</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="group__lavu__mem_1ga79fd723df92f68cf8a6207a1d98b4c01" kindref="member">nmemb</ref>,<sp/>FLAC__IOHandle<sp/>handle);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__flac__callbacks_1gab3942bbbd6ae09bcefe7cb3a0060c49c" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="group__flac__callbacks_1gab3942bbbd6ae09bcefe7cb3a0060c49c" kindref="member">FLAC__IOCallback_Seek</ref>)<sp/>(FLAC__IOHandle<sp/>handle,<sp/><ref refid="ordinals_8h_1a12b57f75f760b9062a13bcda1bdb3f3e" kindref="member">FLAC__int64</ref><sp/><ref refid="layer12_8c_1a33d71f23ba2052d17f0b754dc35265b0" kindref="member">offset</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="group__flac__callbacks_1ga45314930cabc2e9c04867eae6bca309f" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="ordinals_8h_1a12b57f75f760b9062a13bcda1bdb3f3e" kindref="member">FLAC__int64</ref><sp/>(*<ref refid="group__flac__callbacks_1ga45314930cabc2e9c04867eae6bca309f" kindref="member">FLAC__IOCallback_Tell</ref>)<sp/>(FLAC__IOHandle<sp/>handle);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group__flac__callbacks_1ga00ae3b3d373e691908e9539ebf720675" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="group__flac__callbacks_1ga00ae3b3d373e691908e9539ebf720675" kindref="member">FLAC__IOCallback_Eof</ref>)<sp/>(FLAC__IOHandle<sp/>handle);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group__flac__callbacks_1ga0032267fac38220689778833e08f7387" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="lib_2expat_8h_1a14bb8924daea0b48c7803f281f66e390" kindref="member">int</ref><sp/>(*<ref refid="group__flac__callbacks_1ga0032267fac38220689778833e08f7387" kindref="member">FLAC__IOCallback_Close</ref>)<sp/>(FLAC__IOHandle<sp/>handle);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="struct_f_l_a_c_____i_o_callbacks" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171" refid="struct_f_l_a_c_____i_o_callbacks_1a6dd767bc254e31dc47c9a0d218e72190" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1ga49d95218a6c09b215cd92cc96de71bf9" kindref="member">FLAC__IOCallback_Read</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1a6dd767bc254e31dc47c9a0d218e72190" kindref="member">read</ref>;</highlight></codeline>
<codeline lineno="172" refid="struct_f_l_a_c_____i_o_callbacks_1ad64901e5a5710ee4c3c157c75d51ddc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1gad991792235879aecae289b56a112e1b8" kindref="member">FLAC__IOCallback_Write</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1ad64901e5a5710ee4c3c157c75d51ddc0" kindref="member">write</ref>;</highlight></codeline>
<codeline lineno="173" refid="struct_f_l_a_c_____i_o_callbacks_1aa1a6f4623965a2d9fcc09b92fabaa1ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1gab3942bbbd6ae09bcefe7cb3a0060c49c" kindref="member">FLAC__IOCallback_Seek</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1aa1a6f4623965a2d9fcc09b92fabaa1ee" kindref="member">seek</ref>;</highlight></codeline>
<codeline lineno="174" refid="struct_f_l_a_c_____i_o_callbacks_1a8ff0d175a7b3e9318270e305918df827" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1ga45314930cabc2e9c04867eae6bca309f" kindref="member">FLAC__IOCallback_Tell</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1a8ff0d175a7b3e9318270e305918df827" kindref="member">tell</ref>;</highlight></codeline>
<codeline lineno="175" refid="struct_f_l_a_c_____i_o_callbacks_1a4810838b77667dc02415c854b2103e66" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1ga00ae3b3d373e691908e9539ebf720675" kindref="member">FLAC__IOCallback_Eof</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1a4810838b77667dc02415c854b2103e66" kindref="member">eof</ref>;</highlight></codeline>
<codeline lineno="176" refid="struct_f_l_a_c_____i_o_callbacks_1a8e447ae1999d9da9ebad5417f47223be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__flac__callbacks_1ga0032267fac38220689778833e08f7387" kindref="member">FLAC__IOCallback_Close</ref><sp/><ref refid="struct_f_l_a_c_____i_o_callbacks_1a8e447ae1999d9da9ebad5417f47223be" kindref="member">close</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}<sp/><ref refid="struct_f_l_a_c_____i_o_callbacks" kindref="compound">FLAC__IOCallbacks</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>\}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="C:/_dev/OpenU/Audacity/audacity/lib-src/libflac/include/FLAC/callback.h"/>
  </compounddef>
</doxygen>
